// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
var cr = {};
cr.plugins_ = {};
cr.behaviors = {};
if (typeof Object.getPrototypeOf !== "function")
{
	if (typeof "test".__proto__ === "object")
	{
		Object.getPrototypeOf = function(object) {
			return object.__proto__;
		};
	}
	else
	{
		Object.getPrototypeOf = function(object) {
			return object.constructor.prototype;
		};
	}
}
(function(){
	cr.logexport = function (msg)
	{
		if (window.console && window.console.log)
			window.console.log(msg);
	};
	cr.seal = function(x)
	{
		return x;
	};
	cr.freeze = function(x)
	{
		return x;
	};
	cr.is_undefined = function (x)
	{
		return typeof x === "undefined";
	};
	cr.is_number = function (x)
	{
		return typeof x === "number";
	};
	cr.is_string = function (x)
	{
		return typeof x === "string";
	};
	cr.isPOT = function (x)
	{
		return x > 0 && ((x - 1) & x) === 0;
	};
	cr.nextHighestPowerOfTwo = function(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	cr.abs = function (x)
	{
		return (x < 0 ? -x : x);
	};
	cr.max = function (a, b)
	{
		return (a > b ? a : b);
	};
	cr.min = function (a, b)
	{
		return (a < b ? a : b);
	};
	cr.PI = Math.PI;
	cr.round = function (x)
	{
		return (x + 0.5) | 0;
	};
	cr.floor = function (x)
	{
		if (x >= 0)
			return x | 0;
		else
			return (x | 0) - 1;		// correctly round down when negative
	};
	cr.ceil = function (x)
	{
		var f = x | 0;
		return (f === x ? f : f + 1);
	};
	function Vector2(x, y)
	{
		this.x = x;
		this.y = y;
		cr.seal(this);
	};
	Vector2.prototype.offset = function (px, py)
	{
		this.x += px;
		this.y += py;
		return this;
	};
	Vector2.prototype.mul = function (px, py)
	{
		this.x *= px;
		this.y *= py;
		return this;
	};
	cr.vector2 = Vector2;
	cr.segments_intersect = function(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)
	{
		var max_ax, min_ax, max_ay, min_ay, max_bx, min_bx, max_by, min_by;
		if (a1x < a2x)
		{
			min_ax = a1x;
			max_ax = a2x;
		}
		else
		{
			min_ax = a2x;
			max_ax = a1x;
		}
		if (b1x < b2x)
		{
			min_bx = b1x;
			max_bx = b2x;
		}
		else
		{
			min_bx = b2x;
			max_bx = b1x;
		}
		if (max_ax < min_bx || min_ax > max_bx)
			return false;
		if (a1y < a2y)
		{
			min_ay = a1y;
			max_ay = a2y;
		}
		else
		{
			min_ay = a2y;
			max_ay = a1y;
		}
		if (b1y < b2y)
		{
			min_by = b1y;
			max_by = b2y;
		}
		else
		{
			min_by = b2y;
			max_by = b1y;
		}
		if (max_ay < min_by || min_ay > max_by)
			return false;
		var dpx = b1x - a1x + b2x - a2x;
		var dpy = b1y - a1y + b2y - a2y;
		var qax = a2x - a1x;
		var qay = a2y - a1y;
		var qbx = b2x - b1x;
		var qby = b2y - b1y;
		var d = cr.abs(qay * qbx - qby * qax);
		var la = qbx * dpy - qby * dpx;
		if (cr.abs(la) > d)
			return false;
		var lb = qax * dpy - qay * dpx;
		return cr.abs(lb) <= d;
	};
	function Rect(left, top, right, bottom)
	{
		this.set(left, top, right, bottom);
		cr.seal(this);
	};
	Rect.prototype.set = function (left, top, right, bottom)
	{
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	Rect.prototype.copy = function (r)
	{
		this.left = r.left;
		this.top = r.top;
		this.right = r.right;
		this.bottom = r.bottom;
	};
	Rect.prototype.width = function ()
	{
		return this.right - this.left;
	};
	Rect.prototype.height = function ()
	{
		return this.bottom - this.top;
	};
	Rect.prototype.offset = function (px, py)
	{
		this.left += px;
		this.top += py;
		this.right += px;
		this.bottom += py;
		return this;
	};
	Rect.prototype.normalize = function ()
	{
		var temp = 0;
		if (this.left > this.right)
		{
			temp = this.left;
			this.left = this.right;
			this.right = temp;
		}
		if (this.top > this.bottom)
		{
			temp = this.top;
			this.top = this.bottom;
			this.bottom = temp;
		}
	};
	Rect.prototype.intersects_rect = function (rc)
	{
		return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
	};
	Rect.prototype.intersects_rect_off = function (rc, ox, oy)
	{
		return !(rc.right + ox < this.left || rc.bottom + oy < this.top || rc.left + ox > this.right || rc.top + oy > this.bottom);
	};
	Rect.prototype.contains_pt = function (x, y)
	{
		return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
	};
	Rect.prototype.equals = function (r)
	{
		return this.left === r.left && this.top === r.top && this.right === r.right && this.bottom === r.bottom;
	};
	cr.rect = Rect;
	function Quad()
	{
		this.tlx = 0;
		this.tly = 0;
		this.trx = 0;
		this.try_ = 0;	// is a keyword otherwise!
		this.brx = 0;
		this.bry = 0;
		this.blx = 0;
		this.bly = 0;
		cr.seal(this);
	};
	Quad.prototype.set_from_rect = function (rc)
	{
		this.tlx = rc.left;
		this.tly = rc.top;
		this.trx = rc.right;
		this.try_ = rc.top;
		this.brx = rc.right;
		this.bry = rc.bottom;
		this.blx = rc.left;
		this.bly = rc.bottom;
	};
	Quad.prototype.set_from_rotated_rect = function (rc, a)
	{
		if (a === 0)
		{
			this.set_from_rect(rc);
		}
		else
		{
			var sin_a = Math.sin(a);
			var cos_a = Math.cos(a);
			var left_sin_a = rc.left * sin_a;
			var top_sin_a = rc.top * sin_a;
			var right_sin_a = rc.right * sin_a;
			var bottom_sin_a = rc.bottom * sin_a;
			var left_cos_a = rc.left * cos_a;
			var top_cos_a = rc.top * cos_a;
			var right_cos_a = rc.right * cos_a;
			var bottom_cos_a = rc.bottom * cos_a;
			this.tlx = left_cos_a - top_sin_a;
			this.tly = top_cos_a + left_sin_a;
			this.trx = right_cos_a - top_sin_a;
			this.try_ = top_cos_a + right_sin_a;
			this.brx = right_cos_a - bottom_sin_a;
			this.bry = bottom_cos_a + right_sin_a;
			this.blx = left_cos_a - bottom_sin_a;
			this.bly = bottom_cos_a + left_sin_a;
		}
	};
	Quad.prototype.offset = function (px, py)
	{
		this.tlx += px;
		this.tly += py;
		this.trx += px;
		this.try_ += py;
		this.brx += px;
		this.bry += py;
		this.blx += px;
		this.bly += py;
		return this;
	};
	var minresult = 0;
	var maxresult = 0;
	function minmax4(a, b, c, d)
	{
		if (a < b)
		{
			if (c < d)
			{
				if (a < c)
					minresult = a;
				else
					minresult = c;
				if (b > d)
					maxresult = b;
				else
					maxresult = d;
			}
			else
			{
				if (a < d)
					minresult = a;
				else
					minresult = d;
				if (b > c)
					maxresult = b;
				else
					maxresult = c;
			}
		}
		else
		{
			if (c < d)
			{
				if (b < c)
					minresult = b;
				else
					minresult = c;
				if (a > d)
					maxresult = a;
				else
					maxresult = d;
			}
			else
			{
				if (b < d)
					minresult = b;
				else
					minresult = d;
				if (a > c)
					maxresult = a;
				else
					maxresult = c;
			}
		}
	};
	Quad.prototype.bounding_box = function (rc)
	{
		minmax4(this.tlx, this.trx, this.brx, this.blx);
		rc.left = minresult;
		rc.right = maxresult;
		minmax4(this.tly, this.try_, this.bry, this.bly);
		rc.top = minresult;
		rc.bottom = maxresult;
	};
	Quad.prototype.contains_pt = function (x, y)
	{
		var v0x = this.trx - this.tlx;
		var v0y = this.try_ - this.tly;
		var v1x = this.brx - this.tlx;
		var v1y = this.bry - this.tly;
		var v2x = x - this.tlx;
		var v2y = y - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		var dot11 = v1x * v1x + v1y * v1y
		var dot12 = v1x * v2x + v1y * v2y
		var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		if ((u >= 0.0) && (v > 0.0) && (u + v < 1))
			return true;
		v0x = this.blx - this.tlx;
		v0y = this.bly - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return (u >= 0.0) && (v > 0.0) && (u + v < 1);
	};
	Quad.prototype.at = function (i, xory)
	{
		if (xory)
		{
			switch (i)
			{
				case 0: return this.tlx;
				case 1: return this.trx;
				case 2: return this.brx;
				case 3: return this.blx;
				case 4: return this.tlx;
				default: return this.tlx;
			}
		}
		else
		{
			switch (i)
			{
				case 0: return this.tly;
				case 1: return this.try_;
				case 2: return this.bry;
				case 3: return this.bly;
				case 4: return this.tly;
				default: return this.tly;
			}
		}
	};
	Quad.prototype.midX = function ()
	{
		return (this.tlx + this.trx  + this.brx + this.blx) / 4;
	};
	Quad.prototype.midY = function ()
	{
		return (this.tly + this.try_ + this.bry + this.bly) / 4;
	};
	Quad.prototype.intersects_segment = function (x1, y1, x2, y2)
	{
		if (this.contains_pt(x1, y1) || this.contains_pt(x2, y2))
			return true;
		var a1x, a1y, a2x, a2y;
		var i;
		for (i = 0; i < 4; i++)
		{
			a1x = this.at(i, true);
			a1y = this.at(i, false);
			a2x = this.at(i + 1, true);
			a2y = this.at(i + 1, false);
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	Quad.prototype.intersects_quad = function (rhs)
	{
		var midx = rhs.midX();
		var midy = rhs.midY();
		if (this.contains_pt(midx, midy))
			return true;
		midx = this.midX();
		midy = this.midY();
		if (rhs.contains_pt(midx, midy))
			return true;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		var i, j;
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				a1x = this.at(i, true);
				a1y = this.at(i, false);
				a2x = this.at(i + 1, true);
				a2y = this.at(i + 1, false);
				b1x = rhs.at(j, true);
				b1y = rhs.at(j, false);
				b2x = rhs.at(j + 1, true);
				b2y = rhs.at(j + 1, false);
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	cr.quad = Quad;
	cr.RGB = function (red, green, blue)
	{
		return Math.max(Math.min(red, 255), 0)
			 | (Math.max(Math.min(green, 255), 0) << 8)
			 | (Math.max(Math.min(blue, 255), 0) << 16);
	};
	cr.GetRValue = function (rgb)
	{
		return rgb & 0xFF;
	};
	cr.GetGValue = function (rgb)
	{
		return (rgb & 0xFF00) >> 8;
	};
	cr.GetBValue = function (rgb)
	{
		return (rgb & 0xFF0000) >> 16;
	};
	cr.shallowCopy = function (a, b, allowOverwrite)
	{
		var attr;
		for (attr in b)
		{
			if (b.hasOwnProperty(attr))
			{
;
				a[attr] = b[attr];
			}
		}
		return a;
	};
	cr.arrayRemove = function (arr, index)
	{
		var i, len;
		index = cr.floor(index);
		if (index < 0 || index >= arr.length)
			return;							// index out of bounds
		if (index === 0)					// removing first item
			arr.shift();
		else if (index === arr.length - 1)	// removing last item
			arr.pop();
		else
		{
			for (i = index, len = arr.length - 1; i < len; i++)
				arr[i] = arr[i + 1];
			arr.length = len;
		}
	};
	cr.shallowAssignArray = function (dest, src)
	{
		dest.length = src.length;
		var i, len;
		for (i = 0, len = src.length; i < len; i++)
			dest[i] = src[i];
	};
	cr.appendArray = function (a, b)
	{
		a.push.apply(a, b);
	};
	cr.arrayFindRemove = function (arr, item)
	{
		var index = arr.indexOf(item);
		if (index !== -1)
			cr.arrayRemove(arr, index);
	};
	cr.clamp = function(x, a, b)
	{
		if (x < a)
			return a;
		else if (x > b)
			return b;
		else
			return x;
	};
	cr.to_radians = function(x)
	{
		return x / (180.0 / cr.PI);
	};
	cr.to_degrees = function(x)
	{
		return x * (180.0 / cr.PI);
	};
	cr.clamp_angle_degrees = function (a)
	{
		a %= 360;       // now in (-360, 360) range
		if (a < 0)
			a += 360;   // now in [0, 360) range
		return a;
	};
	cr.clamp_angle = function (a)
	{
		a %= 2 * cr.PI;       // now in (-2pi, 2pi) range
		if (a < 0)
			a += 2 * cr.PI;   // now in [0, 2pi) range
		return a;
	};
	cr.to_clamped_degrees = function (x)
	{
		return cr.clamp_angle_degrees(cr.to_degrees(x));
	};
	cr.to_clamped_radians = function (x)
	{
		return cr.clamp_angle(cr.to_radians(x));
	};
	cr.angleTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.atan2(dy, dx);
	};
	cr.angleDiff = function (a1, a2)
	{
		if (a1 === a2)
			return 0;
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		var n = s1 * s2 + c1 * c2;
		if (n >= 1)
			return 0;
		if (n <= -1)
			return cr.PI;
		return Math.acos(n);
	};
	cr.angleRotate = function (start, end, step)
	{
		var ss = Math.sin(start);
		var cs = Math.cos(start);
		var se = Math.sin(end);
		var ce = Math.cos(end);
		if (Math.acos(ss * se + cs * ce) > step)
		{
			if (cs * se - ss * ce > 0)
				return cr.clamp_angle(start + step);
			else
				return cr.clamp_angle(start - step);
		}
		else
			return cr.clamp_angle(end);
	};
	cr.angleClockwise = function (a1, a2)
	{
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		return c1 * s2 - s1 * c2 <= 0;
	};
	cr.rotatePtAround = function (px, py, a, ox, oy, getx)
	{
		if (a === 0)
			return getx ? px : py;
		var sin_a = Math.sin(a);
		var cos_a = Math.cos(a);
		px -= ox;
		py -= oy;
		var left_sin_a = px * sin_a;
		var top_sin_a = py * sin_a;
		var left_cos_a = px * cos_a;
		var top_cos_a = py * cos_a;
		px = left_cos_a - top_sin_a;
		py = top_cos_a + left_sin_a;
		px += ox;
		py += oy;
		return getx ? px : py;
	}
	cr.distanceTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.sqrt(dx*dx + dy*dy);
	};
	cr.xor = function (x, y)
	{
		return !x !== !y;
	};
	cr.lerp = function (a, b, x)
	{
		return a + (b - a) * x;
	};
	cr.hasAnyOwnProperty = function (o)
	{
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
				return true;
		}
		return false;
	};
	cr.wipe = function (obj)
	{
		var p;
		for (p in obj)
		{
			if (obj.hasOwnProperty(p))
				delete obj[p];
		}
	};
	var startup_time = +(new Date());
	cr.performance_now = function()
	{
		if (typeof window["performance"] !== "undefined")
		{
			var winperf = window["performance"];
			if (typeof winperf.now !== "undefined")
				return winperf.now();
			else if (typeof winperf["webkitNow"] !== "undefined")
				return winperf["webkitNow"]();
			else if (typeof winperf["mozNow"] !== "undefined")
				return winperf["mozNow"]();
			else if (typeof winperf["msNow"] !== "undefined")
				return winperf["msNow"]();
		}
		return Date.now() - startup_time;
	};
	var supports_set = (typeof Set !== "undefined" && typeof Set.prototype["forEach"] !== "undefined");
	function ObjectSet_()
	{
		this.s = null;
		this.items = null;
		this.item_count = 0;
		if (supports_set)
		{
			this.s = new Set();
		}
		else
		{
			this.items = {};
		}
		this.values_cache = [];
		this.cache_valid = true;
		cr.seal(this);
	};
	ObjectSet_.prototype.contains = function (x)
	{
		if (supports_set)
			return this.s["has"](x);
		else
			return this.items.hasOwnProperty(x.toString());
	};
	ObjectSet_.prototype.add = function (x)
	{
		if (supports_set)
		{
			if (!this.s["has"](x))
			{
				this.s["add"](x);
				this.cache_valid = false;
			}
		}
		else
		{
			var str = x.toString();
			if (!this.items.hasOwnProperty(str))
			{
				this.items[str] = x;
				this.item_count++;
				this.cache_valid = false;
			}
		}
		return this;
	};
	ObjectSet_.prototype.remove = function (x)
	{
		if (supports_set)
		{
			if (this.s["has"](x))
			{
				this.s["delete"](x);
				this.cache_valid = false;
			}
		}
		else
		{
			var str = x.toString();
			if (this.items.hasOwnProperty(str))
			{
				delete this.items[str];
				this.item_count--;
				this.cache_valid = false;
			}
		}
		return this;
	};
	ObjectSet_.prototype.clear = function ()
	{
		if (supports_set)
		{
			this.s["clear"]();
		}
		else
		{
			this.items = {};
			this.item_count = 0;
		}
		this.values_cache.length = 0;
		this.cache_valid = true;
		return this;
	};
	ObjectSet_.prototype.isEmpty = function ()
	{
		if (supports_set)
			return this.s["size"] === 0;
		else
			return this.item_count === 0;
	};
	ObjectSet_.prototype.count = function ()
	{
		if (supports_set)
			return this.s["size"];
		else
			return this.item_count;
	};
	var current_arr = null;
	var current_index = 0;
	function set_append_to_arr(x)
	{
		current_arr[current_index++] = x;
	};
	ObjectSet_.prototype.update_cache = function ()
	{
		if (this.cache_valid)
			return;
		if (supports_set)
		{
			this.values_cache.length = this.s["size"];
			current_arr = this.values_cache;
			current_index = 0;
			this.s["forEach"](set_append_to_arr);
;
			current_arr = null;
			current_index = 0;
		}
		else
		{
			this.values_cache.length = this.item_count;
			var p, n = 0;
			for (p in this.items)
			{
				if (this.items.hasOwnProperty(p))
					this.values_cache[n++] = this.items[p];
			}
;
		}
		this.cache_valid = true;
	};
	ObjectSet_.prototype.values = function ()
	{
		this.update_cache();
		return this.values_cache.slice(0);
	};
	ObjectSet_.prototype.valuesRef = function ()
	{
		this.update_cache();
		return this.values_cache;
	};
	cr.ObjectSet = ObjectSet_;
	function KahanAdder_()
	{
		this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
		cr.seal(this);
	};
	KahanAdder_.prototype.add = function (v)
	{
		this.y = v - this.c;
	    this.t = this.sum + this.y;
	    this.c = (this.t - this.sum) - this.y;
	    this.sum = this.t;
	};
    KahanAdder_.prototype.reset = function ()
    {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
	cr.KahanAdder = KahanAdder_;
	cr.regexp_escape = function(text)
	{
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	function CollisionPoly_(pts_array_)
	{
		this.pts_cache = [];
		this.bboxLeft = 0;
		this.bboxTop = 0;
		this.bboxRight = 0;
		this.bboxBottom = 0;
		this.convexpolys = null;		// for physics behavior to cache separated polys
		this.set_pts(pts_array_);
		cr.seal(this);
	};
	CollisionPoly_.prototype.set_pts = function(pts_array_)
	{
		this.pts_array = pts_array_;
		this.pts_count = pts_array_.length / 2;			// x, y, x, y... in array
		this.pts_cache.length = pts_array_.length;
		this.cache_width = -1;
		this.cache_height = -1;
		this.cache_angle = 0;
	};
	CollisionPoly_.prototype.is_empty = function()
	{
		return !this.pts_array.length;
	};
	CollisionPoly_.prototype.update_bbox = function ()
	{
		var myptscache = this.pts_cache;
		var bboxLeft_ = myptscache[0];
		var bboxRight_ = bboxLeft_;
		var bboxTop_ = myptscache[1];
		var bboxBottom_ = bboxTop_;
		var x, y, i = 1, i2, len = this.pts_count;
		for ( ; i < len; ++i)
		{
			i2 = i*2;
			x = myptscache[i2];
			y = myptscache[i2+1];
			if (x < bboxLeft_)
				bboxLeft_ = x;
			if (x > bboxRight_)
				bboxRight_ = x;
			if (y < bboxTop_)
				bboxTop_ = y;
			if (y > bboxBottom_)
				bboxBottom_ = y;
		}
		this.bboxLeft = bboxLeft_;
		this.bboxRight = bboxRight_;
		this.bboxTop = bboxTop_;
		this.bboxBottom = bboxBottom_;
	};
	CollisionPoly_.prototype.set_from_rect = function(rc, offx, offy)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = rc.left - offx;
		myptscache[1] = rc.top - offy;
		myptscache[2] = rc.right - offx;
		myptscache[3] = rc.top - offy;
		myptscache[4] = rc.right - offx;
		myptscache[5] = rc.bottom - offy;
		myptscache[6] = rc.left - offx;
		myptscache[7] = rc.bottom - offy;
		this.cache_width = rc.right - rc.left;
		this.cache_height = rc.bottom - rc.top;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_quad = function(q, offx, offy, w, h)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = q.tlx - offx;
		myptscache[1] = q.tly - offy;
		myptscache[2] = q.trx - offx;
		myptscache[3] = q.try_ - offy;
		myptscache[4] = q.brx - offx;
		myptscache[5] = q.bry - offy;
		myptscache[6] = q.blx - offx;
		myptscache[7] = q.bly - offy;
		this.cache_width = w;
		this.cache_height = h;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_poly = function (r)
	{
		this.pts_count = r.pts_count;
		cr.shallowAssignArray(this.pts_cache, r.pts_cache);
		this.bboxLeft = r.bboxLeft;
		this.bboxTop - r.bboxTop;
		this.bboxRight = r.bboxRight;
		this.bboxBottom = r.bboxBottom;
	};
	CollisionPoly_.prototype.cache_poly = function(w, h, a)
	{
		if (this.cache_width === w && this.cache_height === h && this.cache_angle === a)
			return;		// cache up-to-date
		this.cache_width = w;
		this.cache_height = h;
		this.cache_angle = a;
		var i, i2, i21, len, x, y;
		var sina = 0;
		var cosa = 1;
		var myptsarray = this.pts_array;
		var myptscache = this.pts_cache;
		if (a !== 0)
		{
			sina = Math.sin(a);
			cosa = Math.cos(a);
		}
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			i2 = i*2;
			i21 = i2+1;
			x = myptsarray[i2] * w;
			y = myptsarray[i21] * h;
			myptscache[i2] = (x * cosa) - (y * sina);
			myptscache[i21] = (y * cosa) + (x * sina);
		}
		this.update_bbox();
	};
	CollisionPoly_.prototype.contains_pt = function (a2x, a2y)
	{
		var myptscache = this.pts_cache;
		if (a2x === myptscache[0] && a2y === myptscache[1])
			return true;
		var i, i2, imod, len = this.pts_count;
		var a1x = this.bboxLeft - 110;
		var a1y = this.bboxTop - 101;
		var a3x = this.bboxRight + 131
		var a3y = this.bboxBottom + 120;
		var b1x, b1y, b2x, b2y;
		var count1 = 0, count2 = 0;
		for (i = 0; i < len; i++)
		{
			i2 = i*2;
			imod = ((i+1)%len)*2;
			b1x = myptscache[i2];
			b1y = myptscache[i2+1];
			b2x = myptscache[imod];
			b2y = myptscache[imod+1];
			if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
				count1++;
			if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y))
				count2++;
		}
		return (count1 % 2 === 1) || (count2 % 2 === 1);
	};
	CollisionPoly_.prototype.intersects_poly = function (rhs, offx, offy)
	{
		var rhspts = rhs.pts_cache;
		var mypts = this.pts_cache;
		if (this.contains_pt(rhspts[0] + offx, rhspts[1] + offy))
			return true;
		if (rhs.contains_pt(mypts[0] - offx, mypts[1] - offy))
			return true;
		var i, i2, imod, leni, j, j2, jmod, lenj;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2];
			a1y = mypts[i2+1];
			a2x = mypts[imod];
			a2y = mypts[imod+1];
			for (j = 0, lenj = rhs.pts_count; j < lenj; j++)
			{
				j2 = j*2;
				jmod = ((j+1)%lenj)*2;
				b1x = rhspts[j2] + offx;
				b1y = rhspts[j2+1] + offy;
				b2x = rhspts[jmod] + offx;
				b2y = rhspts[jmod+1] + offy;
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	CollisionPoly_.prototype.intersects_segment = function (offx, offy, x1, y1, x2, y2)
	{
		var mypts = this.pts_cache;
		if (this.contains_pt(x1 - offx, y1 - offy))
			return true;
		var i, leni, i2, imod;
		var a1x, a1y, a2x, a2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2] + offx;
			a1y = mypts[i2+1] + offy;
			a2x = mypts[imod] + offx;
			a2y = mypts[imod+1] + offy;
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	CollisionPoly_.prototype.mirror = function (px)
	{
		var i, leni, i2;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			this.pts_cache[i2] = px * 2 - this.pts_cache[i2];
		}
	};
	CollisionPoly_.prototype.flip = function (py)
	{
		var i, leni, i21;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i21 = i*2+1;
			this.pts_cache[i21] = py * 2 - this.pts_cache[i21];
		}
	};
	CollisionPoly_.prototype.diag = function ()
	{
		var i, leni, i2, i21, temp;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			i21 = i2+1;
			temp = this.pts_cache[i2];
			this.pts_cache[i2] = this.pts_cache[i21];
			this.pts_cache[i21] = temp;
		}
	};
	cr.CollisionPoly = CollisionPoly_;
	function SparseGrid_(cellwidth_, cellheight_)
	{
		this.cellwidth = cellwidth_;
		this.cellheight = cellheight_;
		this.cells = {};
	};
	SparseGrid_.prototype.totalCellCount = 0;
	SparseGrid_.prototype.getCell = function (x_, y_, create_if_missing)
	{
		var ret;
		var col = this.cells[x_];
		if (!col)
		{
			if (create_if_missing)
			{
				ret = allocGridCell(this, x_, y_);
				this.cells[x_] = {};
				this.cells[x_][y_] = ret;
				return ret;
			}
			else
				return null;
		}
		ret = col[y_];
		if (ret)
			return ret;
		else if (create_if_missing)
		{
			ret = allocGridCell(this, x_, y_);
			this.cells[x_][y_] = ret;
			return ret;
		}
		else
			return null;
	};
	SparseGrid_.prototype.XToCell = function (x_)
	{
		return cr.floor(x_ / this.cellwidth);
	};
	SparseGrid_.prototype.YToCell = function (y_)
	{
		return cr.floor(y_ / this.cellheight);
	};
	SparseGrid_.prototype.update = function (inst, oldrange, newrange)
	{
		var x, lenx, y, leny, cell;
		if (oldrange)
		{
			for (x = oldrange.left, lenx = oldrange.right; x <= lenx; ++x)
			{
				for (y = oldrange.top, leny = oldrange.bottom; y <= leny; ++y)
				{
					if (newrange && newrange.contains_pt(x, y))
						continue;	// is still in this cell
					cell = this.getCell(x, y, false);	// don't create if missing
					if (!cell)
						continue;	// cell does not exist yet
					cell.remove(inst);
					if (cell.isEmpty())
					{
						freeGridCell(cell);
						this.cells[x][y] = null;
					}
				}
			}
		}
		if (newrange)
		{
			for (x = newrange.left, lenx = newrange.right; x <= lenx; ++x)
			{
				for (y = newrange.top, leny = newrange.bottom; y <= leny; ++y)
				{
					if (oldrange && oldrange.contains_pt(x, y))
						continue;	// is still in this cell
					this.getCell(x, y, true).insert(inst);
				}
			}
		}
	};
	SparseGrid_.prototype.queryRange = function (rc, result)
	{
		var x, lenx, ystart, y, leny, cell;
		x = this.XToCell(rc.left);
		ystart = this.YToCell(rc.top);
		lenx = this.XToCell(rc.right);
		leny = this.YToCell(rc.bottom);
		for ( ; x <= lenx; ++x)
		{
			for (y = ystart; y <= leny; ++y)
			{
				cell = this.getCell(x, y, false);
				if (!cell)
					continue;
				cell.dump(result);
			}
		}
	};
	cr.SparseGrid = SparseGrid_;
	var gridcellcache = [];
	function allocGridCell(grid_, x_, y_)
	{
		var ret;
		SparseGrid_.prototype.totalCellCount++;
		if (gridcellcache.length)
		{
			ret = gridcellcache.pop();
			ret.grid = grid_;
			ret.x = x_;
			ret.y = y_;
			return ret;
		}
		else
			return new cr.GridCell(grid_, x_, y_);
	};
	function freeGridCell(c)
	{
		SparseGrid_.prototype.totalCellCount--;
		c.objects.clear();
		if (gridcellcache.length < 1000)
			gridcellcache.push(c);
	};
	function GridCell_(grid_, x_, y_)
	{
		this.grid = grid_;
		this.x = x_;
		this.y = y_;
		this.objects = new cr.ObjectSet();
	};
	GridCell_.prototype.isEmpty = function ()
	{
		return this.objects.isEmpty();
	};
	GridCell_.prototype.insert = function (inst)
	{
		this.objects.add(inst);
	};
	GridCell_.prototype.remove = function (inst)
	{
		this.objects.remove(inst);
	};
	GridCell_.prototype.dump = function (result)
	{
		cr.appendArray(result, this.objects.valuesRef());
	};
	cr.GridCell = GridCell_;
	var fxNames = [ "lighter",
					"xor",
					"copy",
					"destination-over",
					"source-in",
					"destination-in",
					"source-out",
					"destination-out",
					"source-atop",
					"destination-atop"];
	cr.effectToCompositeOp = function(effect)
	{
		if (effect <= 0 || effect >= 11)
			return "source-over";
		return fxNames[effect - 1];	// not including "none" so offset by 1
	};
	cr.setGLBlend = function(this_, effect, gl)
	{
		if (!gl)
			return;
		this_.srcBlend = gl.ONE;
		this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
		switch (effect) {
		case 1:		// lighter (additive)
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ONE;
			break;
		case 2:		// xor
			break;	// todo
		case 3:		// copy
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ZERO;
			break;
		case 4:		// destination-over
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ONE;
			break;
		case 5:		// source-in
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 6:		// destination-in
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		case 7:		// source-out
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 8:		// destination-out
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 9:		// source-atop
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 10:	// destination-atop
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		}
	};
	cr.round6dp = function (x)
	{
		return cr.round(x * 1000000) / 1000000;
	};
	/*
	var localeCompare_options = {
		"usage": "search",
		"sensitivity": "accent"
	};
	var has_localeCompare = !!"a".localeCompare;
	var localeCompare_works1 = (has_localeCompare && "a".localeCompare("A", undefined, localeCompare_options) === 0);
	var localeCompare_works2 = (has_localeCompare && "a".localeCompare("á", undefined, localeCompare_options) !== 0);
	var supports_localeCompare = (has_localeCompare && localeCompare_works1 && localeCompare_works2);
	*/
	cr.equals_nocase = function (a, b)
	{
		if (typeof a !== "string" || typeof b !== "string")
			return false;
		if (a.length !== b.length)
			return false;
		if (a === b)
			return true;
		/*
		if (supports_localeCompare)
		{
			return (a.localeCompare(b, undefined, localeCompare_options) === 0);
		}
		else
		{
		*/
			return a.toLowerCase() === b.toLowerCase();
	};
}());
var MatrixArray=typeof Float32Array!=="undefined"?Float32Array:Array,glMatrixArrayType=MatrixArray,vec3={},mat3={},mat4={},quat4={};vec3.create=function(a){var b=new MatrixArray(3);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2]);return b};vec3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];return b};vec3.add=function(a,b,c){if(!c||a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];return c};
vec3.subtract=function(a,b,c){if(!c||a===c)return a[0]-=b[0],a[1]-=b[1],a[2]-=b[2],a;c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];return c};vec3.negate=function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];return b};vec3.scale=function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;return c};
vec3.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=Math.sqrt(c*c+d*d+e*e);if(g){if(g===1)return b[0]=c,b[1]=d,b[2]=e,b}else return b[0]=0,b[1]=0,b[2]=0,b;g=1/g;b[0]=c*g;b[1]=d*g;b[2]=e*g;return b};vec3.cross=function(a,b,c){c||(c=a);var d=a[0],e=a[1],a=a[2],g=b[0],f=b[1],b=b[2];c[0]=e*b-a*f;c[1]=a*g-d*b;c[2]=d*f-e*g;return c};vec3.length=function(a){var b=a[0],c=a[1],a=a[2];return Math.sqrt(b*b+c*c+a*a)};vec3.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]};
vec3.direction=function(a,b,c){c||(c=a);var d=a[0]-b[0],e=a[1]-b[1],a=a[2]-b[2],b=Math.sqrt(d*d+e*e+a*a);if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/b;c[0]=d*b;c[1]=e*b;c[2]=a*b;return c};vec3.lerp=function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);return d};vec3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+"]"};
mat3.create=function(a){var b=new MatrixArray(9);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8]);return b};mat3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return b};mat3.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=1;a[5]=0;a[6]=0;a[7]=0;a[8]=1;return a};
mat3.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];a[1]=a[3];a[2]=a[6];a[3]=c;a[5]=a[7];a[6]=d;a[7]=e;return a}b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b};mat3.toMat4=function(a,b){b||(b=mat4.create());b[15]=1;b[14]=0;b[13]=0;b[12]=0;b[11]=0;b[10]=a[8];b[9]=a[7];b[8]=a[6];b[7]=0;b[6]=a[5];b[5]=a[4];b[4]=a[3];b[3]=0;b[2]=a[2];b[1]=a[1];b[0]=a[0];return b};
mat3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+"]"};mat4.create=function(a){var b=new MatrixArray(16);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b[9]=a[9],b[10]=a[10],b[11]=a[11],b[12]=a[12],b[13]=a[13],b[14]=a[14],b[15]=a[15]);return b};
mat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b};mat4.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a};
mat4.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],g=a[6],f=a[7],h=a[11];a[1]=a[4];a[2]=a[8];a[3]=a[12];a[4]=c;a[6]=a[9];a[7]=a[13];a[8]=d;a[9]=g;a[11]=a[14];a[12]=e;a[13]=f;a[14]=h;return a}b[0]=a[0];b[1]=a[4];b[2]=a[8];b[3]=a[12];b[4]=a[1];b[5]=a[5];b[6]=a[9];b[7]=a[13];b[8]=a[2];b[9]=a[6];b[10]=a[10];b[11]=a[14];b[12]=a[3];b[13]=a[7];b[14]=a[11];b[15]=a[15];return b};
mat4.determinant=function(a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],n=a[11],o=a[12],m=a[13],p=a[14],a=a[15];return o*k*h*e-j*m*h*e-o*f*l*e+g*m*l*e+j*f*p*e-g*k*p*e-o*k*d*i+j*m*d*i+o*c*l*i-b*m*l*i-j*c*p*i+b*k*p*i+o*f*d*n-g*m*d*n-o*c*h*n+b*m*h*n+g*c*p*n-b*f*p*n-j*f*d*a+g*k*d*a+j*c*h*a-b*k*h*a-g*c*l*a+b*f*l*a};
mat4.inverse=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=a[9],n=a[10],o=a[11],m=a[12],p=a[13],r=a[14],s=a[15],A=c*h-d*f,B=c*i-e*f,t=c*j-g*f,u=d*i-e*h,v=d*j-g*h,w=e*j-g*i,x=k*p-l*m,y=k*r-n*m,z=k*s-o*m,C=l*r-n*p,D=l*s-o*p,E=n*s-o*r,q=1/(A*E-B*D+t*C+u*z-v*y+w*x);b[0]=(h*E-i*D+j*C)*q;b[1]=(-d*E+e*D-g*C)*q;b[2]=(p*w-r*v+s*u)*q;b[3]=(-l*w+n*v-o*u)*q;b[4]=(-f*E+i*z-j*y)*q;b[5]=(c*E-e*z+g*y)*q;b[6]=(-m*w+r*t-s*B)*q;b[7]=(k*w-n*t+o*B)*q;b[8]=(f*D-h*z+j*x)*q;
b[9]=(-c*D+d*z-g*x)*q;b[10]=(m*v-p*t+s*A)*q;b[11]=(-k*v+l*t-o*A)*q;b[12]=(-f*C+h*y-i*x)*q;b[13]=(c*C-d*y+e*x)*q;b[14]=(-m*u+p*B-r*A)*q;b[15]=(k*u-l*B+n*A)*q;return b};mat4.toRotationMat=function(a,b){b||(b=mat4.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
mat4.toMat3=function(a,b){b||(b=mat3.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b};mat4.toInverseMat3=function(a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],i=a[8],j=a[9],k=a[10],l=k*f-h*j,n=-k*g+h*i,o=j*g-f*i,m=c*l+d*n+e*o;if(!m)return null;m=1/m;b||(b=mat3.create());b[0]=l*m;b[1]=(-k*d+e*j)*m;b[2]=(h*d-e*f)*m;b[3]=n*m;b[4]=(k*c-e*i)*m;b[5]=(-h*c+e*g)*m;b[6]=o*m;b[7]=(-j*c+d*i)*m;b[8]=(f*c-d*g)*m;return b};
mat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],n=a[9],o=a[10],m=a[11],p=a[12],r=a[13],s=a[14],a=a[15],A=b[0],B=b[1],t=b[2],u=b[3],v=b[4],w=b[5],x=b[6],y=b[7],z=b[8],C=b[9],D=b[10],E=b[11],q=b[12],F=b[13],G=b[14],b=b[15];c[0]=A*d+B*h+t*l+u*p;c[1]=A*e+B*i+t*n+u*r;c[2]=A*g+B*j+t*o+u*s;c[3]=A*f+B*k+t*m+u*a;c[4]=v*d+w*h+x*l+y*p;c[5]=v*e+w*i+x*n+y*r;c[6]=v*g+w*j+x*o+y*s;c[7]=v*f+w*k+x*m+y*a;c[8]=z*d+C*h+D*l+E*p;c[9]=z*e+C*i+D*n+E*r;c[10]=z*g+C*
j+D*o+E*s;c[11]=z*f+C*k+D*m+E*a;c[12]=q*d+F*h+G*l+b*p;c[13]=q*e+F*i+G*n+b*r;c[14]=q*g+F*j+G*o+b*s;c[15]=q*f+F*k+G*m+b*a;return c};mat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c};
mat4.multiplyVec4=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c};
mat4.translate=function(a,b,c){var d=b[0],e=b[1],b=b[2],g,f,h,i,j,k,l,n,o,m,p,r;if(!c||a===c)return a[12]=a[0]*d+a[4]*e+a[8]*b+a[12],a[13]=a[1]*d+a[5]*e+a[9]*b+a[13],a[14]=a[2]*d+a[6]*e+a[10]*b+a[14],a[15]=a[3]*d+a[7]*e+a[11]*b+a[15],a;g=a[0];f=a[1];h=a[2];i=a[3];j=a[4];k=a[5];l=a[6];n=a[7];o=a[8];m=a[9];p=a[10];r=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=i;c[4]=j;c[5]=k;c[6]=l;c[7]=n;c[8]=o;c[9]=m;c[10]=p;c[11]=r;c[12]=g*d+j*e+o*b+a[12];c[13]=f*d+k*e+m*b+a[13];c[14]=h*d+l*e+p*b+a[14];c[15]=i*d+n*e+r*b+a[15];
return c};mat4.scale=function(a,b,c){var d=b[0],e=b[1],b=b[2];if(!c||a===c)return a[0]*=d,a[1]*=d,a[2]*=d,a[3]*=d,a[4]*=e,a[5]*=e,a[6]*=e,a[7]*=e,a[8]*=b,a[9]*=b,a[10]*=b,a[11]*=b,a;c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c};
mat4.rotate=function(a,b,c,d){var e=c[0],g=c[1],c=c[2],f=Math.sqrt(e*e+g*g+c*c),h,i,j,k,l,n,o,m,p,r,s,A,B,t,u,v,w,x,y,z;if(!f)return null;f!==1&&(f=1/f,e*=f,g*=f,c*=f);h=Math.sin(b);i=Math.cos(b);j=1-i;b=a[0];f=a[1];k=a[2];l=a[3];n=a[4];o=a[5];m=a[6];p=a[7];r=a[8];s=a[9];A=a[10];B=a[11];t=e*e*j+i;u=g*e*j+c*h;v=c*e*j-g*h;w=e*g*j-c*h;x=g*g*j+i;y=c*g*j+e*h;z=e*c*j+g*h;e=g*c*j-e*h;g=c*c*j+i;d?a!==d&&(d[12]=a[12],d[13]=a[13],d[14]=a[14],d[15]=a[15]):d=a;d[0]=b*t+n*u+r*v;d[1]=f*t+o*u+s*v;d[2]=k*t+m*u+A*
v;d[3]=l*t+p*u+B*v;d[4]=b*w+n*x+r*y;d[5]=f*w+o*x+s*y;d[6]=k*w+m*x+A*y;d[7]=l*w+p*x+B*y;d[8]=b*z+n*e+r*g;d[9]=f*z+o*e+s*g;d[10]=k*z+m*e+A*g;d[11]=l*z+p*e+B*g;return d};mat4.rotateX=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[4],g=a[5],f=a[6],h=a[7],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[4]=e*b+i*d;c[5]=g*b+j*d;c[6]=f*b+k*d;c[7]=h*b+l*d;c[8]=e*-d+i*b;c[9]=g*-d+j*b;c[10]=f*-d+k*b;c[11]=h*-d+l*b;return c};
mat4.rotateY=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[4]=a[4],c[5]=a[5],c[6]=a[6],c[7]=a[7],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*-d;c[1]=g*b+j*-d;c[2]=f*b+k*-d;c[3]=h*b+l*-d;c[8]=e*d+i*b;c[9]=g*d+j*b;c[10]=f*d+k*b;c[11]=h*d+l*b;return c};
mat4.rotateZ=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[4],j=a[5],k=a[6],l=a[7];c?a!==c&&(c[8]=a[8],c[9]=a[9],c[10]=a[10],c[11]=a[11],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*d;c[1]=g*b+j*d;c[2]=f*b+k*d;c[3]=h*b+l*d;c[4]=e*-d+i*b;c[5]=g*-d+j*b;c[6]=f*-d+k*b;c[7]=h*-d+l*b;return c};
mat4.frustum=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f};mat4.perspective=function(a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b*=a;return mat4.frustum(-b,b,-a,a,c,d,e)};
mat4.ortho=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/i;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/j;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/i;f[14]=-(g+e)/j;f[15]=1;return f};
mat4.lookAt=function(a,b,c,d){d||(d=mat4.create());var e,g,f,h,i,j,k,l,n=a[0],o=a[1],a=a[2];g=c[0];f=c[1];e=c[2];c=b[1];j=b[2];if(n===b[0]&&o===c&&a===j)return mat4.identity(d);c=n-b[0];j=o-b[1];k=a-b[2];l=1/Math.sqrt(c*c+j*j+k*k);c*=l;j*=l;k*=l;b=f*k-e*j;e=e*c-g*k;g=g*j-f*c;(l=Math.sqrt(b*b+e*e+g*g))?(l=1/l,b*=l,e*=l,g*=l):g=e=b=0;f=j*g-k*e;h=k*b-c*g;i=c*e-j*b;(l=Math.sqrt(f*f+h*h+i*i))?(l=1/l,f*=l,h*=l,i*=l):i=h=f=0;d[0]=b;d[1]=f;d[2]=c;d[3]=0;d[4]=e;d[5]=h;d[6]=j;d[7]=0;d[8]=g;d[9]=i;d[10]=k;d[11]=
0;d[12]=-(b*n+e*o+g*a);d[13]=-(f*n+h*o+i*a);d[14]=-(c*n+j*o+k*a);d[15]=1;return d};mat4.fromRotationTranslation=function(a,b,c){c||(c=mat4.create());var d=a[0],e=a[1],g=a[2],f=a[3],h=d+d,i=e+e,j=g+g,a=d*h,k=d*i;d*=j;var l=e*i;e*=j;g*=j;h*=f;i*=f;f*=j;c[0]=1-(l+g);c[1]=k+f;c[2]=d-i;c[3]=0;c[4]=k-f;c[5]=1-(a+g);c[6]=e+h;c[7]=0;c[8]=d+i;c[9]=e-h;c[10]=1-(a+l);c[11]=0;c[12]=b[0];c[13]=b[1];c[14]=b[2];c[15]=1;return c};
mat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"};quat4.create=function(a){var b=new MatrixArray(4);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]);return b};quat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b};
quat4.calculateW=function(a,b){var c=a[0],d=a[1],e=a[2];if(!b||a===b)return a[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e)),a;b[0]=c;b[1]=d;b[2]=e;b[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e));return b};quat4.inverse=function(a,b){if(!b||a===b)return a[0]*=-1,a[1]*=-1,a[2]*=-1,a;b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=a[3];return b};quat4.length=function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)};
quat4.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=Math.sqrt(c*c+d*d+e*e+g*g);if(f===0)return b[0]=0,b[1]=0,b[2]=0,b[3]=0,b;f=1/f;b[0]=c*f;b[1]=d*f;b[2]=e*f;b[3]=g*f;return b};quat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=b[0],h=b[1],i=b[2],b=b[3];c[0]=d*b+a*f+e*i-g*h;c[1]=e*b+a*h+g*f-d*i;c[2]=g*b+a*i+d*h-e*f;c[3]=a*b-d*f-e*h-g*i;return c};
quat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=a[0],f=a[1],h=a[2],a=a[3],i=a*d+f*g-h*e,j=a*e+h*d-b*g,k=a*g+b*e-f*d,d=-b*d-f*e-h*g;c[0]=i*a+d*-b+j*-h-k*-f;c[1]=j*a+d*-f+k*-b-i*-h;c[2]=k*a+d*-h+i*-f-j*-b;return c};quat4.toMat3=function(a,b){b||(b=mat3.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=k-g;b[4]=1-(j+e);b[5]=d+f;b[6]=c+h;b[7]=d-f;b[8]=1-(j+l);return b};
quat4.toMat4=function(a,b){b||(b=mat4.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=0;b[4]=k-g;b[5]=1-(j+e);b[6]=d+f;b[7]=0;b[8]=c+h;b[9]=d-f;b[10]=1-(j+l);b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
quat4.slerp=function(a,b,c,d){d||(d=a);var e=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],g,f;if(Math.abs(e)>=1)return d!==a&&(d[0]=a[0],d[1]=a[1],d[2]=a[2],d[3]=a[3]),d;g=Math.acos(e);f=Math.sqrt(1-e*e);if(Math.abs(f)<0.001)return d[0]=a[0]*0.5+b[0]*0.5,d[1]=a[1]*0.5+b[1]*0.5,d[2]=a[2]*0.5+b[2]*0.5,d[3]=a[3]*0.5+b[3]*0.5,d;e=Math.sin((1-c)*g)/f;c=Math.sin(c*g)/f;d[0]=a[0]*e+b[0]*c;d[1]=a[1]*e+b[1]*c;d[2]=a[2]*e+b[2]*c;d[3]=a[3]*e+b[3]*c;return d};
quat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"};
(function()
{
	var MAX_VERTICES = 8000;						// equates to 2500 objects being drawn
	var MAX_INDICES = (MAX_VERTICES / 2) * 3;		// 6 indices for every 4 vertices
	var MAX_POINTS = 8000;
	var MULTI_BUFFERS = 4;							// cycle 4 buffers to try and avoid blocking
	var BATCH_NULL = 0;
	var BATCH_QUAD = 1;
	var BATCH_SETTEXTURE = 2;
	var BATCH_SETOPACITY = 3;
	var BATCH_SETBLEND = 4;
	var BATCH_UPDATEMODELVIEW = 5;
	var BATCH_RENDERTOTEXTURE = 6;
	var BATCH_CLEAR = 7;
	var BATCH_POINTS = 8;
	var BATCH_SETPROGRAM = 9;
	var BATCH_SETPROGRAMPARAMETERS = 10;
	var BATCH_SETTEXTURE1 = 11;
	function GLWrap_(gl, isMobile)
	{
		this.isIE = /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		this.width = 0;		// not yet known, wait for call to setSize()
		this.height = 0;
		this.cam = vec3.create([0, 0, 100]);			// camera position
		this.look = vec3.create([0, 0, 0]);				// lookat position
		this.up = vec3.create([0, 1, 0]);				// up vector
		this.worldScale = vec3.create([1, 1, 1]);		// world scaling factor
		this.matP = mat4.create();						// perspective matrix
		this.matMV = mat4.create();						// model view matrix
		this.lastMV = mat4.create();
		this.currentMV = mat4.create();
		this.gl = gl;
		this.initState();
	};
	GLWrap_.prototype.initState = function ()
	{
		var gl = this.gl;
		var i, len;
		this.lastOpacity = 1;
		this.lastTexture0 = null;			// last bound to TEXTURE0
		this.lastTexture1 = null;			// last bound to TEXTURE1
		this.currentOpacity = 1;
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.disable(gl.CULL_FACE);
		gl.disable(gl.DEPTH_TEST);
		this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		this.lastSrcBlend = gl.ONE;
		this.lastDestBlend = gl.ONE_MINUS_SRC_ALPHA;
		this.pointBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
		this.vertexBuffers = new Array(MULTI_BUFFERS);
		this.texcoordBuffers = new Array(MULTI_BUFFERS);
		for (i = 0; i < MULTI_BUFFERS; i++)
		{
			this.vertexBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[i]);
			this.texcoordBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[i]);
		}
		this.curBuffer = 0;
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		this.vertexData = new Float32Array(MAX_VERTICES * 2);
		this.texcoordData = new Float32Array(MAX_VERTICES * 2);
		this.pointData = new Float32Array(MAX_POINTS * 4);
		var indexData = new Uint16Array(MAX_INDICES);
		i = 0, len = MAX_INDICES;
		var fv = 0;
		while (i < len)
		{
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 1;	// top right
			indexData[i++] = fv + 2;	// bottom right (first tri)
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 2;	// bottom right
			indexData[i++] = fv + 3;	// bottom left
			fv += 4;
		}
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);
		this.vertexPtr = 0;
		this.pointPtr = 0;
		var fsSource, vsSource;
		this.shaderPrograms = [];
		fsSource = [
			"varying mediump vec2 vTex;",
			"uniform lowp float opacity;",
			"uniform lowp sampler2D samplerFront;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, vTex);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		vsSource = [
			"attribute highp vec2 aPos;",
			"attribute mediump vec2 aTex;",
			"varying mediump vec2 vTex;",
			"uniform highp mat4 matP;",
			"uniform highp mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	vTex = aTex;",
			"}"
		].join("\n");
		var shaderProg = this.createShaderProgram({src: fsSource}, vsSource, "<default>");
;
		this.shaderPrograms.push(shaderProg);		// Default shader is always shader 0
		fsSource = [
			"uniform mediump sampler2D samplerFront;",
			"varying lowp float opacity;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, gl_PointCoord);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		var pointVsSource = [
			"attribute vec4 aPos;",
			"varying float opacity;",
			"uniform mat4 matP;",
			"uniform mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	gl_PointSize = aPos.z;",
			"	opacity = aPos.w;",
			"}"
		].join("\n");
		shaderProg = this.createShaderProgram({src: fsSource}, pointVsSource, "<point>");
;
		this.shaderPrograms.push(shaderProg);		// Point shader is always shader 1
		for (var shader_name in cr.shaders)
		{
			if (cr.shaders.hasOwnProperty(shader_name))
				this.shaderPrograms.push(this.createShaderProgram(cr.shaders[shader_name], vsSource, shader_name));
		}
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.batch = [];
		this.batchPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.lastProgram = -1;				// start -1 so first switchProgram can do work
		this.currentProgram = -1;			// current program during batch execution
		this.currentShader = null;
		this.fbo = gl.createFramebuffer();
		this.renderToTex = null;
		this.tmpVec3 = vec3.create([0, 0, 0]);
;
;
		var pointsizes = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
		this.minPointSize = pointsizes[0];
		this.maxPointSize = pointsizes[1];
;
		this.switchProgram(0);
		cr.seal(this);
	};
	function GLShaderProgram(gl, shaderProgram, name)
	{
		this.gl = gl;
		this.shaderProgram = shaderProgram;
		this.name = name;
		this.locAPos = gl.getAttribLocation(shaderProgram, "aPos");
		this.locATex = gl.getAttribLocation(shaderProgram, "aTex");
		this.locMatP = gl.getUniformLocation(shaderProgram, "matP");
		this.locMatMV = gl.getUniformLocation(shaderProgram, "matMV");
		this.locOpacity = gl.getUniformLocation(shaderProgram, "opacity");
		this.locSamplerFront = gl.getUniformLocation(shaderProgram, "samplerFront");
		this.locSamplerBack = gl.getUniformLocation(shaderProgram, "samplerBack");
		this.locDestStart = gl.getUniformLocation(shaderProgram, "destStart");
		this.locDestEnd = gl.getUniformLocation(shaderProgram, "destEnd");
		this.locSeconds = gl.getUniformLocation(shaderProgram, "seconds");
		this.locPixelWidth = gl.getUniformLocation(shaderProgram, "pixelWidth");
		this.locPixelHeight = gl.getUniformLocation(shaderProgram, "pixelHeight");
		this.locLayerScale = gl.getUniformLocation(shaderProgram, "layerScale");
		if (this.locOpacity)
			gl.uniform1f(this.locOpacity, 1);
		if (this.locSamplerFront)
			gl.uniform1i(this.locSamplerFront, 0);
		if (this.locSamplerBack)
			gl.uniform1i(this.locSamplerBack, 1);
		if (this.locDestStart)
			gl.uniform2f(this.locDestStart, 0.0, 0.0);
		if (this.locDestEnd)
			gl.uniform2f(this.locDestEnd, 1.0, 1.0);
		this.hasCurrentMatMV = false;		// matMV needs updating
	};
	GLWrap_.prototype.createShaderProgram = function(shaderEntry, vsSource, name)
	{
		var gl = this.gl;
		var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(fragmentShader, shaderEntry.src);
		gl.compileShader(fragmentShader);
		if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			return null;
		}
		var vertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(vertexShader, vsSource);
		gl.compileShader(vertexShader);
		if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			return null;
		}
		var shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, fragmentShader);
		gl.attachShader(shaderProgram, vertexShader);
		gl.linkProgram(shaderProgram);
		if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			gl.deleteProgram(shaderProgram);
			return null;
		}
		gl.useProgram(shaderProgram);
;
		gl.deleteShader(fragmentShader);
		gl.deleteShader(vertexShader);
		var ret = new GLShaderProgram(gl, shaderProgram, name);
		ret.extendBoxHorizontal = shaderEntry.extendBoxHorizontal || 0;
		ret.extendBoxVertical = shaderEntry.extendBoxVertical || 0;
		ret.crossSampling = !!shaderEntry.crossSampling;
		ret.animated = !!shaderEntry.animated;
		ret.parameters = shaderEntry.parameters || [];
		var i, len;
		for (i = 0, len = ret.parameters.length; i < len; i++)
		{
			ret.parameters[i][1] = gl.getUniformLocation(shaderProgram, ret.parameters[i][0]);
			gl.uniform1f(ret.parameters[i][1], 0);
		}
		cr.seal(ret);
		return ret;
	};
	GLWrap_.prototype.getShaderIndex = function(name_)
	{
		var i, len;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			if (this.shaderPrograms[i].name === name_)
				return i;
		}
		return -1;
	};
	GLWrap_.prototype.project = function (x, y, out)
	{
		var mv = this.matMV;
		var proj = this.matP;
		var fTempo = [0, 0, 0, 0, 0, 0, 0, 0];
		fTempo[0] = mv[0]*x+mv[4]*y+mv[12];
		fTempo[1] = mv[1]*x+mv[5]*y+mv[13];
		fTempo[2] = mv[2]*x+mv[6]*y+mv[14];
		fTempo[3] = mv[3]*x+mv[7]*y+mv[15];
		fTempo[4] = proj[0]*fTempo[0]+proj[4]*fTempo[1]+proj[8]*fTempo[2]+proj[12]*fTempo[3];
		fTempo[5] = proj[1]*fTempo[0]+proj[5]*fTempo[1]+proj[9]*fTempo[2]+proj[13]*fTempo[3];
		fTempo[6] = proj[2]*fTempo[0]+proj[6]*fTempo[1]+proj[10]*fTempo[2]+proj[14]*fTempo[3];
		fTempo[7] = -fTempo[2];
		if(fTempo[7]===0.0)	//The w value
			return;
		fTempo[7]=1.0/fTempo[7];
		fTempo[4]*=fTempo[7];
		fTempo[5]*=fTempo[7];
		fTempo[6]*=fTempo[7];
		out[0]=(fTempo[4]*0.5+0.5)*this.width;
		out[1]=(fTempo[5]*0.5+0.5)*this.height;
	};
	GLWrap_.prototype.setSize = function(w, h, force)
	{
		if (this.width === w && this.height === h && !force)
			return;
		this.endBatch();
		this.width = w;
		this.height = h;
		this.gl.viewport(0, 0, w, h);
		mat4.perspective(45, w / h, 1, 1000, this.matP);
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		var tl = [0, 0];
		var br = [0, 0];
		this.project(0, 0, tl);
		this.project(1, 1, br);
		this.worldScale[0] = 1 / (br[0] - tl[0]);
		this.worldScale[1] = -1 / (br[1] - tl[1]);
		var i, len, s;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			s = this.shaderPrograms[i];
			s.hasCurrentMatMV = false;
			if (s.locMatP)
			{
				this.gl.useProgram(s.shaderProgram);
				this.gl.uniformMatrix4fv(s.locMatP, false, this.matP);
			}
		}
		this.gl.useProgram(this.shaderPrograms[this.lastProgram].shaderProgram);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.gl.activeTexture(this.gl.TEXTURE1);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.lastTexture0 = null;
		this.lastTexture1 = null;
	};
	GLWrap_.prototype.resetModelView = function ()
	{
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		mat4.scale(this.matMV, this.worldScale);
	};
	GLWrap_.prototype.translate = function (x, y)
	{
		if (x === 0 && y === 0)
			return;
		this.tmpVec3[0] = x;// * this.worldScale[0];
		this.tmpVec3[1] = y;// * this.worldScale[1];
		this.tmpVec3[2] = 0;
		mat4.translate(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.scale = function (x, y)
	{
		if (x === 1 && y === 1)
			return;
		this.tmpVec3[0] = x;
		this.tmpVec3[1] = y;
		this.tmpVec3[2] = 1;
		mat4.scale(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.rotateZ = function (a)
	{
		if (a === 0)
			return;
		mat4.rotateZ(this.matMV, a);
	};
	GLWrap_.prototype.updateModelView = function()
	{
		var anydiff = false;
		for (var i = 0; i < 16; i++)
		{
			if (this.lastMV[i] !== this.matMV[i])
			{
				anydiff = true;
				break;
			}
		}
		if (!anydiff)
			return;
		var b = this.pushBatch();
		b.type = BATCH_UPDATEMODELVIEW;
		if (b.mat4param)
			mat4.set(this.matMV, b.mat4param);
		else
			b.mat4param = mat4.create(this.matMV);
		mat4.set(this.matMV, this.lastMV);
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	/*
	var debugBatch = false;
	jQuery(document).mousedown(
		function(info) {
			if (info.which === 2)
				debugBatch = true;
		}
	);
	*/
	function GLBatchJob(type_, glwrap_)
	{
		this.type = type_;
		this.glwrap = glwrap_;
		this.gl = glwrap_.gl;
		this.opacityParam = 0;		// for setOpacity()
		this.startIndex = 0;		// for quad()
		this.indexCount = 0;		// "
		this.texParam = null;		// for setTexture()
		this.mat4param = null;		// for updateModelView()
		this.shaderParams = [];		// for user parameters
		cr.seal(this);
	};
	GLBatchJob.prototype.doSetTexture = function ()
	{
		this.gl.bindTexture(this.gl.TEXTURE_2D, this.texParam);
	};
	GLBatchJob.prototype.doSetTexture1 = function ()
	{
		var gl = this.gl;
		gl.activeTexture(gl.TEXTURE1);
		gl.bindTexture(gl.TEXTURE_2D, this.texParam);
		gl.activeTexture(gl.TEXTURE0);
	};
	GLBatchJob.prototype.doSetOpacity = function ()
	{
		var o = this.opacityParam;
		var glwrap = this.glwrap;
		glwrap.currentOpacity = o;
		var curProg = glwrap.currentShader;
		if (curProg.locOpacity)
			this.gl.uniform1f(curProg.locOpacity, o);
	};
	GLBatchJob.prototype.doQuad = function ()
	{
		this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, this.startIndex * 2);
	};
	GLBatchJob.prototype.doSetBlend = function ()
	{
		this.gl.blendFunc(this.startIndex, this.indexCount);
	};
	GLBatchJob.prototype.doUpdateModelView = function ()
	{
		var i, len, s, shaderPrograms = this.glwrap.shaderPrograms, currentProgram = this.glwrap.currentProgram;
		for (i = 0, len = shaderPrograms.length; i < len; i++)
		{
			s = shaderPrograms[i];
			if (i === currentProgram && s.locMatMV)
			{
				this.gl.uniformMatrix4fv(s.locMatMV, false, this.mat4param);
				s.hasCurrentMatMV = true;
			}
			else
				s.hasCurrentMatMV = false;
		}
		mat4.set(this.mat4param, this.glwrap.currentMV);
	};
	GLBatchJob.prototype.doRenderToTexture = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		if (this.texParam)
		{
			if (glwrap.lastTexture1 === this.texParam)
			{
				gl.activeTexture(gl.TEXTURE1);
				gl.bindTexture(gl.TEXTURE_2D, null);
				glwrap.lastTexture1 = null;
				gl.activeTexture(gl.TEXTURE0);
			}
			gl.bindFramebuffer(gl.FRAMEBUFFER, glwrap.fbo);
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texParam, 0);
		}
		else
		{
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		}
	};
	GLBatchJob.prototype.doClear = function ()
	{
		var gl = this.gl;
		if (this.startIndex === 0)		// clear whole surface
		{
			gl.clearColor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clear(gl.COLOR_BUFFER_BIT);
		}
		else							// clear rectangle
		{
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clearColor(0, 0, 0, 0);
			gl.clear(this.gl.COLOR_BUFFER_BIT);
			gl.disable(gl.SCISSOR_TEST);
		}
	};
	GLBatchJob.prototype.doPoints = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[1];
		gl.useProgram(s.shaderProgram);
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		gl.enableVertexAttribArray(s.locAPos);
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.pointBuffer);
		gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.POINTS, this.startIndex / 4, this.indexCount);
		s = glwrap.currentShader;
		gl.useProgram(s.shaderProgram);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	};
	GLBatchJob.prototype.doSetProgram = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[this.startIndex];		// recycled param to save memory
		glwrap.currentProgram = this.startIndex;			// current batch program
		glwrap.currentShader = s;
		gl.useProgram(s.shaderProgram);						// switch to
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		if (s.locOpacity)
			gl.uniform1f(s.locOpacity, glwrap.currentOpacity);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	}
	GLBatchJob.prototype.doSetProgramParameters = function ()
	{
		var i, len, s = this.glwrap.currentShader;
		var gl = this.gl;
		if (s.locSamplerBack && this.glwrap.lastTexture1 !== this.texParam)
		{
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, this.texParam);
			this.glwrap.lastTexture1 = this.texParam;
			gl.activeTexture(gl.TEXTURE0);
		}
		if (s.locPixelWidth)
			gl.uniform1f(s.locPixelWidth, this.mat4param[0]);
		if (s.locPixelHeight)
			gl.uniform1f(s.locPixelHeight, this.mat4param[1]);
		if (s.locDestStart)
			gl.uniform2f(s.locDestStart, this.mat4param[2], this.mat4param[3]);
		if (s.locDestEnd)
			gl.uniform2f(s.locDestEnd, this.mat4param[4], this.mat4param[5]);
		if (s.locLayerScale)
			gl.uniform1f(s.locLayerScale, this.mat4param[6]);
		if (s.locSeconds)
			gl.uniform1f(s.locSeconds, cr.performance_now() / 1000.0);
		if (s.parameters.length)
		{
			for (i = 0, len = s.parameters.length; i < len; i++)
			{
				gl.uniform1f(s.parameters[i][1], this.shaderParams[i]);
			}
		}
	};
	GLWrap_.prototype.pushBatch = function ()
	{
		if (this.batchPtr === this.batch.length)
			this.batch.push(new GLBatchJob(BATCH_NULL, this));
		return this.batch[this.batchPtr++];
	};
	GLWrap_.prototype.endBatch = function ()
	{
		if (this.batchPtr === 0)
			return;
		if (this.gl.isContextLost())
			return;
		var gl = this.gl;
		if (this.pointPtr > 0)
		{
			gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.pointData.subarray(0, this.pointPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name === "<point>")
				gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		}
		if (this.vertexPtr > 0)
		{
			var s = this.currentShader;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.vertexData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.texcoordData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locATex >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
		var i, len, b;
		for (i = 0, len = this.batchPtr; i < len; i++)
		{
			b = this.batch[i];
			switch (b.type) {
			case BATCH_QUAD:
				b.doQuad();
				break;
			case BATCH_SETTEXTURE:
				b.doSetTexture();
				break;
			case BATCH_SETOPACITY:
				b.doSetOpacity();
				break;
			case BATCH_SETBLEND:
				b.doSetBlend();
				break;
			case BATCH_UPDATEMODELVIEW:
				b.doUpdateModelView();
				break;
			case BATCH_RENDERTOTEXTURE:
				b.doRenderToTexture();
				break;
			case BATCH_CLEAR:
				b.doClear();
				break;
			case BATCH_POINTS:
				b.doPoints();
				break;
			case BATCH_SETPROGRAM:
				b.doSetProgram();
				break;
			case BATCH_SETPROGRAMPARAMETERS:
				b.doSetProgramParameters();
				break;
			case BATCH_SETTEXTURE1:
				b.doSetTexture1();
				break;
			}
		}
		this.batchPtr = 0;
		this.vertexPtr = 0;
		this.pointPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.curBuffer++;
		if (this.curBuffer >= MULTI_BUFFERS)
			this.curBuffer = 0;
	};
	GLWrap_.prototype.setOpacity = function (op)
	{
		if (op === this.lastOpacity)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETOPACITY;
		b.opacityParam = op;
		this.lastOpacity = op;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setTexture = function (tex)
	{
		if (tex === this.lastTexture0)
			return;
;
		var b = this.pushBatch();
		b.type = BATCH_SETTEXTURE;
		b.texParam = tex;
		this.lastTexture0 = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setBlend = function (s, d)
	{
		if (s === this.lastSrcBlend && d === this.lastDestBlend)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETBLEND;
		b.startIndex = s;		// recycle params to save memory
		b.indexCount = d;
		this.lastSrcBlend = s;
		this.lastDestBlend = d;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setAlphaBlend = function ()
	{
		this.setBlend(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	var LAST_VERTEX = MAX_VERTICES * 2 - 8;
	GLWrap_.prototype.quad = function(tlx, tly, trx, try_, brx, bry, blx, bly)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = 0;
		vd[v] = tly;
		td[v++] = 0;
		vd[v] = trx;
		td[v++] = 1;
		vd[v] = try_;
		td[v++] = 0;
		vd[v] = brx;
		td[v++] = 1;
		vd[v] = bry;
		td[v++] = 1;
		vd[v] = blx;
		td[v++] = 0;
		vd[v] = bly;
		td[v++] = 1;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTex = function(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		var rc_left = rcTex.left;
		var rc_top = rcTex.top;
		var rc_right = rcTex.right;
		var rc_bottom = rcTex.bottom;
		vd[v] = tlx;
		td[v++] = rc_left;
		vd[v] = tly;
		td[v++] = rc_top;
		vd[v] = trx;
		td[v++] = rc_right;
		vd[v] = try_;
		td[v++] = rc_top;
		vd[v] = brx;
		td[v++] = rc_right;
		vd[v] = bry;
		td[v++] = rc_bottom;
		vd[v] = blx;
		td[v++] = rc_left;
		vd[v] = bly;
		td[v++] = rc_bottom;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTexUV = function(tlx, tly, trx, try_, brx, bry, blx, bly, tlu, tlv, tru, trv, bru, brv, blu, blv)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = tlu;
		vd[v] = tly;
		td[v++] = tlv;
		vd[v] = trx;
		td[v++] = tru;
		vd[v] = try_;
		td[v++] = trv;
		vd[v] = brx;
		td[v++] = bru;
		vd[v] = bry;
		td[v++] = brv;
		vd[v] = blx;
		td[v++] = blu;
		vd[v] = bly;
		td[v++] = blv;
		this.vertexPtr = v;
	};
	var LAST_POINT = MAX_POINTS - 4;
	GLWrap_.prototype.point = function(x_, y_, size_, opacity_)
	{
		if (this.pointPtr >= LAST_POINT)
			this.endBatch();
		var p = this.pointPtr;			// point cursor
		var pd = this.pointData;		// point data array
		if (this.hasPointBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount++;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_POINTS;
			b.startIndex = p;
			b.indexCount = 1;
			this.hasPointBatchTop = true;
			this.hasQuadBatchTop = false;
		}
		pd[p++] = x_;
		pd[p++] = y_;
		pd[p++] = size_;
		pd[p++] = opacity_;
		this.pointPtr = p;
	};
	GLWrap_.prototype.switchProgram = function (progIndex)
	{
		if (this.lastProgram === progIndex)
			return;			// no change
		var shaderProg = this.shaderPrograms[progIndex];
		if (!shaderProg)
		{
			if (this.lastProgram === 0)
				return;								// already on default shader
			progIndex = 0;
			shaderProg = this.shaderPrograms[0];
		}
		var b = this.pushBatch();
		b.type = BATCH_SETPROGRAM;
		b.startIndex = progIndex;
		this.lastProgram = progIndex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.programUsesDest = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd);
	};
	GLWrap_.prototype.programUsesCrossSampling = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd || s.crossSampling);
	};
	GLWrap_.prototype.programExtendsBox = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return s.extendBoxHorizontal !== 0 || s.extendBoxVertical !== 0;
	};
	GLWrap_.prototype.getProgramBoxExtendHorizontal = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxHorizontal;
	};
	GLWrap_.prototype.getProgramBoxExtendVertical = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxVertical;
	};
	GLWrap_.prototype.getProgramParameterType = function (progIndex, paramIndex)
	{
		return this.shaderPrograms[progIndex].parameters[paramIndex][2];
	};
	GLWrap_.prototype.programIsAnimated = function (progIndex)
	{
		return this.shaderPrograms[progIndex].animated;
	};
	GLWrap_.prototype.setProgramParameters = function (backTex, pixelWidth, pixelHeight, destStartX, destStartY, destEndX, destEndY, layerScale, params)
	{
		var i, len, s = this.shaderPrograms[this.lastProgram];
		if (s.locPixelWidth || s.locPixelHeight || s.locSeconds || s.locSamplerBack ||
			s.locDestStart || s.locDestEnd || s.locLayerScale || params.length)
		{
			var b = this.pushBatch();
			b.type = BATCH_SETPROGRAMPARAMETERS;
			if (b.mat4param)
				mat4.set(this.matMV, b.mat4param);
			else
				b.mat4param = mat4.create();
			b.mat4param[0] = pixelWidth;
			b.mat4param[1] = pixelHeight;
			b.mat4param[2] = destStartX;
			b.mat4param[3] = destStartY;
			b.mat4param[4] = destEndX;
			b.mat4param[5] = destEndY;
			b.mat4param[6] = layerScale;
			if (s.locSamplerBack)
			{
;
				b.texParam = backTex;
			}
			else
				b.texParam = null;
			if (params.length)
			{
				b.shaderParams.length = params.length;
				for (i = 0, len = params.length; i < len; i++)
					b.shaderParams[i] = params[i];
			}
			this.hasQuadBatchTop = false;
			this.hasPointBatchTop = false;
		}
	};
	GLWrap_.prototype.clear = function (r, g, b_, a)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 0;					// clear all mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = r;
		b.mat4param[1] = g;
		b.mat4param[2] = b_;
		b.mat4param[3] = a;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.clearRect = function (x, y, w, h)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 1;					// clear rect mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = x;
		b.mat4param[1] = y;
		b.mat4param[2] = w;
		b.mat4param[3] = h;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.present = function ()
	{
		this.endBatch();
		this.gl.flush();
		/*
		if (debugBatch)
		{
;
			debugBatch = false;
		}
		*/
	};
	function nextHighestPowerOfTwo(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	var all_textures = [];
	var textures_by_src = {};
	var BF_RGBA8 = 0;
	var BF_RGB8 = 1;
	var BF_RGBA4 = 2;
	var BF_RGB5_A1 = 3;
	var BF_RGB565 = 4;
	GLWrap_.prototype.loadTexture = function (img, tiling, linearsampling, pixelformat, tiletype)
	{
		tiling = !!tiling;
		linearsampling = !!linearsampling;
		var tex_key = img.src + "," + tiling + "," + linearsampling + (tiling ? ("," + tiletype) : "");
		var webGL_texture = null;
		if (typeof img.src !== "undefined" && textures_by_src.hasOwnProperty(tex_key))
		{
			webGL_texture = textures_by_src[tex_key];
			webGL_texture.c2refcount++;
			return webGL_texture;
		}
		this.endBatch();
;
		var gl = this.gl;
		var isPOT = (cr.isPOT(img.width) && cr.isPOT(img.height));
		webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		var internalformat = gl.RGBA;
		var format = gl.RGBA;
		var type = gl.UNSIGNED_BYTE;
		if (pixelformat && !this.isIE)
		{
			switch (pixelformat) {
			case BF_RGB8:
				internalformat = gl.RGB;
				format = gl.RGB;
				break;
			case BF_RGBA4:
				type = gl.UNSIGNED_SHORT_4_4_4_4;
				break;
			case BF_RGB5_A1:
				type = gl.UNSIGNED_SHORT_5_5_5_1;
				break;
			case BF_RGB565:
				internalformat = gl.RGB;
				format = gl.RGB;
				type = gl.UNSIGNED_SHORT_5_6_5;
				break;
			}
		}
		if (!isPOT && tiling)
		{
			var canvas = document.createElement("canvas");
			canvas.width = cr.nextHighestPowerOfTwo(img.width);
			canvas.height = cr.nextHighestPowerOfTwo(img.height);
			var ctx = canvas.getContext("2d");
			ctx.drawImage(img,
						  0, 0, img.width, img.height,
						  0, 0, canvas.width, canvas.height);
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, canvas);
		}
		else
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, img);
		if (tiling)
		{
			if (tiletype === "repeat-x")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			}
			else if (tiletype === "repeat-y")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
			else
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		if (linearsampling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			if (isPOT)
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
				gl.generateMipmap(gl.TEXTURE_2D);
			}
			else
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
		webGL_texture.c2width = img.width;
		webGL_texture.c2height = img.height;
		webGL_texture.c2refcount = 1;
		webGL_texture.c2texkey = tex_key;
		all_textures.push(webGL_texture);
		textures_by_src[tex_key] = webGL_texture;
		return webGL_texture;
	};
	GLWrap_.prototype.createEmptyTexture = function (w, h, linearsampling, _16bit, tiling)
	{
		this.endBatch();
		var gl = this.gl;
		if (this.isIE)
			_16bit = false;
		var webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, null);
		if (tiling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
		webGL_texture.c2width = w;
		webGL_texture.c2height = h;
		all_textures.push(webGL_texture);
		return webGL_texture;
	};
	GLWrap_.prototype.videoToTexture = function (video_, texture_, _16bit)
	{
		this.endBatch();
		var gl = this.gl;
		if (this.isIE)
			_16bit = false;
		gl.bindTexture(gl.TEXTURE_2D, texture_);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, video_);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
	};
	GLWrap_.prototype.deleteTexture = function (tex)
	{
		if (!tex)
			return;
		if (typeof tex.c2refcount !== "undefined" && tex.c2refcount > 1)
		{
			tex.c2refcount--;
			return;
		}
		this.endBatch();
		if (tex === this.lastTexture0)
		{
			this.gl.bindTexture(this.gl.TEXTURE_2D, null);
			this.lastTexture0 = null;
		}
		if (tex === this.lastTexture1)
		{
			this.gl.activeTexture(this.gl.TEXTURE1);
			this.gl.bindTexture(this.gl.TEXTURE_2D, null);
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.lastTexture1 = null;
		}
		cr.arrayFindRemove(all_textures, tex);
		if (typeof tex.c2texkey !== "undefined")
			delete textures_by_src[tex.c2texkey];
		this.gl.deleteTexture(tex);
	};
	GLWrap_.prototype.estimateVRAM = function ()
	{
		var total = this.width * this.height * 4 * 2;
		var i, len, t;
		for (i = 0, len = all_textures.length; i < len; i++)
		{
			t = all_textures[i];
			total += (t.c2width * t.c2height * 4);
		}
		return total;
	};
	GLWrap_.prototype.textureCount = function ()
	{
		return all_textures.length;
	};
	GLWrap_.prototype.setRenderingToTexture = function (tex)
	{
		if (tex === this.renderToTex)
			return;
;
		var b = this.pushBatch();
		b.type = BATCH_RENDERTOTEXTURE;
		b.texParam = tex;
		this.renderToTex = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	cr.GLWrap = GLWrap_;
}());
;
(function()
{
	function Runtime(canvas)
	{
		if (!canvas || (!canvas.getContext && !canvas["dc"]))
			return;
		if (canvas["c2runtime"])
			return;
		else
			canvas["c2runtime"] = this;
		var self = this;
		this.isPhoneGap = (typeof window["device"] !== "undefined" && (typeof window["device"]["cordova"] !== "undefined" || typeof window["device"]["phonegap"] !== "undefined"));
		this.isDirectCanvas = !!canvas["dc"];
		this.isAppMobi = (typeof window["AppMobi"] !== "undefined" || this.isDirectCanvas);
		this.isCocoonJs = !!window["c2cocoonjs"];
		if (this.isCocoonJs)
		{
			CocoonJS["App"]["onSuspended"].addEventListener(function() {
				self["setSuspended"](true);
			});
			CocoonJS["App"]["onActivated"].addEventListener(function () {
				self["setSuspended"](false);
			});
		}
		this.isDomFree = this.isDirectCanvas || this.isCocoonJs;
		this.isTizen = /tizen/i.test(navigator.userAgent);
		this.isAndroid = /android/i.test(navigator.userAgent) && !this.isTizen;		// tizen says "like Android"
		this.isIE = /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		this.isiPhone = /iphone/i.test(navigator.userAgent) || /ipod/i.test(navigator.userAgent);	// treat ipod as an iphone
		this.isiPad = /ipad/i.test(navigator.userAgent);
		this.isiOS = this.isiPhone || this.isiPad;
		this.isChrome = /chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent);
		this.isCrosswalk = /crosswalk/i.test(navigator.userAgent) || /xwalk/i.test(navigator.userAgent) || !!(typeof window["c2isCrosswalk"] !== "undefined" && window["c2isCrosswalk"]);
		this.isAmazonWebApp = /amazonwebappplatform/i.test(navigator.userAgent);
		this.isFirefox = /firefox/i.test(navigator.userAgent);
		this.isSafari = !this.isChrome && /safari/i.test(navigator.userAgent);		// Chrome includes Safari in UA
		this.isWindows = /windows/i.test(navigator.userAgent);
		this.isNodeWebkit = (typeof window["c2nodewebkit"] !== "undefined");
		this.isArcade = (typeof window["is_scirra_arcade"] !== "undefined");
		this.isWindows8App = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.isWindowsPhone8 = !!(typeof window["c2isWindowsPhone8"] !== "undefined" && window["c2isWindowsPhone8"]);
		this.isBlackberry10 = !!(typeof window["c2isBlackberry10"] !== "undefined" && window["c2isBlackberry10"]);
		this.isAndroidStockBrowser = (this.isAndroid && !this.isChrome && !this.isFirefox && !this.isAmazonWebApp && !this.isDomFree);
		this.devicePixelRatio = 1;
		this.isMobile = (this.isPhoneGap || this.isAppMobi || this.isCocoonJs || this.isAndroid || this.isiOS || this.isWindowsPhone8 || this.isBlackberry10 || this.isTizen);
		if (!this.isMobile)
			this.isMobile = /(blackberry|bb10|playbook|palm|symbian|nokia|windows\s+ce|phone|mobile|tablet)/i.test(navigator.userAgent);
		if (typeof cr_is_preview !== "undefined" && !this.isNodeWebkit && (window.location.search === "?nw" || /nodewebkit/i.test(navigator.userAgent)))
		{
			this.isNodeWebkit = true;
		}
		if (this.isCrosswalk)
			this.isPhoneGap = false;
		this.isDebug = (typeof cr_is_preview !== "undefined" && window.location.search.indexOf("debug") > -1)
		this.canvas = canvas;
		this.canvasdiv = document.getElementById("c2canvasdiv");
		this.gl = null;
		this.glwrap = null;
		this.ctx = null;
		this.fullscreenOldMarginCss = "";
		this.firstInFullscreen = false;
		this.oldWidth = 0;		// for restoring non-fullscreen canvas after fullscreen
		this.oldHeight = 0;
		this.canvas.oncontextmenu = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		this.canvas.onselectstart = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		if (this.isDirectCanvas)
			window["c2runtime"] = this;
		if (this.isNodeWebkit)
		{
			window.ondragover = function(e) { e.preventDefault(); return false; };
			window.ondrop = function(e) { e.preventDefault(); return false; };
			require("nw.gui")["App"]["clearCache"]();
		}
		this.width = canvas.width;
		this.height = canvas.height;
		this.draw_width = this.width;
		this.draw_height = this.height;
		this.cssWidth = this.width;
		this.cssHeight = this.height;
		this.lastWindowWidth = window.innerWidth;
		this.lastWindowHeight = window.innerHeight;
		this.redraw = true;
		this.isSuspended = false;
		if (!Date.now) {
		  Date.now = function now() {
			return +new Date();
		  };
		}
		this.plugins = [];
		this.types = {};
		this.types_by_index = [];
		this.behaviors = [];
		this.layouts = {};
		this.layouts_by_index = [];
		this.eventsheets = {};
		this.eventsheets_by_index = [];
		this.wait_for_textures = [];        // for blocking until textures loaded
		this.triggers_to_postinit = [];
		this.all_global_vars = [];
		this.all_local_vars = [];
		this.solidBehavior = null;
		this.jumpthruBehavior = null;
		this.deathRow = new cr.ObjectSet();
		this.isInClearDeathRow = false;
		this.isInOnDestroy = 0;					// needs to support recursion so increments and decrements and is true if > 0
		this.isRunningEvents = false;
		this.createRow = [];
		this.isLoadingState = false;
		this.saveToSlot = "";
		this.loadFromSlot = "";
		this.loadFromJson = "";
		this.lastSaveJson = "";
		this.signalledContinuousPreview = false;
		this.suspendDrawing = false;		// for hiding display until continuous preview loads
		this.dt = 0;
        this.dt1 = 0;
		this.logictime = 0;			// used to calculate CPUUtilisation
		this.cpuutilisation = 0;
		this.zeroDtCount = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
		this.last_tick_time = 0;
		this.measuring_dt = true;
		this.fps = 0;
		this.last_fps_time = 0;
		this.tickcount = 0;
		this.execcount = 0;
		this.framecount = 0;        // for fps
		this.objectcount = 0;
		this.changelayout = null;
		this.destroycallbacks = [];
		this.event_stack = [];
		this.event_stack_index = -1;
		this.localvar_stack = [[]];
		this.localvar_stack_index = 0;
		this.trigger_depth = 0;		// recursion depth for triggers
		this.pushEventStack(null);
		this.loop_stack = [];
		this.loop_stack_index = -1;
		this.next_uid = 0;
		this.next_puid = 0;		// permanent unique ids
		this.layout_first_tick = true;
		this.family_count = 0;
		this.suspend_events = [];
		this.raf_id = 0;
		this.timeout_id = 0;
		this.isloading = true;
		this.loadingprogress = 0;
		this.isNodeFullscreen = false;
		this.stackLocalCount = 0;	// number of stack-based local vars for recursion
		this.halfFramerateMode = false;
		this.lastRafTime = 0;		// time of last requestAnimationFrame call
		this.ranLastRaf = false;	// false if last requestAnimationFrame was skipped for half framerate mode
		this.had_a_click = false;
		this.isInUserInputEvent = false;
        this.objects_to_tick = new cr.ObjectSet();
		this.objects_to_tick2 = new cr.ObjectSet();
		this.registered_collisions = [];
		this.temp_poly = new cr.CollisionPoly([]);
		this.temp_poly2 = new cr.CollisionPoly([]);
		this.allGroups = [];				// array of all event groups
        this.activeGroups = {};				// event group activation states
		this.cndsBySid = {};
		this.actsBySid = {};
		this.varsBySid = {};
		this.blocksBySid = {};
		this.running_layout = null;			// currently running layout
		this.layer_canvas = null;			// for layers "render-to-texture"
		this.layer_ctx = null;
		this.layer_tex = null;
		this.layout_tex = null;
		this.layout_canvas = null;
		this.layout_ctx = null;
		this.is_WebGL_context_lost = false;
		this.uses_background_blending = false;	// if any shader uses background blending, so entire layout renders to texture
		this.fx_tex = [null, null];
		this.fullscreen_scaling = 0;
		this.files_subfolder = "";			// path with project files
		this.objectsByUid = {};				// maps every in-use UID (as a string) to its instance
		this.loaderlogo = null;
		this.snapshotCanvas = null;
		this.snapshotData = "";
		this.load();
		this.isRetina = (!this.isDomFree && this.useHighDpi && !this.isAndroidStockBrowser);
		this.devicePixelRatio = (this.isRetina ? (window["devicePixelRatio"] || window["webkitDevicePixelRatio"] || window["mozDevicePixelRatio"] || window["msDevicePixelRatio"] || 1) : 1);
		this.ClearDeathRow();
		var attribs;
		var alpha_canvas = this.alphaBackground && !(this.isNodeWebkit || this.isWindows8App || this.isWindowsPhone8);
		if (this.fullscreen_mode > 0)
			this["setSize"](window.innerWidth, window.innerHeight, true);
		try {
			if (this.enableWebGL && (this.isCocoonJs || !this.isDomFree))
			{
				attribs = {
					"alpha": alpha_canvas,
					"depth": false,
					"antialias": false,
					"failIfMajorPerformanceCaveat": true
				};
				this.gl = (canvas.getContext("webgl", attribs) || canvas.getContext("experimental-webgl", attribs));
			}
		}
		catch (e) {
		}
		if (this.gl)
		{
;
			if (!this.isDomFree)
			{
				this.overlay_canvas = document.createElement("canvas");
				jQuery(this.overlay_canvas).appendTo(this.canvas.parentNode);
				this.overlay_canvas.oncontextmenu = function (e) { return false; };
				this.overlay_canvas.onselectstart = function (e) { return false; };
				this.overlay_canvas.width = this.cssWidth;
				this.overlay_canvas.height = this.cssHeight;
				jQuery(this.overlay_canvas).css({"width": this.cssWidth + "px",
												"height": this.cssHeight + "px"});
				this.positionOverlayCanvas();
				this.overlay_ctx = this.overlay_canvas.getContext("2d");
			}
			this.glwrap = new cr.GLWrap(this.gl, this.isMobile);
			this.glwrap.setSize(canvas.width, canvas.height);
			this.ctx = null;
			this.canvas.addEventListener("webglcontextlost", function (ev) {
				ev.preventDefault();
				self.onContextLost();
				console.log("[Construct 2] WebGL context lost");
				window["cr_setSuspended"](true);		// stop rendering
			}, false);
			this.canvas.addEventListener("webglcontextrestored", function (ev) {
				self.glwrap.initState();
				self.glwrap.setSize(self.glwrap.width, self.glwrap.height, true);
				self.layer_tex = null;
				self.layout_tex = null;
				self.fx_tex[0] = null;
				self.fx_tex[1] = null;
				self.onContextRestored();
				self.redraw = true;
				console.log("[Construct 2] WebGL context restored");
				window["cr_setSuspended"](false);		// resume rendering
			}, false);
			var i, len, j, lenj, k, lenk, t, s, l, y;
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
				{
					s = t.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
					this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
				}
			}
			for (i = 0, len = this.layouts_by_index.length; i < len; i++)
			{
				l = this.layouts_by_index[i];
				for (j = 0, lenj = l.effect_types.length; j < lenj; j++)
				{
					s = l.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
				}
				for (j = 0, lenj = l.layers.length; j < lenj; j++)
				{
					y = l.layers[j];
					for (k = 0, lenk = y.effect_types.length; k < lenk; k++)
					{
						s = y.effect_types[k];
						s.shaderindex = this.glwrap.getShaderIndex(s.id);
						this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
					}
				}
			}
		}
		else
		{
			if (this.fullscreen_mode > 0 && this.isDirectCanvas)
			{
;
				this.canvas = null;
				document.oncontextmenu = function (e) { return false; };
				document.onselectstart = function (e) { return false; };
				this.ctx = AppMobi["canvas"]["getContext"]("2d");
				try {
					this.ctx["samplingMode"] = this.linearSampling ? "smooth" : "sharp";
					this.ctx["globalScale"] = 1;
					this.ctx["HTML5CompatibilityMode"] = true;
					this.ctx["imageSmoothingEnabled"] = this.linearSampling;
				} catch(e){}
				if (this.width !== 0 && this.height !== 0)
				{
					this.ctx.width = this.width;
					this.ctx.height = this.height;
				}
			}
			if (!this.ctx)
			{
;
				if (this.isCocoonJs)
				{
					attribs = {
						"antialias": !!this.linearSampling,
						"alpha": alpha_canvas
					};
					this.ctx = canvas.getContext("2d", attribs);
				}
				else
				{
					attribs = {
						"alpha": alpha_canvas
					};
					this.ctx = canvas.getContext("2d", attribs);
				}
				this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["imageSmoothingEnabled"] = this.linearSampling;
			}
			this.overlay_canvas = null;
			this.overlay_ctx = null;
		}
		this.tickFunc = function () { self.tick(); };
		if (window != window.top && !this.isDomFree && !this.isWindows8App)
		{
			document.addEventListener("mousedown", function () {
				window.focus();
			}, true);
			document.addEventListener("touchstart", function () {
				window.focus();
			}, true);
		}
		if (typeof cr_is_preview !== "undefined")
		{
			if (this.isCocoonJs)
				console.log("[Construct 2] In preview-over-wifi via CocoonJS mode");
			if (window.location.search.indexOf("continuous") > -1)
			{
				cr.logexport("Reloading for continuous preview");
				this.loadFromSlot = "__c2_continuouspreview";
				this.suspendDrawing = true;
			}
			if (this.pauseOnBlur && !this.isMobile)
			{
				jQuery(window).focus(function ()
				{
					self["setSuspended"](false);
				});
				jQuery(window).blur(function ()
				{
					self["setSuspended"](true);
				});
			}
		}
		if (this.fullscreen_mode === 0 && this.isRetina && this.devicePixelRatio > 1)
		{
			this["setSize"](this.original_width, this.original_height, true);
		}
		this.tryLockOrientation();
		this.go();			// run loading screen
		this.extra = {};
		cr.seal(this);
	};
	var webkitRepaintFlag = false;
	Runtime.prototype["setSize"] = function (w, h, force)
	{
		var offx = 0, offy = 0;
		var neww = 0, newh = 0, intscale = 0;
		if (this.lastWindowWidth === w && this.lastWindowHeight === h && !force)
			return;
		this.lastWindowWidth = w;
		this.lastWindowHeight = h;
		var mode = this.fullscreen_mode;
		var orig_aspect, cur_aspect;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen);
		if (!isfullscreen && this.fullscreen_mode === 0 && !force)
			return;			// ignore size events when not fullscreen and not using a fullscreen-in-browser mode
		if (isfullscreen && this.fullscreen_scaling > 0)
			mode = this.fullscreen_scaling;
		if (mode >= 4)
		{
			orig_aspect = this.original_width / this.original_height;
			cur_aspect = w / h;
			if (cur_aspect > orig_aspect)
			{
				neww = h * orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = neww / this.original_width;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offx = (w - neww) / 2;
					w = neww;
				}
			}
			else
			{
				newh = w / orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = newh / this.original_height;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offy = (h - newh) / 2;
					h = newh;
				}
			}
			if (isfullscreen && !this.isNodeWebkit)
			{
				offx = 0;
				offy = 0;
			}
			offx = Math.floor(offx);
			offy = Math.floor(offy);
			w = Math.floor(w);
			h = Math.floor(h);
		}
		else if (this.isNodeWebkit && this.isNodeFullscreen && this.fullscreen_mode_set === 0)
		{
			offx = Math.floor((w - this.original_width) / 2);
			offy = Math.floor((h - this.original_height) / 2);
			w = this.original_width;
			h = this.original_height;
		}
		if (mode < 2)
			this.aspect_scale = this.devicePixelRatio;
		if (this.isRetina && this.isiPad && this.devicePixelRatio > 1)	// don't apply to iPad 1-2
		{
			if (w >= 1024)
				w = 1023;		// 2046 retina pixels
			if (h >= 1024)
				h = 1023;
		}
		var multiplier = this.devicePixelRatio;
		this.cssWidth = w;
		this.cssHeight = h;
		this.width = Math.round(w * multiplier);
		this.height = Math.round(h * multiplier);
		this.redraw = true;
		if (this.wantFullscreenScalingQuality)
		{
			this.draw_width = this.width;
			this.draw_height = this.height;
			this.fullscreenScalingQuality = true;
		}
		else
		{
			if ((this.width < this.original_width && this.height < this.original_height) || mode === 1)
			{
				this.draw_width = this.width;
				this.draw_height = this.height;
				this.fullscreenScalingQuality = true;
			}
			else
			{
				this.draw_width = this.original_width;
				this.draw_height = this.original_height;
				this.fullscreenScalingQuality = false;
				/*var orig_aspect = this.original_width / this.original_height;
				var cur_aspect = this.width / this.height;
				if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
					this.aspect_scale = this.height / this.original_height;
				else
					this.aspect_scale = this.width / this.original_width;*/
				if (mode === 2)		// scale inner
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect < orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect > orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
				else if (mode === 3)
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect > orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect < orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
			}
		}
		if (this.canvasdiv && !this.isDomFree)
		{
			jQuery(this.canvasdiv).css({"width": w + "px",
										"height": h + "px",
										"margin-left": offx,
										"margin-top": offy});
			if (typeof cr_is_preview !== "undefined")
			{
				jQuery("#borderwrap").css({"width": w + "px",
											"height": h + "px"});
			}
		}
		if (this.canvas)
		{
			this.canvas.width = Math.round(w * multiplier);
			this.canvas.height = Math.round(h * multiplier);
			if (this.isRetina)
			{
				jQuery(this.canvas).css({"width": w + "px",
										"height": h + "px"});
			}
		}
		if (this.overlay_canvas)
		{
			this.overlay_canvas.width = w;
			this.overlay_canvas.height = h;
			jQuery(this.overlay_canvas).css({"width": w + "px",
											"height": h + "px"});
		}
		if (this.glwrap)
		{
			this.glwrap.setSize(Math.round(w * multiplier), Math.round(h * multiplier));
		}
		if (this.isDirectCanvas && this.ctx)
		{
			this.ctx.width = w;
			this.ctx.height = h;
		}
		if (this.ctx)
		{
			this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["imageSmoothingEnabled"] = this.linearSampling;
		}
		this.tryLockOrientation();
	};
	Runtime.prototype.tryLockOrientation = function ()
	{
		if (!this.autoLockOrientation || this.orientations === 0)
			return;
		var orientation = "portrait";
		if (this.orientations === 2)
			orientation = "landscape";
		if (screen["lockOrientation"])
			screen["lockOrientation"](orientation);
		else if (screen["webkitLockOrientation"])
			screen["webkitLockOrientation"](orientation);
		else if (screen["mozLockOrientation"])
			screen["mozLockOrientation"](orientation);
		else if (screen["msLockOrientation"])
			screen["msLockOrientation"](orientation);
	};
	Runtime.prototype.onContextLost = function ()
	{
		this.is_WebGL_context_lost = true;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onLostWebGLContext)
				t.onLostWebGLContext();
		}
	};
	Runtime.prototype.onContextRestored = function ()
	{
		this.is_WebGL_context_lost = false;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onRestoreWebGLContext)
				t.onRestoreWebGLContext();
		}
	};
	Runtime.prototype.positionOverlayCanvas = function()
	{
		if (this.isDomFree)
			return;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen);
		var overlay_position = isfullscreen ? jQuery(this.canvas).offset() : jQuery(this.canvas).position();
		overlay_position.position = "absolute";
		jQuery(this.overlay_canvas).css(overlay_position);
	};
	var caf = window["cancelAnimationFrame"] ||
	  window["mozCancelAnimationFrame"]    ||
	  window["webkitCancelAnimationFrame"] ||
	  window["msCancelAnimationFrame"]     ||
	  window["oCancelAnimationFrame"];
	Runtime.prototype["setSuspended"] = function (s)
	{
		var i, len;
		if (s && !this.isSuspended)
		{
			cr.logexport("[Construct 2] Suspending");
			this.isSuspended = true;			// next tick will be last
			if (this.raf_id !== 0 && caf)		// note: CocoonJS does not implement cancelAnimationFrame
				caf(this.raf_id);
			if (this.timeout_id !== 0)
				clearTimeout(this.timeout_id);
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](true);
		}
		else if (!s && this.isSuspended)
		{
			cr.logexport("[Construct 2] Resuming");
			this.isSuspended = false;
			this.last_tick_time = cr.performance_now();	// ensure first tick is a zero-dt one
			this.last_fps_time = cr.performance_now();	// reset FPS counter
			this.framecount = 0;
			this.logictime = 0;
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](false);
			this.tick();						// kick off runtime again
		}
	};
	Runtime.prototype.addSuspendCallback = function (f)
	{
		this.suspend_events.push(f);
	};
	Runtime.prototype.load = function ()
	{
;
		var pm = cr.getProjectModel();
		this.name = pm[0];
		this.first_layout = pm[1];
		this.fullscreen_mode = pm[11];	// 0 = off, 1 = crop, 2 = scale inner, 3 = scale outer, 4 = letterbox scale, 5 = integer letterbox scale
		this.fullscreen_mode_set = pm[11];
		this.original_width = pm[9];
		this.original_height = pm[10];
		if (this.isDomFree && (pm[11] >= 4 || pm[11] === 0))
		{
			cr.logexport("[Construct 2] Letterbox scale fullscreen modes are not supported on this platform - falling back to 'Scale outer'");
			this.fullscreen_mode = 3;
			this.fullscreen_mode_set = 3;
		}
		this.uses_loader_layout = pm[17];
		this.loaderstyle = pm[18];
		if (this.loaderstyle === 0)
		{
			this.loaderlogo = new Image();
			this.loaderlogo.src = "loading-logo.png";
		}
		this.next_uid = pm[20];
		this.system = new cr.system_object(this);
		var i, len, j, lenj, k, lenk, idstr, m, b, t, f;
		var plugin, plugin_ctor;
		for (i = 0, len = pm[2].length; i < len; i++)
		{
			m = pm[2][i];
;
			cr.add_common_aces(m);
			plugin = new m[0](this);
			plugin.singleglobal = m[1];
			plugin.is_world = m[2];
			plugin.must_predraw = m[9];
			if (plugin.onCreate)
				plugin.onCreate();  // opportunity to override default ACEs
			cr.seal(plugin);
			this.plugins.push(plugin);
		}
		pm = cr.getProjectModel();
		for (i = 0, len = pm[3].length; i < len; i++)
		{
			m = pm[3][i];
			plugin_ctor = m[1];
;
			plugin = null;
			for (j = 0, lenj = this.plugins.length; j < lenj; j++)
			{
				if (this.plugins[j] instanceof plugin_ctor)
				{
					plugin = this.plugins[j];
					break;
				}
			}
;
;
			var type_inst = new plugin.Type(plugin);
;
			type_inst.name = m[0];
			type_inst.is_family = m[2];
			type_inst.instvar_sids = m[3].slice(0);
			type_inst.vars_count = m[3].length;
			type_inst.behs_count = m[4];
			type_inst.fx_count = m[5];
			type_inst.sid = m[11];
			if (type_inst.is_family)
			{
				type_inst.members = [];				// types in this family
				type_inst.family_index = this.family_count++;
				type_inst.families = null;
			}
			else
			{
				type_inst.members = null;
				type_inst.family_index = -1;
				type_inst.families = [];			// families this type belongs to
			}
			type_inst.family_var_map = null;
			type_inst.family_beh_map = null;
			type_inst.family_fx_map = null;
			type_inst.is_contained = false;
			type_inst.container = null;
			if (m[6])
			{
				type_inst.texture_file = m[6][0];
				type_inst.texture_filesize = m[6][1];
				type_inst.texture_pixelformat = m[6][2];
			}
			else
			{
				type_inst.texture_file = null;
				type_inst.texture_filesize = 0;
				type_inst.texture_pixelformat = 0;		// rgba8
			}
			if (m[7])
			{
				type_inst.animations = m[7];
			}
			else
			{
				type_inst.animations = null;
			}
			type_inst.index = i;                                // save index in to types array in type
			type_inst.instances = [];                           // all instances of this type
			type_inst.deadCache = [];							// destroyed instances to recycle next create
			type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
			type_inst.cur_sol = 0;
			type_inst.default_instance = null;
			type_inst.stale_iids = true;
			type_inst.updateIIDs = cr.type_updateIIDs;
			type_inst.getFirstPicked = cr.type_getFirstPicked;
			type_inst.getPairedInstance = cr.type_getPairedInstance;
			type_inst.getCurrentSol = cr.type_getCurrentSol;
			type_inst.pushCleanSol = cr.type_pushCleanSol;
			type_inst.pushCopySol = cr.type_pushCopySol;
			type_inst.popSol = cr.type_popSol;
			type_inst.getBehaviorByName = cr.type_getBehaviorByName;
			type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
			type_inst.getEffectIndexByName = cr.type_getEffectIndexByName;
			type_inst.applySolToContainer = cr.type_applySolToContainer;
			type_inst.getInstanceByIID = cr.type_getInstanceByIID;
			type_inst.collision_grid = new cr.SparseGrid(this.original_width, this.original_height);
			type_inst.any_bbox_changed = true;
			type_inst.any_instance_parallaxed = false;
			type_inst.extra = {};
			type_inst.toString = cr.type_toString;
			type_inst.behaviors = [];
			for (j = 0, lenj = m[8].length; j < lenj; j++)
			{
				b = m[8][j];
				var behavior_ctor = b[1];
				var behavior_plugin = null;
				for (k = 0, lenk = this.behaviors.length; k < lenk; k++)
				{
					if (this.behaviors[k] instanceof behavior_ctor)
					{
						behavior_plugin = this.behaviors[k];
						break;
					}
				}
				if (!behavior_plugin)
				{
					behavior_plugin = new behavior_ctor(this);
					behavior_plugin.my_types = [];						// types using this behavior
					behavior_plugin.my_instances = new cr.ObjectSet(); 	// instances of this behavior
					if (behavior_plugin.onCreate)
						behavior_plugin.onCreate();
					cr.seal(behavior_plugin);
					this.behaviors.push(behavior_plugin);
					if (cr.behaviors.solid && behavior_plugin instanceof cr.behaviors.solid)
						this.solidBehavior = behavior_plugin;
					if (cr.behaviors.jumpthru && behavior_plugin instanceof cr.behaviors.jumpthru)
						this.jumpthruBehavior = behavior_plugin;
				}
				if (behavior_plugin.my_types.indexOf(type_inst) === -1)
					behavior_plugin.my_types.push(type_inst);
				var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
				behavior_type.name = b[0];
				behavior_type.sid = b[2];
				behavior_type.onCreate();
				cr.seal(behavior_type);
				type_inst.behaviors.push(behavior_type);
			}
			type_inst.global = m[9];
			type_inst.isOnLoaderLayout = m[10];
			type_inst.effect_types = [];
			for (j = 0, lenj = m[12].length; j < lenj; j++)
			{
				type_inst.effect_types.push({
					id: m[12][j][0],
					name: m[12][j][1],
					shaderindex: -1,
					active: true,
					index: j
				});
			}
			type_inst.tile_poly_data = m[13];
			if (!this.uses_loader_layout || type_inst.is_family || type_inst.isOnLoaderLayout || !plugin.is_world)
			{
				type_inst.onCreate();
				cr.seal(type_inst);
			}
			if (type_inst.name)
				this.types[type_inst.name] = type_inst;
			this.types_by_index.push(type_inst);
			if (plugin.singleglobal)
			{
				var instance = new plugin.Instance(type_inst);
				instance.uid = this.next_uid++;
				instance.puid = this.next_puid++;
				instance.iid = 0;
				instance.get_iid = cr.inst_get_iid;
				instance.toString = cr.inst_toString;
				instance.properties = m[14];
				instance.onCreate();
				cr.seal(instance);
				type_inst.instances.push(instance);
				this.objectsByUid[instance.uid.toString()] = instance;
			}
		}
		for (i = 0, len = pm[4].length; i < len; i++)
		{
			var familydata = pm[4][i];
			var familytype = this.types_by_index[familydata[0]];
			var familymember;
			for (j = 1, lenj = familydata.length; j < lenj; j++)
			{
				familymember = this.types_by_index[familydata[j]];
				familymember.families.push(familytype);
				familytype.members.push(familymember);
			}
		}
		for (i = 0, len = pm[23].length; i < len; i++)
		{
			var containerdata = pm[23][i];
			var containertypes = [];
			for (j = 0, lenj = containerdata.length; j < lenj; j++)
				containertypes.push(this.types_by_index[containerdata[j]]);
			for (j = 0, lenj = containertypes.length; j < lenj; j++)
			{
				containertypes[j].is_contained = true;
				containertypes[j].container = containertypes;
			}
		}
		if (this.family_count > 0)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (t.is_family || !t.families.length)
					continue;
				t.family_var_map = new Array(this.family_count);
				t.family_beh_map = new Array(this.family_count);
				t.family_fx_map = new Array(this.family_count);
				var all_fx = [];
				var varsum = 0;
				var behsum = 0;
				var fxsum = 0;
				for (j = 0, lenj = t.families.length; j < lenj; j++)
				{
					f = t.families[j];
					t.family_var_map[f.family_index] = varsum;
					varsum += f.vars_count;
					t.family_beh_map[f.family_index] = behsum;
					behsum += f.behs_count;
					t.family_fx_map[f.family_index] = fxsum;
					fxsum += f.fx_count;
					for (k = 0, lenk = f.effect_types.length; k < lenk; k++)
						all_fx.push(cr.shallowCopy({}, f.effect_types[k]));
				}
				t.effect_types = all_fx.concat(t.effect_types);
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
					t.effect_types[j].index = j;
			}
		}
		for (i = 0, len = pm[5].length; i < len; i++)
		{
			m = pm[5][i];
			var layout = new cr.layout(this, m);
			cr.seal(layout);
			this.layouts[layout.name] = layout;
			this.layouts_by_index.push(layout);
		}
		for (i = 0, len = pm[6].length; i < len; i++)
		{
			m = pm[6][i];
			var sheet = new cr.eventsheet(this, m);
			cr.seal(sheet);
			this.eventsheets[sheet.name] = sheet;
			this.eventsheets_by_index.push(sheet);
		}
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].postInit();
		for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
			this.triggers_to_postinit[i].postInit();
		this.triggers_to_postinit.length = 0;
		this.files_subfolder = pm[7];
		this.pixel_rounding = pm[8];
		this.aspect_scale = 1.0;
		this.enableWebGL = pm[12];
		this.linearSampling = pm[13];
		this.alphaBackground = pm[14];
		this.versionstr = pm[15];
		this.useHighDpi = pm[16];
		this.orientations = pm[19];		// 0 = any, 1 = portrait, 2 = landscape
		this.autoLockOrientation = (this.orientations > 0);
		this.pauseOnBlur = pm[21];
		this.wantFullscreenScalingQuality = pm[22];		// false = low quality, true = high quality
		this.fullscreenScalingQuality = this.wantFullscreenScalingQuality;
		this.start_time = Date.now();
	};
	Runtime.prototype.findWaitingTexture = function (src_)
	{
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			if (this.wait_for_textures[i].cr_src === src_)
				return this.wait_for_textures[i];
		}
		return null;
	};
	Runtime.prototype.areAllTexturesLoaded = function ()
	{
		var totalsize = 0;
		var completedsize = 0;
		var ret = true;
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			var filesize = this.wait_for_textures[i].cr_filesize;
			if (!filesize || filesize <= 0)
				filesize = 50000;
			totalsize += filesize;
			if (this.wait_for_textures[i].complete || this.wait_for_textures[i]["loaded"])
				completedsize += filesize;
			else
				ret = false;    // not all textures loaded
		}
		if (totalsize == 0)
			this.progress = 0;
		else
			this.progress = (completedsize / totalsize);
		return ret;
	};
	Runtime.prototype.go = function ()
	{
		if (!this.ctx && !this.glwrap)
			return;
		var ctx = this.ctx || this.overlay_ctx;
		if (this.overlay_canvas)
			this.positionOverlayCanvas();
		this.progress = 0;
		this.last_progress = -1;
		if (this.areAllTexturesLoaded())
			this.go_textures_done();
		else
		{
			var ms_elapsed = Date.now() - this.start_time;
			if (ctx)
			{
				var overlay_width = this.width;
				var overlay_height = this.height;
				var multiplier = this.devicePixelRatio;
				if (this.overlay_canvas)
				{
					overlay_width = this.cssWidth;
					overlay_height = this.cssHeight;
					multiplier = 1;
				}
				if (this.loaderstyle !== 3 && ms_elapsed >= 500 && this.last_progress != this.progress)
				{
					ctx.clearRect(0, 0, overlay_width, overlay_height);
					var mx = overlay_width / 2;
					var my = overlay_height / 2;
					var haslogo = (this.loaderstyle === 0 && this.loaderlogo.complete);
					var hlw = 40 * multiplier;
					var hlh = 0;
					var logowidth = 80 * multiplier;
					var logoheight;
					if (haslogo)
					{
						logowidth = this.loaderlogo.width * multiplier;
						logoheight = this.loaderlogo.height * multiplier;
						hlw = logowidth / 2;
						hlh = logoheight / 2;
						ctx.drawImage(this.loaderlogo, cr.floor(mx - hlw), cr.floor(my - hlh), logowidth, logoheight);
					}
					if (this.loaderstyle <= 1)
					{
						my += hlh + (haslogo ? 12 * multiplier : 0);
						mx -= hlw;
						mx = cr.floor(mx) + 0.5;
						my = cr.floor(my) + 0.5;
						ctx.fillStyle = "DodgerBlue";
						ctx.fillRect(mx, my, Math.floor(logowidth * this.progress), 6 * multiplier);
						ctx.strokeStyle = "black";
						ctx.strokeRect(mx, my, logowidth, 6 * multiplier);
						ctx.strokeStyle = "white";
						ctx.strokeRect(mx - 1 * multiplier, my - 1 * multiplier, logowidth + 2 * multiplier, 8 * multiplier);
					}
					else if (this.loaderstyle === 2)
					{
						ctx.font = "12pt Arial";
						ctx.fillStyle = "#999";
						ctx.textBaseLine = "middle";
						var percent_text = Math.round(this.progress * 100) + "%";
						var text_dim = ctx.measureText ? ctx.measureText(percent_text) : null;
						var text_width = text_dim ? text_dim.width : 0;
						ctx.fillText(percent_text, mx - (text_width / 2), my);
					}
				}
				this.last_progress = this.progress;
			}
			setTimeout((function (self) { return function () { self.go(); }; })(this), 100);
		}
	};
	Runtime.prototype.go_textures_done = function ()
	{
		if (this.overlay_canvas)
		{
			this.canvas.parentNode.removeChild(this.overlay_canvas);
			this.overlay_ctx = null;
			this.overlay_canvas = null;
		}
		this.start_time = Date.now();
		this.last_fps_time = cr.performance_now();       // for counting framerate
		var i, len, t;
		if (this.uses_loader_layout)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (!t.is_family && !t.isOnLoaderLayout && t.plugin.is_world)
				{
					t.onCreate();
					cr.seal(t);
				}
			}
		}
		else
			this.isloading = false;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			this.layouts_by_index[i].createGlobalNonWorlds();
		}
		if (this.fullscreen_mode >= 2)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
				this.aspect_scale = this.height / this.original_height;
			else
				this.aspect_scale = this.width / this.original_width;
		}
		if (this.first_layout)
			this.layouts[this.first_layout].startRunning();
		else
			this.layouts_by_index[0].startRunning();
;
		if (!this.uses_loader_layout)
		{
			this.loadingprogress = 1;
			this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
		}
		if (navigator["splashscreen"] && navigator["splashscreen"]["hide"])
			navigator["splashscreen"]["hide"]();
		this.tick();
		if (this.isDirectCanvas)
			AppMobi["webview"]["execute"]("onGameReady();");
	};
	var raf = window["requestAnimationFrame"] ||
	  window["mozRequestAnimationFrame"]    ||
	  window["webkitRequestAnimationFrame"] ||
	  window["msRequestAnimationFrame"]     ||
	  window["oRequestAnimationFrame"];
	Runtime.prototype.tick = function ()
	{
		if (!this.running_layout)
			return;
		var logic_start = cr.performance_now();
		if (this.halfFramerateMode && this.ranLastRaf)
		{
			if (logic_start - this.lastRafTime < 29)
			{
				this.ranLastRaf = false;
				this.lastRafTime = logic_start;
				if (raf)
					this.raf_id = raf(this.tickFunc, this.canvas);
				else	// no idea if this works without raf/hi res timers but let's hope for the best
					this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
				return;		// skipped this frame
			}
		}
		this.ranLastRaf = true;
		this.lastRafTime = logic_start;
		var fsmode = this.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"]);
		if ((isfullscreen || this.isNodeFullscreen) && this.fullscreen_scaling > 0)
			fsmode = this.fullscreen_scaling;
		if (fsmode > 0)
		{
			var curwidth = window.innerWidth;
			var curheight = window.innerHeight;
			if (this.lastWindowWidth !== curwidth || this.lastWindowHeight !== curheight)
			{
				this["setSize"](curwidth, curheight);
			}
		}
		if (!this.isDomFree)
		{
			if (isfullscreen)
			{
				if (!this.firstInFullscreen)
				{
					this.fullscreenOldMarginCss = jQuery(this.canvas).css("margin") || "0";
					this.firstInFullscreen = true;
				}
				if (!this.isChrome && !this.isNodeWebkit)
				{
					jQuery(this.canvas).css({
						"margin-left": "" + Math.floor((screen.width - (this.width / this.devicePixelRatio)) / 2) + "px",
						"margin-top": "" + Math.floor((screen.height - (this.height / this.devicePixelRatio)) / 2) + "px"
					});
				}
			}
			else
			{
				if (this.firstInFullscreen)
				{
					if (!this.isChrome && !this.isNodeWebkit)
					{
						jQuery(this.canvas).css("margin", this.fullscreenOldMarginCss);
					}
					this.fullscreenOldMarginCss = "";
					this.firstInFullscreen = false;
					if (this.fullscreen_mode === 0)
					{
						this["setSize"](Math.round(this.oldWidth / this.devicePixelRatio), Math.round(this.oldHeight / this.devicePixelRatio), true);
					}
				}
				else
				{
					this.oldWidth = this.width;
					this.oldHeight = this.height;
				}
			}
		}
		if (this.isloading)
		{
			var done = this.areAllTexturesLoaded();		// updates this.progress
			this.loadingprogress = this.progress;
			if (done)
			{
				this.isloading = false;
				this.progress = 1;
				this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
			}
		}
		this.logic();
		if ((this.redraw || this.isCocoonJs) && !this.is_WebGL_context_lost && !this.suspendDrawing)
		{
			this.redraw = false;
			if (this.glwrap)
				this.drawGL();
			else
				this.draw();
			if (this.snapshotCanvas)
			{
				if (this.canvas && this.canvas.toDataURL)
				{
					this.snapshotData = this.canvas.toDataURL(this.snapshotCanvas[0], this.snapshotCanvas[1]);
					this.trigger(cr.system_object.prototype.cnds.OnCanvasSnapshot, null);
				}
				this.snapshotCanvas = null;
			}
		}
		if (!this.hit_breakpoint)
		{
			this.tickcount++;
			this.execcount++;
			this.framecount++;
		}
		this.logictime += cr.performance_now() - logic_start;
		if (this.isSuspended)
			return;
		if (raf)
			this.raf_id = raf(this.tickFunc, this.canvas);
		else
		{
			this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
		}
	};
	Runtime.prototype.logic = function ()
	{
		var i, leni, j, lenj, k, lenk, type, inst, binst;
		var cur_time = cr.performance_now();
		if (cur_time - this.last_fps_time >= 1000)  // every 1 second
		{
			this.last_fps_time += 1000;
			this.fps = this.framecount;
			this.framecount = 0;
			this.cpuutilisation = this.logictime;
			this.logictime = 0;
		}
		if (this.measuring_dt)
		{
			if (this.last_tick_time !== 0)
			{
				var ms_diff = cur_time - this.last_tick_time;
				if (ms_diff === 0 && !this.isDebug)
				{
					this.zeroDtCount++;
					if (this.zeroDtCout >= 10)
						this.measuring_dt = false;
					this.dt1 = 1.0 / 60.0;            // 60fps assumed (0.01666...)
				}
				else
				{
					this.dt1 = ms_diff / 1000.0; // dt measured in seconds
					if (this.dt1 > 0.5)
						this.dt1 = 0;
					else if (this.dt1 > 0.1)
						this.dt1 = 0.1;
				}
			}
			this.last_tick_time = cur_time;
		}
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen);
		if (this.fullscreen_mode >= 2 /* scale */ || (isfullscreen && this.fullscreen_scaling > 0))
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			var mode = this.fullscreen_mode;
			if (isfullscreen && this.fullscreen_scaling > 0)
				mode = this.fullscreen_scaling;
			if ((mode !== 2 && cur_aspect > orig_aspect) || (mode === 2 && cur_aspect < orig_aspect))
			{
				this.aspect_scale = this.height / this.original_height;
			}
			else
			{
				this.aspect_scale = this.width / this.original_width;
			}
			if (this.running_layout)
			{
				this.running_layout.scrollToX(this.running_layout.scrollX);
				this.running_layout.scrollToY(this.running_layout.scrollY);
			}
		}
		else
			this.aspect_scale = (this.isRetina ? this.devicePixelRatio : 1);
		this.ClearDeathRow();
		this.isInOnDestroy++;
		this.system.runWaits();		// prevent instance list changing
		this.isInOnDestroy--;
		this.ClearDeathRow();		// allow instance list changing
		this.isInOnDestroy++;
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					inst.behavior_insts[k].tick();
				}
			}
		}
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.posttick)
						binst.posttick();
				}
			}
		}
        var tickarr = this.objects_to_tick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
		this.handleSaveLoad();		// save/load now if queued
		i = 0;
		while (this.changelayout && i++ < 10)
		{
			this.doChangeLayout(this.changelayout);
		}
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
            this.eventsheets_by_index[i].hasRun = false;
		if (this.running_layout.event_sheet)
			this.running_layout.event_sheet.run();
		this.registered_collisions.length = 0;
		this.layout_first_tick = false;
		this.isInOnDestroy++;		// prevent instance lists from being changed
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.tick2)
						binst.tick2();
				}
			}
		}
        tickarr = this.objects_to_tick2.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick2();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
	};
	Runtime.prototype.doChangeLayout = function (changeToLayout)
	{
;
		var prev_layout = this.running_layout;
		this.running_layout.stopRunning();
		var i, len, j, lenj, k, lenk, type, inst, binst;
		if (this.glwrap)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				type = this.types_by_index[i];
				if (type.is_family)
					continue;
				if (type.unloadTextures && (!type.global || type.instances.length === 0) && changeToLayout.initial_types.indexOf(type) === -1)
				{
					type.unloadTextures();
				}
			}
		}
		if (prev_layout == changeToLayout)
			this.system.waits.length = 0;
		changeToLayout.startRunning();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (!type.global && !type.plugin.singleglobal)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (inst.onLayoutChange)
					inst.onLayoutChange();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.onLayoutChange)
							binst.onLayoutChange();
					}
				}
			}
		}
		this.redraw = true;
		this.layout_first_tick = true;
		this.ClearDeathRow();
	};
    Runtime.prototype.tickMe = function (inst)
    {
        this.objects_to_tick.add(inst);
    };
	Runtime.prototype.untickMe = function (inst)
	{
		this.objects_to_tick.remove(inst);
	};
	Runtime.prototype.tick2Me = function (inst)
    {
        this.objects_to_tick2.add(inst);
    };
	Runtime.prototype.untick2Me = function (inst)
	{
		this.objects_to_tick2.remove(inst);
	};
    Runtime.prototype.getDt = function (inst)
    {
        if (!inst || inst.my_timescale === -1.0)
            return this.dt;
        return this.dt1 * inst.my_timescale;
    };
	Runtime.prototype.draw = function ()
	{
		this.running_layout.draw(this.ctx);
		if (this.isDirectCanvas)
			this.ctx["present"]();
	};
	Runtime.prototype.drawGL = function ()
	{
		this.running_layout.drawGL(this.glwrap);
		this.glwrap.present();
	};
	Runtime.prototype.addDestroyCallback = function (f)
	{
		if (f)
			this.destroycallbacks.push(f);
	};
	Runtime.prototype.removeDestroyCallback = function (f)
	{
		cr.arrayFindRemove(this.destroycallbacks, f);
	};
	Runtime.prototype.getObjectByUID = function (uid_)
	{
;
		return this.objectsByUid[uid_.toString()];
	};
	Runtime.prototype.DestroyInstance = function (inst)
	{
		var i, len;
		if (!this.deathRow.contains(inst))
		{
			this.deathRow.add(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					this.DestroyInstance(inst.siblings[i]);
				}
			}
			if (this.isInClearDeathRow)
				this.deathRow.values_cache.push(inst);
			this.isInOnDestroy++;		// support recursion
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnDestroyed, inst);
			this.isInOnDestroy--;
		}
	};
	Runtime.prototype.ClearDeathRow = function ()
	{
		var inst, index, type, instances, binst;
		var i, j, k, leni, lenj, lenk;
		var w, f;
		this.isInClearDeathRow = true;
		for (i = 0, leni = this.createRow.length; i < leni; i++)
		{
			inst = this.createRow[i];
			type = inst.type;
			type.instances.push(inst);
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				type.families[j].instances.push(inst);
				type.families[j].stale_iids = true;
			}
		}
		this.createRow.length = 0;
		var arr = this.deathRow.valuesRef();	// get array of items from set
		for (i = 0; i < arr.length; i++)		// check array length every time in case it changes
		{
			inst = arr[i];
			type = inst.type;
			instances = type.instances;
			for (j = 0, lenj = this.destroycallbacks.length; j < lenj; j++)
				this.destroycallbacks[j](inst);
			cr.arrayFindRemove(instances, inst);
			if (instances.length === 0)
				type.any_instance_parallaxed = false;
			if (inst.collcells)
			{
				type.collision_grid.update(inst, inst.collcells, null);
			}
			if (inst.layer)
			{
				cr.arrayRemove(inst.layer.instances, inst.get_zindex());
				inst.layer.zindices_stale = true;
			}
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				cr.arrayFindRemove(type.families[j].instances, inst);
				type.families[j].stale_iids = true;
			}
			if (inst.behavior_insts)
			{
				for (j = 0, lenj = inst.behavior_insts.length; j < lenj; j++)
				{
					binst = inst.behavior_insts[j];
					if (binst.onDestroy)
						binst.onDestroy();
					binst.behavior.my_instances.remove(inst);
				}
			}
            this.objects_to_tick.remove(inst);
			this.objects_to_tick2.remove(inst);
			for (j = 0, lenj = this.system.waits.length; j < lenj; j++)
			{
				w = this.system.waits[j];
				if (w.sols.hasOwnProperty(type.index))
					cr.arrayFindRemove(w.sols[type.index].insts, inst);
				if (!type.is_family)
				{
					for (k = 0, lenk = type.families.length; k < lenk; k++)
					{
						f = type.families[k];
						if (w.sols.hasOwnProperty(f.index))
							cr.arrayFindRemove(w.sols[f.index].insts, inst);
					}
				}
			}
			if (inst.onDestroy)
				inst.onDestroy();
			if (this.objectsByUid.hasOwnProperty(inst.uid.toString()))
				delete this.objectsByUid[inst.uid.toString()];
			this.objectcount--;
			if (type.deadCache.length < 64)
				type.deadCache.push(inst);
			type.stale_iids = true;
		}
		if (!this.deathRow.isEmpty())
			this.redraw = true;
		this.deathRow.clear();
		this.isInClearDeathRow = false;
	};
	Runtime.prototype.createInstance = function (type, layer, sx, sy)
	{
		if (type.is_family)
		{
			var i = cr.floor(Math.random() * type.members.length);
			return this.createInstance(type.members[i], layer, sx, sy);
		}
		if (!type.default_instance)
		{
			return null;
		}
		return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy, false);
	};
	var all_behaviors = [];
	Runtime.prototype.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy, skip_siblings)
	{
		var i, len, j, lenj, p, effect_fallback, x, y;
		if (!initial_inst)
			return null;
		var type = this.types_by_index[initial_inst[1]];
;
;
		var is_world = type.plugin.is_world;
;
		if (this.isloading && is_world && !type.isOnLoaderLayout)
			return null;
		if (is_world && !this.glwrap && initial_inst[0][11] === 11)
			return null;
		var original_layer = layer;
		if (!is_world)
			layer = null;
		var inst;
		if (type.deadCache.length)
		{
			inst = type.deadCache.pop();
			inst.recycled = true;
			type.plugin.Instance.call(inst, type);
		}
		else
		{
			inst = new type.plugin.Instance(type);
			inst.recycled = false;
		}
		if (is_startup_instance && !skip_siblings)
			inst.uid = initial_inst[2];
		else
			inst.uid = this.next_uid++;
		this.objectsByUid[inst.uid.toString()] = inst;
		inst.puid = this.next_puid++;
		inst.iid = type.instances.length;
		for (i = 0, len = this.createRow.length; i < len; ++i)
		{
			if (this.createRow[i].type === type)
				inst.iid++;
		}
		inst.get_iid = cr.inst_get_iid;
		var initial_vars = initial_inst[3];
		if (inst.recycled)
		{
			cr.wipe(inst.extra);
		}
		else
		{
			inst.extra = {};
			if (typeof cr_is_preview !== "undefined")
			{
				inst.instance_var_names = [];
				inst.instance_var_names.length = initial_vars.length;
				for (i = 0, len = initial_vars.length; i < len; i++)
					inst.instance_var_names[i] = initial_vars[i][1];
			}
			inst.instance_vars = [];
			inst.instance_vars.length = initial_vars.length;
		}
		for (i = 0, len = initial_vars.length; i < len; i++)
			inst.instance_vars[i] = initial_vars[i][0];
		if (is_world)
		{
			var wm = initial_inst[0];
;
			inst.x = cr.is_undefined(sx) ? wm[0] : sx;
			inst.y = cr.is_undefined(sy) ? wm[1] : sy;
			inst.z = wm[2];
			inst.width = wm[3];
			inst.height = wm[4];
			inst.depth = wm[5];
			inst.angle = wm[6];
			inst.opacity = wm[7];
			inst.hotspotX = wm[8];
			inst.hotspotY = wm[9];
			inst.blend_mode = wm[10];
			effect_fallback = wm[11];
			if (!this.glwrap && type.effect_types.length)	// no WebGL renderer and shaders used
				inst.blend_mode = effect_fallback;			// use fallback blend mode - destroy mode was handled above
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			if (inst.recycled)
			{
				for (i = 0, len = wm[12].length; i < len; i++)
				{
					for (j = 0, lenj = wm[12][i].length; j < lenj; j++)
						inst.effect_params[i][j] = wm[12][i][j];
				}
				inst.bbox.set(0, 0, 0, 0);
				inst.collcells.set(0, 0, -1, -1);
				inst.bquad.set_from_rect(inst.bbox);
				inst.bbox_changed_callbacks.length = 0;
			}
			else
			{
				inst.effect_params = wm[12].slice(0);
				for (i = 0, len = inst.effect_params.length; i < len; i++)
					inst.effect_params[i] = wm[12][i].slice(0);
				inst.active_effect_types = [];
				inst.active_effect_flags = [];
				inst.active_effect_flags.length = type.effect_types.length;
				inst.bbox = new cr.rect(0, 0, 0, 0);
				inst.collcells = new cr.rect(0, 0, -1, -1);
				inst.bquad = new cr.quad();
				inst.bbox_changed_callbacks = [];
				inst.set_bbox_changed = cr.set_bbox_changed;
				inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
				inst.contains_pt = cr.inst_contains_pt;
				inst.update_bbox = cr.update_bbox;
				inst.get_zindex = cr.inst_get_zindex;
			}
			inst.tilemap_exists = false;
			inst.tilemap_width = 0;
			inst.tilemap_height = 0;
			inst.tilemap_data = null;
			if (wm.length === 14)
			{
				inst.tilemap_exists = true;
				inst.tilemap_width = wm[13][0];
				inst.tilemap_height = wm[13][1];
				inst.tilemap_data = wm[13][2];
			}
			for (i = 0, len = type.effect_types.length; i < len; i++)
				inst.active_effect_flags[i] = true;
			inst.updateActiveEffects = cr.inst_updateActiveEffects;
			inst.updateActiveEffects();
			inst.uses_shaders = !!inst.active_effect_types.length;
			inst.bbox_changed = true;
			type.any_bbox_changed = true;
			inst.visible = true;
            inst.my_timescale = -1.0;
			inst.layer = layer;
			inst.zindex = layer.instances.length;	// will be placed at top of current layer
			if (typeof inst.collision_poly === "undefined")
				inst.collision_poly = null;
			inst.collisionsEnabled = true;
			this.redraw = true;
		}
		inst.toString = cr.inst_toString;
		var initial_props, binst;
		all_behaviors.length = 0;
		for (i = 0, len = type.families.length; i < len; i++)
		{
			all_behaviors.push.apply(all_behaviors, type.families[i].behaviors);
		}
		all_behaviors.push.apply(all_behaviors, type.behaviors);
		if (inst.recycled)
		{
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				binst = inst.behavior_insts[i];
				binst.recycled = true;
				btype.behavior.Instance.call(binst, btype, inst);
				initial_props = initial_inst[4][i];
				for (j = 0, lenj = initial_props.length; j < lenj; j++)
					binst.properties[j] = initial_props[j];
				binst.onCreate();
				btype.behavior.my_instances.add(inst);
			}
		}
		else
		{
			inst.behavior_insts = [];
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				var binst = new btype.behavior.Instance(btype, inst);
				binst.recycled = false;
				binst.properties = initial_inst[4][i].slice(0);
				binst.onCreate();
				cr.seal(binst);
				inst.behavior_insts.push(binst);
				btype.behavior.my_instances.add(inst);
			}
		}
		initial_props = initial_inst[5];
		if (inst.recycled)
		{
			for (i = 0, len = initial_props.length; i < len; i++)
				inst.properties[i] = initial_props[i];
		}
		else
			inst.properties = initial_props.slice(0);
		this.createRow.push(inst);
		if (layer)
		{
;
			layer.instances.push(inst);
			if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
				type.any_instance_parallaxed = true;
		}
		this.objectcount++;
		if (type.is_contained)
		{
			inst.is_contained = true;
			if (inst.recycled)
				inst.siblings.length = 0;
			else
				inst.siblings = [];			// note: should not include self in siblings
			if (!is_startup_instance && !skip_siblings)	// layout links initial instances
			{
				for (i = 0, len = type.container.length; i < len; i++)
				{
					if (type.container[i] === type)
						continue;
					if (!type.container[i].default_instance)
					{
						return null;
					}
					inst.siblings.push(this.createInstanceFromInit(type.container[i].default_instance, original_layer, false, is_world ? inst.x : sx, is_world ? inst.y : sy, true));
				}
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					inst.siblings[i].siblings.push(inst);
					for (j = 0; j < len; j++)
					{
						if (i !== j)
							inst.siblings[i].siblings.push(inst.siblings[j]);
					}
				}
			}
		}
		else
		{
			inst.is_contained = false;
			inst.siblings = null;
		}
		inst.onCreate();
		if (!inst.recycled)
			cr.seal(inst);
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].postCreate)
				inst.behavior_insts[i].postCreate();
		}
		return inst;
	};
	Runtime.prototype.getLayerByName = function (layer_name)
	{
		var i, len;
		for (i = 0, len = this.running_layout.layers.length; i < len; i++)
		{
			var layer = this.running_layout.layers[i];
			if (cr.equals_nocase(layer.name, layer_name))
				return layer;
		}
		return null;
	};
	Runtime.prototype.getLayerByNumber = function (index)
	{
		index = cr.floor(index);
		if (index < 0)
			index = 0;
		if (index >= this.running_layout.layers.length)
			index = this.running_layout.layers.length - 1;
		return this.running_layout.layers[index];
	};
	Runtime.prototype.getLayer = function (l)
	{
		if (cr.is_number(l))
			return this.getLayerByNumber(l);
		else
			return this.getLayerByName(l.toString());
	};
	Runtime.prototype.clearSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].getCurrentSol().select_all = true;
		}
	};
	Runtime.prototype.pushCleanSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCleanSol();
		}
	};
	Runtime.prototype.pushCopySol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCopySol();
		}
	};
	Runtime.prototype.popSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].popSol();
		}
	};
	Runtime.prototype.updateAllBBoxes = function (type)
	{
		if (!type.any_bbox_changed)
			return;		// all instances must already be up-to-date
		var i, len, instances = type.instances;
		for (i = 0, len = instances.length; i < len; ++i)
		{
			instances[i].update_bbox();
		}
		type.any_bbox_changed = false;
	};
	Runtime.prototype.getCollisionCandidates = function (layer, rtype, bbox, candidates)
	{
		var i, len, t;
		var is_parallaxed = (layer ? (layer.parallaxX !== 1 || layer.parallaxY !== 1) : false);
		if (rtype.is_family)
		{
			for (i = 0, len = rtype.members.length; i < len; ++i)
			{
				t = rtype.members[i];
				if (is_parallaxed || t.any_instance_parallaxed)
				{
					cr.appendArray(candidates, t.instances);
				}
				else
				{
					this.updateAllBBoxes(t);
					t.collision_grid.queryRange(bbox, candidates);
				}
			}
		}
		else
		{
			if (is_parallaxed || rtype.any_instance_parallaxed)
			{
				cr.appendArray(candidates, rtype.instances);
			}
			else
			{
				this.updateAllBBoxes(rtype);
				rtype.collision_grid.queryRange(bbox, candidates);
			}
		}
	};
	Runtime.prototype.getTypesCollisionCandidates = function (layer, types, bbox, candidates)
	{
		var i, len;
		for (i = 0, len = types.length; i < len; ++i)
		{
			this.getCollisionCandidates(layer, types[i], bbox, candidates);
		}
	};
	Runtime.prototype.getSolidCollisionCandidates = function (layer, bbox, candidates)
	{
		var solid = this.getSolidBehavior();
		if (!solid)
			return null;
		this.getTypesCollisionCandidates(layer, solid.my_types, bbox, candidates);
	};
	Runtime.prototype.getJumpthruCollisionCandidates = function (layer, bbox, candidates)
	{
		var jumpthru = this.getJumpthruBehavior();
		if (!jumpthru)
			return null;
		this.getTypesCollisionCandidates(layer, jumpthru.my_types, bbox, candidates);
	};
	Runtime.prototype.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted)
	{
		var sol = type.getCurrentSol();
		var i, j, inst, len;
		var lx, ly;
		if (sol.select_all)
		{
			if (!inverted)
			{
				sol.select_all = false;
				sol.instances.length = 0;   // clear contents
			}
			for (i = 0, len = type.instances.length; i < len; i++)
			{
				inst = type.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
						sol.instances.push(inst);
				}
			}
		}
		else
		{
			j = 0;
			for (i = 0, len = sol.instances.length; i < len; i++)
			{
				inst = sol.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
					{
						sol.instances[j] = sol.instances[i];
						j++;
					}
				}
			}
			if (!inverted)
				sol.instances.length = j;
		}
		type.applySolToContainer();
		if (inverted)
			return true;		// did not find anything overlapping
		else
			return sol.hasObjects();
	};
	Runtime.prototype.testOverlap = function (a, b)
	{
		if (!a || !b || a === b || !a.collisionsEnabled || !b.collisionsEnabled)
			return false;
		a.update_bbox();
		b.update_bbox();
		var layera = a.layer;
		var layerb = b.layer;
		var different_layers = (layera !== layerb && (layera.parallaxX !== layerb.parallaxX || layerb.parallaxY !== layerb.parallaxY || layera.scale !== layerb.scale || layera.angle !== layerb.angle || layera.zoomRate !== layerb.zoomRate));
		var i, len, i2, i21, x, y, haspolya, haspolyb, polya, polyb;
		if (!different_layers)	// same layers: easy check
		{
			if (!a.bbox.intersects_rect(b.bbox))
				return false;
			if (!a.bquad.intersects_quad(b.bquad))
				return false;
			if (a.tilemap_exists && b.tilemap_exists)
				return false;
			if (a.tilemap_exists)
				return this.testTilemapOverlap(a, b);
			if (b.tilemap_exists)
				return this.testTilemapOverlap(b, a);
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolya && !haspolyb)
				return true;
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				polya = a.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
				polya = this.temp_poly;
			}
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				polyb = b.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
				polyb = this.temp_poly;
			}
			return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
		}
		else	// different layers: need to do full translated check
		{
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				this.temp_poly.set_from_poly(a.collision_poly);
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
			}
			polya = this.temp_poly;
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				this.temp_poly2.set_from_poly(b.collision_poly);
			}
			else
			{
				this.temp_poly2.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
			}
			polyb = this.temp_poly2;
			for (i = 0, len = polya.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polya.pts_cache[i2];
				y = polya.pts_cache[i21];
				polya.pts_cache[i2] = layera.layerToCanvas(x + a.x, y + a.y, true);
				polya.pts_cache[i21] = layera.layerToCanvas(x + a.x, y + a.y, false);
			}
			polya.update_bbox();
			for (i = 0, len = polyb.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polyb.pts_cache[i2];
				y = polyb.pts_cache[i21];
				polyb.pts_cache[i2] = layerb.layerToCanvas(x + b.x, y + b.y, true);
				polyb.pts_cache[i21] = layerb.layerToCanvas(x + b.x, y + b.y, false);
			}
			polyb.update_bbox();
			return polya.intersects_poly(polyb, 0, 0);
		}
	};
	var tmpQuad = new cr.quad();
	var tmpRect = new cr.rect(0, 0, 0, 0);
	Runtime.prototype.testTilemapOverlap = function (tm, a)
	{
		var collrects = tm.collision_rects;
		var i, len, c, rc;
		var bbox = a.bbox;
		var tmx = tm.x;
		var tmy = tm.y;
		var haspolya = (a.collision_poly && !a.collision_poly.is_empty());
		for (i = 0, len = collrects.length; i < len; ++i)
		{
			c = collrects[i];
			rc = c.rc;
			if (bbox.intersects_rect_off(rc, tmx, tmy))
			{
				tmpQuad.set_from_rect(rc);
				tmpQuad.offset(tmx, tmy);
				if (tmpQuad.intersects_quad(a.bquad))
				{
					if (haspolya)
					{
						a.collision_poly.cache_poly(a.width, a.height, a.angle);
						if (c.poly)
						{
							if (c.poly.intersects_poly(a.collision_poly, a.x - (tmx + rc.left), a.y - (tmy + rc.top)))
							{
								return true;
							}
						}
						else
						{
							this.temp_poly.set_from_quad(tmpQuad, 0, 0, rc.right - rc.left, rc.bottom - rc.top);
							if (this.temp_poly.intersects_poly(a.collision_poly, a.x, a.y))
								return true;
						}
					}
					else
					{
						if (c.poly)
						{
							this.temp_poly.set_from_quad(a.bquad, 0, 0, a.width, a.height);
							if (c.poly.intersects_poly(this.temp_poly, -(tmx + rc.left), -(tmy + rc.top)))
							{
								return true;
							}
						}
						else
							return true;
					}
				}
			}
		}
		return false;
	};
	Runtime.prototype.testRectOverlap = function (r, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		if (!b.bbox.intersects_rect(r))
			return false;
		if (b.tilemap_exists)
		{
			var collrects = b.collision_rects;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (r.intersects_rect_off(tilerc, tmx, tmy))
				{
					if (c.poly)
					{
						this.temp_poly.set_from_rect(r, 0, 0);
						if (c.poly.intersects_poly(this.temp_poly, -(tmx + tilerc.left), -(tmy + tilerc.top)))
							return true;
					}
					else
						return true;
				}
			}
			return false;
		}
		else
		{
			tmpQuad.set_from_rect(r);
			if (!b.bquad.intersects_quad(tmpQuad))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			tmpQuad.offset(-r.left, -r.top);
			this.temp_poly.set_from_quad(tmpQuad, 0, 0, 1, 1);
			return b.collision_poly.intersects_poly(this.temp_poly, r.left - b.x, r.top - b.y);
		}
	};
	Runtime.prototype.testSegmentOverlap = function (x1, y1, x2, y2, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		tmpRect.set(cr.min(x1, x2), cr.min(y1, y2), cr.max(x1, x2), cr.max(y1, y2));
		if (!b.bbox.intersects_rect(tmpRect))
			return false;
		if (b.tilemap_exists)
		{
			var collrects = b.collision_rects;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (tmpRect.intersects_rect_off(tilerc, tmx, tmy))
				{
					tmpQuad.set_from_rect(tilerc);
					tmpQuad.offset(tmx, tmy);
					if (tmpQuad.intersects_segment(x1, y1, x2, y2))
					{
						if (c.poly)
						{
							if (c.poly.intersects_segment(tmx + tilerc.left, tmy + tilerc.top, x1, y1, x2, y2))
							{
								return true;
							}
						}
						else
							return true;
					}
				}
			}
			return false;
		}
		else
		{
			if (!b.bquad.intersects_segment(x1, y1, x2, y2))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			return b.collision_poly.intersects_segment(b.x, b.y, x1, y1, x2, y2);
		}
	};
	Runtime.prototype.typeHasBehavior = function (t, b)
	{
		if (!b)
			return false;
		var i, len, j, lenj, f;
		for (i = 0, len = t.behaviors.length; i < len; i++)
		{
			if (t.behaviors[i].behavior instanceof b)
				return true;
		}
		if (!t.is_family)
		{
			for (i = 0, len = t.families.length; i < len; i++)
			{
				f = t.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (f.behaviors[j].behavior instanceof b)
						return true;
				}
			}
		}
		return false;
	};
	Runtime.prototype.typeHasNoSaveBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.NoSave);
	};
	Runtime.prototype.typeHasPersistBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.Persist);
	};
	Runtime.prototype.getSolidBehavior = function ()
	{
		return this.solidBehavior;
	};
	Runtime.prototype.getJumpthruBehavior = function ()
	{
		return this.jumpthruBehavior;
	};
	var candidates = [];
	Runtime.prototype.testOverlapSolid = function (inst)
	{
		var i, len, s;
		inst.update_bbox();
		this.getSolidCollisionCandidates(inst.layer, inst.bbox, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testOverlap(inst, s))
			{
				candidates.length = 0;
				return s;
			}
		}
		candidates.length = 0;
		return null;
	};
	Runtime.prototype.testRectOverlapSolid = function (r)
	{
		var i, len, s;
		this.getSolidCollisionCandidates(null, r, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testRectOverlap(r, s))
			{
				candidates.length = 0;
				return s;
			}
		}
		candidates.length = 0;
		return null;
	};
	var jumpthru_array_ret = [];
	Runtime.prototype.testOverlapJumpThru = function (inst, all)
	{
		var ret = null;
		if (all)
		{
			ret = jumpthru_array_ret;
			ret.length = 0;
		}
		inst.update_bbox();
		this.getJumpthruCollisionCandidates(inst.layer, inst.bbox, candidates);
		var i, len, j;
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			j = candidates[i];
			if (!j.extra.jumpthruEnabled)
				continue;
			if (this.testOverlap(inst, j))
			{
				if (all)
					ret.push(j);
				else
				{
					candidates.length = 0;
					return j;
				}
			}
		}
		candidates.length = 0;
		return ret;
	};
	Runtime.prototype.pushOutSolid = function (inst, xdir, ydir, dist, include_jumpthrus, specific_jumpthru)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		var last_overlapped = null, secondlast_overlapped = null;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (last_overlapped)
					secondlast_overlapped = last_overlapped;
				if (!last_overlapped)
				{
					if (include_jumpthrus)
					{
						if (specific_jumpthru)
							last_overlapped = (this.testOverlap(inst, specific_jumpthru) ? specific_jumpthru : null);
						else
							last_overlapped = this.testOverlapJumpThru(inst);
						if (last_overlapped)
							secondlast_overlapped = last_overlapped;
					}
					if (!last_overlapped)
					{
						if (secondlast_overlapped)
							this.pushInFractional(inst, xdir, ydir, secondlast_overlapped, 16);
						return true;
					}
				}
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushOut = function (inst, xdir, ydir, dist, otherinst)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, otherinst))
				return true;
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushInFractional = function (inst, xdir, ydir, obj, limit)
	{
		var divisor = 2;
		var frac;
		var forward = false;
		var overlapping = false;
		var bestx = inst.x;
		var besty = inst.y;
		while (divisor <= limit)
		{
			frac = 1 / divisor;
			divisor *= 2;
			inst.x += xdir * frac * (forward ? 1 : -1);
			inst.y += ydir * frac * (forward ? 1 : -1);
			inst.set_bbox_changed();
			if (this.testOverlap(inst, obj))
			{
				forward = true;
				overlapping = true;
			}
			else
			{
				forward = false;
				overlapping = false;
				bestx = inst.x;
				besty = inst.y;
			}
		}
		if (overlapping)
		{
			inst.x = bestx;
			inst.y = besty;
			inst.set_bbox_changed();
		}
	};
	Runtime.prototype.pushOutSolidNearest = function (inst, max_dist_)
	{
		var max_dist = (cr.is_undefined(max_dist_) ? 100 : max_dist_);
		var dist = 0;
		var oldx = inst.x
		var oldy = inst.y;
		var dir = 0;
		var dx = 0, dy = 0;
		var last_overlapped = this.testOverlapSolid(inst);
		if (!last_overlapped)
			return true;		// already clear of solids
		while (dist <= max_dist)
		{
			switch (dir) {
			case 0:		dx = 0; dy = -1; dist++; break;
			case 1:		dx = 1; dy = -1; break;
			case 2:		dx = 1; dy = 0; break;
			case 3:		dx = 1; dy = 1; break;
			case 4:		dx = 0; dy = 1; break;
			case 5:		dx = -1; dy = 1; break;
			case 6:		dx = -1; dy = 0; break;
			case 7:		dx = -1; dy = -1; break;
			}
			dir = (dir + 1) % 8;
			inst.x = cr.floor(oldx + (dx * dist));
			inst.y = cr.floor(oldy + (dy * dist));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
					return true;
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.registerCollision = function (a, b)
	{
		if (!a.collisionsEnabled || !b.collisionsEnabled)
			return;
		this.registered_collisions.push([a, b]);
	};
	Runtime.prototype.checkRegisteredCollision = function (a, b)
	{
		var i, len, x;
		for (i = 0, len = this.registered_collisions.length; i < len; i++)
		{
			x = this.registered_collisions[i];
			if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a))
				return true;
		}
		return false;
	};
	Runtime.prototype.calculateSolidBounceAngle = function(inst, startx, starty, obj)
	{
		var objx = inst.x;
		var objy = inst.y;
		var radius = cr.max(10, cr.distanceTo(startx, starty, objx, objy));
		var startangle = cr.angleTo(startx, starty, objx, objy);
		var firstsolid = obj || this.testOverlapSolid(inst);
		if (!firstsolid)
			return cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
		var increment = cr.to_radians(5);	// 5 degree increments
		for (i = 1; i < 36; i++)
		{
			curangle = startangle - i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					anticlockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			anticlockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		for (i = 1; i < 36; i++)
		{
			curangle = startangle + i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					clockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			clockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		inst.x = objx;
		inst.y = objy;
		inst.set_bbox_changed();
		if (clockwise_free_angle === anticlockwise_free_angle)
			return clockwise_free_angle;
		var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
		var normal;
		if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle))
		{
			normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + cr.PI);
		}
		else
		{
			normal = cr.clamp_angle(clockwise_free_angle + half_diff);
		}
;
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normal);
		var ny = Math.sin(normal);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
		return cr.angleTo(0, 0, rx, ry);
	};
	var triggerSheetStack = [];
	var triggerSheetIndex = -1;
	Runtime.prototype.trigger = function (method, inst, value /* for fast triggers */)
	{
;
		if (!this.running_layout)
			return false;
		var sheet = this.running_layout.event_sheet;
		if (!sheet)
			return false;     // no event sheet active; nothing to trigger
		triggerSheetIndex++;
		if (triggerSheetIndex === triggerSheetStack.length)
			triggerSheetStack.push(new cr.ObjectSet());
		else
			triggerSheetStack[triggerSheetIndex].clear();
        var ret = this.triggerOnSheet(method, inst, sheet, value);
		triggerSheetIndex--;
		return ret;
    };
    Runtime.prototype.triggerOnSheet = function (method, inst, sheet, value)
    {
		var alreadyTriggeredSheets = triggerSheetStack[triggerSheetIndex];
        if (alreadyTriggeredSheets.contains(sheet))
            return false;
        alreadyTriggeredSheets.add(sheet);
        var includes = sheet.includes.valuesRef();
        var ret = false;
		var i, leni, r;
        for (i = 0, leni = includes.length; i < leni; i++)
        {
			if (includes[i].isActive())
			{
				r = this.triggerOnSheet(method, inst, includes[i].include_sheet, value);
				ret = ret || r;
			}
        }
		if (!inst)
		{
			r = this.triggerOnSheetForTypeName(method, inst, "system", sheet, value);
			ret = ret || r;
		}
		else
		{
			r = this.triggerOnSheetForTypeName(method, inst, inst.type.name, sheet, value);
			ret = ret || r;
			for (i = 0, leni = inst.type.families.length; i < leni; i++)
			{
				r = this.triggerOnSheetForTypeName(method, inst, inst.type.families[i].name, sheet, value);
				ret = ret || r;
			}
		}
		return ret;             // true if anything got triggered
	};
	Runtime.prototype.triggerOnSheetForTypeName = function (method, inst, type_name, sheet, value)
	{
		var i, leni;
		var ret = false, ret2 = false;
		var trig, index;
		var fasttrigger = (typeof value !== "undefined");
		var triggers = (fasttrigger ? sheet.fasttriggers : sheet.triggers);
		var obj_entry = triggers[type_name];
		if (!obj_entry)
			return ret;
		var triggers_list = null;
		for (i = 0, leni = obj_entry.length; i < leni; i++)
		{
			if (obj_entry[i].method == method)
			{
				triggers_list = obj_entry[i].evs;
				break;
			}
		}
		if (!triggers_list)
			return ret;
		var triggers_to_fire;
		if (fasttrigger)
		{
			triggers_to_fire = triggers_list[value];
		}
		else
		{
			triggers_to_fire = triggers_list;
		}
		if (!triggers_to_fire)
			return null;
		for (i = 0, leni = triggers_to_fire.length; i < leni; i++)
		{
			trig = triggers_to_fire[i][0];
			index = triggers_to_fire[i][1];
			ret2 = this.executeSingleTrigger(inst, type_name, trig, index);
			ret = ret || ret2;
		}
		return ret;
	};
	Runtime.prototype.executeSingleTrigger = function (inst, type_name, trig, index)
	{
		var i, leni;
		var ret = false;
		this.trigger_depth++;
		var current_event = this.getCurrentEventStack().current_event;
		if (current_event)
			this.pushCleanSol(current_event.solModifiersIncludingParents);
		var isrecursive = (this.trigger_depth > 1);		// calling trigger from inside another trigger
		this.pushCleanSol(trig.solModifiersIncludingParents);
		if (isrecursive)
			this.pushLocalVarStack();
		var event_stack = this.pushEventStack(trig);
		event_stack.current_event = trig;
		if (inst)
		{
			var sol = this.types[type_name].getCurrentSol();
			sol.select_all = false;
			sol.instances.length = 1;
			sol.instances[0] = inst;
			this.types[type_name].applySolToContainer();
		}
		var ok_to_run = true;
		if (trig.parent)
		{
			var temp_parents_arr = event_stack.temp_parents_arr;
			var cur_parent = trig.parent;
			while (cur_parent)
			{
				temp_parents_arr.push(cur_parent);
				cur_parent = cur_parent.parent;
			}
			temp_parents_arr.reverse();
			for (i = 0, leni = temp_parents_arr.length; i < leni; i++)
			{
				if (!temp_parents_arr[i].run_pretrigger())   // parent event failed
				{
					ok_to_run = false;
					break;
				}
			}
		}
		if (ok_to_run)
		{
			this.execcount++;
			if (trig.orblock)
				trig.run_orblocktrigger(index);
			else
				trig.run();
			ret = ret || event_stack.last_event_true;
		}
		this.popEventStack();
		if (isrecursive)
			this.popLocalVarStack();
		this.popSol(trig.solModifiersIncludingParents);
		if (current_event)
			this.popSol(current_event.solModifiersIncludingParents);
		if (this.isInOnDestroy === 0 && triggerSheetIndex === 0 && !this.isRunningEvents && (!this.deathRow.isEmpty() || this.createRow.length))
		{
			this.ClearDeathRow();
		}
		this.trigger_depth--;
		return ret;
	};
	Runtime.prototype.getCurrentCondition = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.conditions[evinfo.cndindex];
	};
	Runtime.prototype.getCurrentAction = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.actions[evinfo.actindex];
	};
	Runtime.prototype.pushLocalVarStack = function ()
	{
		this.localvar_stack_index++;
		if (this.localvar_stack_index >= this.localvar_stack.length)
			this.localvar_stack.push([]);
	};
	Runtime.prototype.popLocalVarStack = function ()
	{
;
		this.localvar_stack_index--;
	};
	Runtime.prototype.getCurrentLocalVarStack = function ()
	{
		return this.localvar_stack[this.localvar_stack_index];
	};
	Runtime.prototype.pushEventStack = function (cur_event)
	{
		this.event_stack_index++;
		if (this.event_stack_index >= this.event_stack.length)
			this.event_stack.push(new cr.eventStackFrame());
		var ret = this.getCurrentEventStack();
		ret.reset(cur_event);
		return ret;
	};
	Runtime.prototype.popEventStack = function ()
	{
;
		this.event_stack_index--;
	};
	Runtime.prototype.getCurrentEventStack = function ()
	{
		return this.event_stack[this.event_stack_index];
	};
	Runtime.prototype.pushLoopStack = function (name_)
	{
		this.loop_stack_index++;
		if (this.loop_stack_index >= this.loop_stack.length)
		{
			this.loop_stack.push(cr.seal({ name: name_, index: 0, stopped: false }));
		}
		var ret = this.getCurrentLoop();
		ret.name = name_;
		ret.index = 0;
		ret.stopped = false;
		return ret;
	};
	Runtime.prototype.popLoopStack = function ()
	{
;
		this.loop_stack_index--;
	};
	Runtime.prototype.getCurrentLoop = function ()
	{
		return this.loop_stack[this.loop_stack_index];
	};
	Runtime.prototype.getEventVariableByName = function (name, scope)
	{
		var i, leni, j, lenj, sheet, e;
		while (scope)
		{
			for (i = 0, leni = scope.subevents.length; i < leni; i++)
			{
				e = scope.subevents[i];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
			scope = scope.parent;
		}
		for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
		{
			sheet = this.eventsheets_by_index[i];
			for (j = 0, lenj = sheet.events.length; j < lenj; j++)
			{
				e = sheet.events[j];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
		}
		return null;
	};
	Runtime.prototype.getLayoutBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			if (this.layouts_by_index[i].sid === sid_)
				return this.layouts_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getObjectTypeBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			if (this.types_by_index[i].sid === sid_)
				return this.types_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getGroupBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			if (this.allGroups[i].sid === sid_)
				return this.allGroups[i];
		}
		return null;
	};
	function makeSaveDb(e)
	{
		var db = e.target.result;
		db.createObjectStore("saves", { keyPath: "slot" });
	};
	function IndexedDB_WriteSlot(slot_, data_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"], "readwrite");
			var objectStore = transaction.objectStore("saves");
			var putReq = objectStore.put({"slot": slot_, "data": data_ });
			putReq.onsuccess = oncomplete_;
		};
	};
	function IndexedDB_ReadSlot(slot_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"]);
			var objectStore = transaction.objectStore("saves");
			var readReq = objectStore.get(slot_);
			readReq.onsuccess = function (e)
			{
				if (readReq.result)
					oncomplete_(readReq.result["data"]);
				else
					oncomplete_(null);
			};
		};
	};
	Runtime.prototype.signalContinuousPreview = function ()
	{
		this.signalledContinuousPreview = true;
	};
	function doContinuousPreviewReload()
	{
		cr.logexport("Reloading for continuous preview");
		if (!!window["c2cocoonjs"])
		{
			CocoonJS["App"]["reload"]();
		}
		else
		{
			if (window.location.search.indexOf("continuous") > -1)
				window.location.reload(true);
			else
				window.location = window.location + "?continuous";
		}
	};
	Runtime.prototype.handleSaveLoad = function ()
	{
		var self = this;
		var savingToSlot = this.saveToSlot;
		var savingJson = this.lastSaveJson;
		var loadingFromSlot = this.loadFromSlot;
		var continuous = false;
		if (this.signalledContinuousPreview)
		{
			continuous = true;
			savingToSlot = "__c2_continuouspreview";
			this.signalledContinuousPreview = false;
		}
		if (savingToSlot.length)
		{
			this.ClearDeathRow();
			savingJson = this.saveToJSONString();
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_WriteSlot(savingToSlot, savingJson, function ()
				{
					cr.logexport("Saved state to IndexedDB storage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}, function (e)
				{
					try {
						localStorage.setItem("__c2save_" + savingToSlot, savingJson);
						cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
						self.lastSaveJson = savingJson;
						self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
						self.lastSaveJson = "";
						if (continuous)
							doContinuousPreviewReload();
					}
					catch (f)
					{
						cr.logexport("Failed to save game state: " + e + "; " + f);
					}
				});
			}
			else
			{
				try {
					localStorage.setItem("__c2save_" + savingToSlot, savingJson);
					cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					this.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}
				catch (e)
				{
					cr.logexport("Error saving to WebStorage: " + e);
				}
			}
			this.saveToSlot = "";
			this.loadFromSlot = "";
			this.loadFromJson = "";
		}
		if (loadingFromSlot.length)
		{
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_ReadSlot(loadingFromSlot, function (result_)
				{
					if (result_)
					{
						self.loadFromJson = result_;
						cr.logexport("Loaded state from IndexedDB storage (" + self.loadFromJson.length + " bytes)");
					}
					else
					{
						self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
						cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					}
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				}, function (e)
				{
					self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
					cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				});
			}
			else
			{
				this.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
				cr.logexport("Loaded state from WebStorage (" + this.loadFromJson.length + " bytes)");
				this.suspendDrawing = false;
				if (!self.loadFromJson.length)
					self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
			}
			this.loadFromSlot = "";
			this.saveToSlot = "";
		}
		if (this.loadFromJson.length)
		{
			this.ClearDeathRow();
			this.loadFromJSONString(this.loadFromJson);
			this.lastSaveJson = this.loadFromJson;
			this.trigger(cr.system_object.prototype.cnds.OnLoadComplete, null);
			this.lastSaveJson = "";
			this.loadFromJson = "";
		}
	};
	function CopyExtraObject(extra)
	{
		var p, ret = {};
		for (p in extra)
		{
			if (extra.hasOwnProperty(p))
			{
				if (extra[p] instanceof cr.ObjectSet)
					continue;
				if (extra[p] && typeof extra[p].c2userdata !== "undefined")
					continue;
				ret[p] = extra[p];
			}
		}
		return ret;
	};
	Runtime.prototype.saveToJSONString = function()
	{
		var i, len, j, lenj, type, layout, typeobj, g, c, a, v, p;
		var o = {
			"c2save":				true,
			"version":				1,
			"rt": {
				"time":				this.kahanTime.sum,
				"timescale":		this.timescale,
				"tickcount":		this.tickcount,
				"execcount":		this.execcount,
				"next_uid":			this.next_uid,
				"running_layout":	this.running_layout.sid,
				"start_time_offset": (Date.now() - this.start_time)
			},
			"types": {},
			"layouts": {},
			"events": {
				"groups": {},
				"cnds": {},
				"acts": {},
				"vars": {}
			}
		};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || this.typeHasNoSaveBehavior(type))
				continue;
			typeobj = {
				"instances": []
			};
			if (cr.hasAnyOwnProperty(type.extra))
				typeobj["ex"] = CopyExtraObject(type.extra);
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				typeobj["instances"].push(this.saveInstanceToJSON(type.instances[j]));
			}
			o["types"][type.sid.toString()] = typeobj;
		}
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			layout = this.layouts_by_index[i];
			o["layouts"][layout.sid.toString()] = layout.saveToJSON();
		}
		var ogroups = o["events"]["groups"];
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			g = this.allGroups[i];
			ogroups[g.sid.toString()] = !!this.activeGroups[g.group_name];
		}
		var ocnds = o["events"]["cnds"];
		for (p in this.cndsBySid)
		{
			if (this.cndsBySid.hasOwnProperty(p))
			{
				c = this.cndsBySid[p];
				if (cr.hasAnyOwnProperty(c.extra))
					ocnds[p] = { "ex": CopyExtraObject(c.extra) };
			}
		}
		var oacts = o["events"]["acts"];
		for (p in this.actsBySid)
		{
			if (this.actsBySid.hasOwnProperty(p))
			{
				a = this.actsBySid[p];
				if (cr.hasAnyOwnProperty(a.extra))
					oacts[p] = { "ex": a.extra };
			}
		}
		var ovars = o["events"]["vars"];
		for (p in this.varsBySid)
		{
			if (this.varsBySid.hasOwnProperty(p))
			{
				v = this.varsBySid[p];
				if (!v.is_constant && (!v.parent || v.is_static))
					ovars[p] = v.data;
			}
		}
		o["system"] = this.system.saveToJSON();
		return JSON.stringify(o);
	};
	Runtime.prototype.refreshUidMap = function ()
	{
		var i, len, type, j, lenj, inst;
		this.objectsByUid = {};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				this.objectsByUid[inst.uid.toString()] = inst;
			}
		}
	};
	Runtime.prototype.loadFromJSONString = function (str)
	{
		var o = JSON.parse(str);
		if (!o["c2save"])
			return;		// probably not a c2 save state
		if (o["version"] > 1)
			return;		// from future version of c2; assume not compatible
		var rt = o["rt"];
		this.kahanTime.reset();
		this.kahanTime.sum = rt["time"];
		this.timescale = rt["timescale"];
		this.tickcount = rt["tickcount"];
		this.execcount = rt["execcount"];
		this.start_time = Date.now() - rt["start_time_offset"];
		var layout_sid = rt["running_layout"];
		if (layout_sid !== this.running_layout.sid)
		{
			var changeToLayout = this.getLayoutBySid(layout_sid);
			if (changeToLayout)
				this.doChangeLayout(changeToLayout);
			else
				return;		// layout that was saved on has gone missing (deleted?)
		}
		this.isLoadingState = true;
		var i, len, j, lenj, k, lenk, p, type, existing_insts, load_insts, inst, binst, layout, layer, g, iid, t;
		var otypes = o["types"];
		for (p in otypes)
		{
			if (otypes.hasOwnProperty(p))
			{
				type = this.getObjectTypeBySid(parseInt(p, 10));
				if (!type || type.is_family || this.typeHasNoSaveBehavior(type))
					continue;
				if (otypes[p]["ex"])
					type.extra = otypes[p]["ex"];
				else
					cr.wipe(type.extra);
				existing_insts = type.instances;
				load_insts = otypes[p]["instances"];
				for (i = 0, len = cr.min(existing_insts.length, load_insts.length); i < len; i++)
				{
					this.loadInstanceFromJSON(existing_insts[i], load_insts[i]);
				}
				for (i = load_insts.length, len = existing_insts.length; i < len; i++)
					this.DestroyInstance(existing_insts[i]);
				for (i = existing_insts.length, len = load_insts.length; i < len; i++)
				{
					layer = null;
					if (type.plugin.is_world)
					{
						layer = this.running_layout.getLayerBySid(load_insts[i]["w"]["l"]);
						if (!layer)
							continue;
					}
					inst = this.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
					this.loadInstanceFromJSON(inst, load_insts[i]);
				}
				type.stale_iids = true;
			}
		}
		this.ClearDeathRow();
		this.refreshUidMap();
		var olayouts = o["layouts"];
		for (p in olayouts)
		{
			if (olayouts.hasOwnProperty(p))
			{
				layout = this.getLayoutBySid(parseInt(p, 10));
				if (!layout)
					continue;		// must've gone missing
				layout.loadFromJSON(olayouts[p]);
			}
		}
		var ogroups = o["events"]["groups"];
		for (p in ogroups)
		{
			if (ogroups.hasOwnProperty(p))
			{
				g = this.getGroupBySid(parseInt(p, 10));
				if (g)
					this.activeGroups[g.group_name] = ogroups[p];
			}
		}
		var ocnds = o["events"]["cnds"];
		for (p in ocnds)
		{
			if (ocnds.hasOwnProperty(p) && this.cndsBySid.hasOwnProperty(p))
			{
				this.cndsBySid[p].extra = ocnds[p]["ex"];
			}
		}
		var oacts = o["events"]["acts"];
		for (p in oacts)
		{
			if (oacts.hasOwnProperty(p) && this.actsBySid.hasOwnProperty(p))
			{
				this.actsBySid[p].extra = oacts[p]["ex"];
			}
		}
		var ovars = o["events"]["vars"];
		for (p in ovars)
		{
			if (ovars.hasOwnProperty(p) && this.varsBySid.hasOwnProperty(p))
			{
				this.varsBySid[p].data = ovars[p];
			}
		}
		this.next_uid = rt["next_uid"];
		this.isLoadingState = false;
		this.system.loadFromJSON(o["system"]);
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (type.is_contained)
				{
					iid = inst.get_iid();
					inst.siblings.length = 0;
					for (k = 0, lenk = type.container.length; k < lenk; k++)
					{
						t = type.container[k];
						if (type === t)
							continue;
;
						inst.siblings.push(t.instances[iid]);
					}
				}
				if (inst.afterLoad)
					inst.afterLoad();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.afterLoad)
							binst.afterLoad();
					}
				}
			}
		}
		this.redraw = true;
	};
	Runtime.prototype.saveInstanceToJSON = function(inst, state_only)
	{
		var i, len, world, behinst, et;
		var type = inst.type;
		var plugin = type.plugin;
		var o = {};
		if (state_only)
			o["c2"] = true;		// mark as known json data from Construct 2
		else
			o["uid"] = inst.uid;
		if (cr.hasAnyOwnProperty(inst.extra))
			o["ex"] = CopyExtraObject(inst.extra);
		if (inst.instance_vars && inst.instance_vars.length)
		{
			o["ivs"] = {};
			for (i = 0, len = inst.instance_vars.length; i < len; i++)
			{
				o["ivs"][inst.type.instvar_sids[i].toString()] = inst.instance_vars[i];
			}
		}
		if (plugin.is_world)
		{
			world = {
				"x": inst.x,
				"y": inst.y,
				"w": inst.width,
				"h": inst.height,
				"l": inst.layer.sid,
				"zi": inst.get_zindex()
			};
			if (inst.angle !== 0)
				world["a"] = inst.angle;
			if (inst.opacity !== 1)
				world["o"] = inst.opacity;
			if (inst.hotspotX !== 0.5)
				world["hX"] = inst.hotspotX;
			if (inst.hotspotY !== 0.5)
				world["hY"] = inst.hotspotY;
			if (inst.blend_mode !== 0)
				world["bm"] = inst.blend_mode;
			if (!inst.visible)
				world["v"] = inst.visible;
			if (!inst.collisionsEnabled)
				world["ce"] = inst.collisionsEnabled;
			if (inst.my_timescale !== -1)
				world["mts"] = inst.my_timescale;
			if (type.effect_types.length)
			{
				world["fx"] = [];
				for (i = 0, len = type.effect_types.length; i < len; i++)
				{
					et = type.effect_types[i];
					world["fx"].push({"name": et.name,
									  "active": inst.active_effect_flags[et.index],
									  "params": inst.effect_params[et.index] });
				}
			}
			o["w"] = world;
		}
		if (inst.behavior_insts && inst.behavior_insts.length)
		{
			o["behs"] = {};
			for (i = 0, len = inst.behavior_insts.length; i < len; i++)
			{
				behinst = inst.behavior_insts[i];
				if (behinst.saveToJSON)
					o["behs"][behinst.type.sid.toString()] = behinst.saveToJSON();
			}
		}
		if (inst.saveToJSON)
			o["data"] = inst.saveToJSON();
		return o;
	};
	Runtime.prototype.getInstanceVarIndexBySid = function (type, sid_)
	{
		var i, len;
		for (i = 0, len = type.instvar_sids.length; i < len; i++)
		{
			if (type.instvar_sids[i] === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.getBehaviorIndexBySid = function (inst, sid_)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].type.sid === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.loadInstanceFromJSON = function(inst, o, state_only)
	{
		var p, i, len, iv, oivs, world, fxindex, obehs, behindex;
		var oldlayer;
		var type = inst.type;
		var plugin = type.plugin;
		if (state_only)
		{
			if (!o["c2"])
				return;
		}
		else
			inst.uid = o["uid"];
		if (o["ex"])
			inst.extra = o["ex"];
		else
			cr.wipe(inst.extra);
		oivs = o["ivs"];
		if (oivs)
		{
			for (p in oivs)
			{
				if (oivs.hasOwnProperty(p))
				{
					iv = this.getInstanceVarIndexBySid(type, parseInt(p, 10));
					if (iv < 0 || iv >= inst.instance_vars.length)
						continue;		// must've gone missing
					inst.instance_vars[iv] = oivs[p];
				}
			}
		}
		if (plugin.is_world)
		{
			world = o["w"];
			if (inst.layer.sid !== world["l"])
			{
				oldlayer = inst.layer;
				inst.layer = this.running_layout.getLayerBySid(world["l"]);
				if (inst.layer)
				{
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
					cr.arrayFindRemove(oldlayer.instances, inst);
					oldlayer.zindices_stale = true;
				}
				else
				{
					inst.layer = oldlayer;
					this.DestroyInstance(inst);
				}
			}
			inst.x = world["x"];
			inst.y = world["y"];
			inst.width = world["w"];
			inst.height = world["h"];
			inst.zindex = world["zi"];
			inst.angle = world.hasOwnProperty("a") ? world["a"] : 0;
			inst.opacity = world.hasOwnProperty("o") ? world["o"] : 1;
			inst.hotspotX = world.hasOwnProperty("hX") ? world["hX"] : 0.5;
			inst.hotspotY = world.hasOwnProperty("hY") ? world["hY"] : 0.5;
			inst.visible = world.hasOwnProperty("v") ? world["v"] : true;
			inst.collisionsEnabled = world.hasOwnProperty("ce") ? world["ce"] : true;
			inst.my_timescale = world.hasOwnProperty("mts") ? world["mts"] : -1;
			inst.blend_mode = world.hasOwnProperty("bm") ? world["bm"] : 0;;
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			inst.set_bbox_changed();
			if (world.hasOwnProperty("fx"))
			{
				for (i = 0, len = world["fx"].length; i < len; i++)
				{
					fxindex = type.getEffectIndexByName(world["fx"][i]["name"]);
					if (fxindex < 0)
						continue;		// must've gone missing
					inst.active_effect_flags[fxindex] = world["fx"][i]["active"];
					inst.effect_params[fxindex] = world["fx"][i]["params"];
				}
			}
			inst.updateActiveEffects();
		}
		obehs = o["behs"];
		if (obehs)
		{
			for (p in obehs)
			{
				if (obehs.hasOwnProperty(p))
				{
					behindex = this.getBehaviorIndexBySid(inst, parseInt(p, 10));
					if (behindex < 0)
						continue;		// must've gone missing
					inst.behavior_insts[behindex].loadFromJSON(obehs[p]);
				}
			}
		}
		if (o["data"])
			inst.loadFromJSON(o["data"]);
	};
	cr.runtime = Runtime;
	cr.createRuntime = function (canvasid)
	{
		return new Runtime(document.getElementById(canvasid));
	};
	cr.createDCRuntime = function (w, h)
	{
		return new Runtime({ "dc": true, "width": w, "height": h });
	};
	window["cr_createRuntime"] = cr.createRuntime;
	window["cr_createDCRuntime"] = cr.createDCRuntime;
	window["createCocoonJSRuntime"] = function ()
	{
		window["c2cocoonjs"] = true;
		var canvas = document.createElement("screencanvas") || document.createElement("canvas");
		document.body.appendChild(canvas);
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window.addEventListener("orientationchange", function () {
			window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		});
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
}());
window["cr_getC2Runtime"] = function()
{
	var canvas = document.getElementById("c2canvas");
	if (canvas)
		return canvas["c2runtime"];
	else if (window["c2runtime"])
		return window["c2runtime"];
	else
		return null;
}
window["cr_sizeCanvas"] = function(w, h)
{
	if (w === 0 || h === 0)
		return;
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSize"](w, h);
}
window["cr_setSuspended"] = function(s)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSuspended"](s);
}
;
(function()
{
	function Layout(runtime, m)
	{
		this.runtime = runtime;
		this.event_sheet = null;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		this.scale = 1.0;
		this.angle = 0;
		this.first_visit = true;
		this.name = m[0];
		this.width = m[1];
		this.height = m[2];
		this.unbounded_scrolling = m[3];
		this.sheetname = m[4];
		this.sid = m[5];
		var lm = m[6];
		var i, len;
		this.layers = [];
		this.initial_types = [];
		for (i = 0, len = lm.length; i < len; i++)
		{
			var layer = new cr.layer(this, lm[i]);
			layer.number = i;
			cr.seal(layer);
			this.layers.push(layer);
		}
		var im = m[7];
		this.initial_nonworld = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_nonworld.push(inst);
			if (this.initial_types.indexOf(type) === -1)
				this.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[8].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[8][i][0],
				name: m[8][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[8][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
		this.persist_data = {};
	};
	Layout.prototype.saveObjectToPersist = function (inst)
	{
		var sidStr = inst.type.sid.toString();
		if (!this.persist_data.hasOwnProperty(sidStr))
			this.persist_data[sidStr] = [];
		var type_persist = this.persist_data[sidStr];
		type_persist.push(this.runtime.saveInstanceToJSON(inst));
	};
	Layout.prototype.hasOpaqueBottomLayer = function ()
	{
		var layer = this.layers[0];
		return !layer.transparent && layer.opacity === 1.0 && !layer.forceOwnTexture && layer.visible;
	};
	Layout.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layout.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	var created_instances = [];
	Layout.prototype.startRunning = function ()
	{
		if (this.sheetname)
		{
			this.event_sheet = this.runtime.eventsheets[this.sheetname];
;
		}
		this.runtime.running_layout = this;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		var i, k, len, lenk, type, type_instances, inst, iid, t, s, p, q, type_data, layer;
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.is_family)
				continue;		// instances are only transferred for their real type
			type_instances = type.instances;
			for (k = 0, lenk = type_instances.length; k < lenk; k++)
			{
				inst = type_instances[k];
				if (inst.layer)
				{
					var num = inst.layer.number;
					if (num >= this.layers.length)
						num = this.layers.length - 1;
					inst.layer = this.layers[num];
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
				}
			}
		}
		var layer;
		created_instances.length = 0;
		this.boundScrolling();
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			layer.createInitialInstances();		// fills created_instances
			layer.disableAngle = true;
			var px = layer.canvasToLayer(0, 0, true, true);
			var py = layer.canvasToLayer(0, 0, false, true);
			layer.disableAngle = false;
			if (this.runtime.pixel_rounding)
			{
				px = (px + 0.5) | 0;
				py = (py + 0.5) | 0;
			}
			layer.rotateViewport(px, py, null);
		}
		var uids_changed = false;
		if (!this.first_visit)
		{
			for (p in this.persist_data)
			{
				if (this.persist_data.hasOwnProperty(p))
				{
					type = this.runtime.getObjectTypeBySid(parseInt(p, 10));
					if (!type || type.is_family || !this.runtime.typeHasPersistBehavior(type))
						continue;
					type_data = this.persist_data[p];
					for (i = 0, len = type_data.length; i < len; i++)
					{
						layer = null;
						if (type.plugin.is_world)
						{
							layer = this.getLayerBySid(type_data[i]["w"]["l"]);
							if (!layer)
								continue;
						}
						inst = this.runtime.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
						this.runtime.loadInstanceFromJSON(inst, type_data[i]);
						uids_changed = true;
						created_instances.push(inst);
					}
					type_data.length = 0;
				}
			}
			for (i = 0, len = this.layers.length; i < len; i++)
			{
				this.layers[i].instances.sort(sortInstanceByZIndex);
				this.layers[i].zindices_stale = true;		// in case of duplicates/holes
			}
		}
		if (uids_changed)
		{
			this.runtime.ClearDeathRow();
			this.runtime.refreshUidMap();
		}
		for (i = 0; i < created_instances.length; i++)
		{
			inst = created_instances[i];
			if (!inst.type.is_contained)
				continue;
			iid = inst.get_iid();
			for (k = 0, lenk = inst.type.container.length; k < lenk; k++)
			{
				t = inst.type.container[k];
				if (inst.type === t)
					continue;
				if (t.instances.length > iid)
					inst.siblings.push(t.instances[iid]);
				else
				{
					if (!t.default_instance)
					{
					}
					else
					{
						s = this.runtime.createInstanceFromInit(t.default_instance, inst.layer, true, inst.x, inst.y, true);
						this.runtime.ClearDeathRow();
						t.updateIIDs();
						inst.siblings.push(s);
						created_instances.push(s);		// come back around and link up its own instances too
					}
				}
			}
		}
		for (i = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
;
		}
		this.runtime.changelayout = null;
		this.runtime.ClearDeathRow();
		if (this.runtime.ctx && !this.runtime.isDomFree)
		{
			for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
			{
				t = this.runtime.types_by_index[i];
				if (t.is_family || !t.instances.length || !t.preloadCanvas2D)
					continue;
				t.preloadCanvas2D(this.runtime.ctx);
			}
		}
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout start: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		for (i = 0, len = created_instances.length; i < len; i++)
		{
			inst = created_instances[i];
			this.runtime.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnCreated, inst);
		}
		created_instances.length = 0;
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
		this.first_visit = false;
	};
	Layout.prototype.createGlobalNonWorlds = function ()
	{
		var i, k, len, initial_inst, inst, type;
		for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (type.global)
				inst = this.runtime.createInstanceFromInit(initial_inst, null, true);
			else
			{
				this.initial_nonworld[k] = initial_inst;
				k++;
			}
		}
		this.initial_nonworld.length = k;
	};
	Layout.prototype.stopRunning = function ()
	{
;
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout end: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
		this.runtime.system.waits.length = 0;
		var i, leni, j, lenj;
		var layer_instances, inst, type;
		for (i = 0, leni = this.layers.length; i < leni; i++)
		{
			layer_instances = this.layers[i].instances;
			for (j = 0, lenj = layer_instances.length; j < lenj; j++)
			{
				inst = layer_instances[j];
				if (!inst.type.global)
				{
					if (this.runtime.typeHasPersistBehavior(inst.type))
						this.saveObjectToPersist(inst);
					this.runtime.DestroyInstance(inst);
				}
			}
			this.runtime.ClearDeathRow();
			layer_instances.length = 0;
			this.layers[i].zindices_stale = true;
		}
		for (i = 0, leni = this.runtime.types_by_index.length; i < leni; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.global || type.plugin.is_world || type.plugin.singleglobal || type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
				this.runtime.DestroyInstance(type.instances[j]);
			this.runtime.ClearDeathRow();
		}
	};
	Layout.prototype.draw = function (ctx)
	{
		var layout_canvas;
		var layout_ctx = ctx;
		var ctx_changed = false;
		var render_offscreen = !this.runtime.fullscreenScalingQuality;
		if (render_offscreen)
		{
			if (!this.runtime.layout_canvas)
			{
				this.runtime.layout_canvas = document.createElement("canvas");
				layout_canvas = this.runtime.layout_canvas;
				layout_canvas.width = this.runtime.draw_width;
				layout_canvas.height = this.runtime.draw_height;
				this.runtime.layout_ctx = layout_canvas.getContext("2d");
				ctx_changed = true;
			}
			layout_canvas = this.runtime.layout_canvas;
			layout_ctx = this.runtime.layout_ctx;
			if (layout_canvas.width !== this.runtime.draw_width)
			{
				layout_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layout_canvas.height !== this.runtime.draw_height)
			{
				layout_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				layout_ctx["webkitImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["mozImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["msImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["imageSmoothingEnabled"] = this.runtime.linearSampling;
			}
		}
		layout_ctx.globalAlpha = 1;
		layout_ctx.globalCompositeOperation = "source-over";
		if (this.runtime.alphaBackground && !this.hasOpaqueBottomLayer())
			layout_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		var i, len, l;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.visible && l.opacity > 0 && l.blend_mode !== 11)
				l.draw(layout_ctx);
		}
		if (render_offscreen)
		{
			ctx.drawImage(layout_canvas, 0, 0, this.runtime.width, this.runtime.height);
		}
	};
	Layout.prototype.drawGL = function (glw)
	{
		var render_to_texture = (this.active_effect_types.length > 0 ||
								 this.runtime.uses_background_blending ||
								 !this.runtime.fullscreenScalingQuality);
		if (render_to_texture)
		{
			if (!this.runtime.layout_tex)
			{
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layout_tex.c2width !== this.runtime.draw_width || this.runtime.layout_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layout_tex);
			if (!this.runtime.fullscreenScalingQuality)
			{
				glw.setSize(this.runtime.draw_width, this.runtime.draw_height);
			}
		}
		else
		{
			if (this.runtime.layout_tex)
			{
				glw.setRenderingToTexture(null);
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = null;
			}
		}
		if (this.runtime.alphaBackground && !this.hasOpaqueBottomLayer())
			glw.clear(0, 0, 0, 0);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].visible && this.layers[i].opacity > 0)
				this.layers[i].drawGL(glw);
		}
		if (render_to_texture)
		{
			if (this.active_effect_types.length === 0 ||
				(this.active_effect_types.length === 1 && this.runtime.fullscreenScalingQuality))
			{
				if (this.active_effect_types.length === 1)
				{
					var etindex = this.active_effect_types[0].index;
					glw.switchProgram(this.active_effect_types[0].shaderindex);
					glw.setProgramParameters(null,								// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.scale,						// layerScale
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(this.active_effect_types[0].shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
				}
				glw.setRenderingToTexture(null);				// to backbuffer
				glw.setOpacity(1);
				glw.setTexture(this.runtime.layout_tex);
				glw.setAlphaBlend();
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.width / 2;
				var halfh = this.runtime.height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.renderEffectChain(glw, null, null, null);
			}
		}
	};
	Layout.prototype.getRenderTarget = function()
	{
		return (this.active_effect_types.length > 0 ||
				this.runtime.uses_background_blending ||
				!this.runtime.fullscreenScalingQuality) ? this.runtime.layout_tex : null;
	};
	Layout.prototype.getMinLayerScale = function ()
	{
		var m = this.layers[0].getScale();
		var i, len, l;
		for (i = 1, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.parallaxX === 0 && l.parallaxY === 0)
				continue;
			if (l.getScale() < m)
				m = l.getScale();
		}
		return m;
	};
	Layout.prototype.scrollToX = function (x)
	{
		if (!this.unbounded_scrolling)
		{
			var widthBoundary = (this.runtime.draw_width * (1 / this.getMinLayerScale()) / 2);
			if (x > this.width - widthBoundary)
				x = this.width - widthBoundary;
			if (x < widthBoundary)
				x = widthBoundary;
		}
		if (this.scrollX !== x)
		{
			this.scrollX = x;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.scrollToY = function (y)
	{
		if (!this.unbounded_scrolling)
		{
			var heightBoundary = (this.runtime.draw_height * (1 / this.getMinLayerScale()) / 2);
			if (y > this.height - heightBoundary)
				y = this.height - heightBoundary;
			if (y < heightBoundary)
				y = heightBoundary;
		}
		if (this.scrollY !== y)
		{
			this.scrollY = y;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.boundScrolling = function ()
	{
		this.scrollToX(this.scrollX);
		this.scrollToY(this.scrollY);
	};
	Layout.prototype.renderEffectChain = function (glw, layer, inst, rendertarget)
	{
		var active_effect_types = inst ?
							inst.active_effect_types :
							layer ?
								layer.active_effect_types :
								this.active_effect_types;
		var layerScale = inst ? inst.layer.getScale() :
							layer ? layer.getScale() : 1;
		var fx_tex = this.runtime.fx_tex;
		var i, len, last, temp, fx_index = 0, other_fx_index = 1;
		var y, h;
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var halfw = windowWidth / 2;
		var halfh = windowHeight / 2;
		var rcTex = layer ? layer.rcTex : this.rcTex;
		var rcTex2 = layer ? layer.rcTex2 : this.rcTex2;
		var screenleft = 0, clearleft = 0;
		var screentop = 0, cleartop = 0;
		var screenright = windowWidth, clearright = windowWidth;
		var screenbottom = windowHeight, clearbottom = windowHeight;
		var boxExtendHorizontal = 0;
		var boxExtendVertical = 0;
		var inst_layer_angle = inst ? inst.layer.getAngle() : 0;
		if (inst)
		{
			for (i = 0, len = active_effect_types.length; i < len; i++)
			{
				boxExtendHorizontal += glw.getProgramBoxExtendHorizontal(active_effect_types[i].shaderindex);
				boxExtendVertical += glw.getProgramBoxExtendVertical(active_effect_types[i].shaderindex);
			}
			var bbox = inst.bbox;
			screenleft = layer.layerToCanvas(bbox.left, bbox.top, true, true);
			screentop = layer.layerToCanvas(bbox.left, bbox.top, false, true);
			screenright = layer.layerToCanvas(bbox.right, bbox.bottom, true, true);
			screenbottom = layer.layerToCanvas(bbox.right, bbox.bottom, false, true);
			if (inst_layer_angle !== 0)
			{
				var screentrx = layer.layerToCanvas(bbox.right, bbox.top, true, true);
				var screentry = layer.layerToCanvas(bbox.right, bbox.top, false, true);
				var screenblx = layer.layerToCanvas(bbox.left, bbox.bottom, true, true);
				var screenbly = layer.layerToCanvas(bbox.left, bbox.bottom, false, true);
				temp = cr.min(screenleft, screenright, screentrx, screenblx);
				screenright = cr.max(screenleft, screenright, screentrx, screenblx);
				screenleft = temp;
				temp = cr.min(screentop, screenbottom, screentry, screenbly);
				screenbottom = cr.max(screentop, screenbottom, screentry, screenbly);
				screentop = temp;
			}
			screenleft -= boxExtendHorizontal;
			screentop -= boxExtendVertical;
			screenright += boxExtendHorizontal;
			screenbottom += boxExtendVertical;
			rcTex2.left = screenleft / windowWidth;
			rcTex2.top = 1 - screentop / windowHeight;
			rcTex2.right = screenright / windowWidth;
			rcTex2.bottom = 1 - screenbottom / windowHeight;
			clearleft = screenleft = cr.floor(screenleft);
			cleartop = screentop = cr.floor(screentop);
			clearright = screenright = cr.ceil(screenright);
			clearbottom = screenbottom = cr.ceil(screenbottom);
			clearleft -= boxExtendHorizontal;
			cleartop -= boxExtendVertical;
			clearright += boxExtendHorizontal;
			clearbottom += boxExtendVertical;
			if (screenleft < 0)					screenleft = 0;
			if (screentop < 0)					screentop = 0;
			if (screenright > windowWidth)		screenright = windowWidth;
			if (screenbottom > windowHeight)	screenbottom = windowHeight;
			if (clearleft < 0)					clearleft = 0;
			if (cleartop < 0)					cleartop = 0;
			if (clearright > windowWidth)		clearright = windowWidth;
			if (clearbottom > windowHeight)		clearbottom = windowHeight;
			rcTex.left = screenleft / windowWidth;
			rcTex.top = 1 - screentop / windowHeight;
			rcTex.right = screenright / windowWidth;
			rcTex.bottom = 1 - screenbottom / windowHeight;
		}
		else
		{
			rcTex.left = rcTex2.left = 0;
			rcTex.top = rcTex2.top = 0;
			rcTex.right = rcTex2.right = 1;
			rcTex.bottom = rcTex2.bottom = 1;
		}
		var pre_draw = (inst && (((inst.angle || inst_layer_angle) && glw.programUsesDest(active_effect_types[0].shaderindex)) || boxExtendHorizontal !== 0 || boxExtendVertical !== 0 || inst.opacity !== 1 || inst.type.plugin.must_predraw)) || (layer && !inst && layer.opacity !== 1);
		glw.setAlphaBlend();
		if (pre_draw)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(0);
			glw.setRenderingToTexture(fx_tex[fx_index]);
			h = clearbottom - cleartop;
			y = (windowHeight - cleartop) - h;
			glw.clearRect(clearleft, y, clearright - clearleft, h);
			if (inst)
			{
				inst.drawGL(glw);
			}
			else
			{
				glw.setTexture(this.runtime.layer_tex);
				glw.setOpacity(layer.opacity);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			}
			rcTex2.left = rcTex2.top = 0;
			rcTex2.right = rcTex2.bottom = 1;
			if (inst)
			{
				temp = rcTex.top;
				rcTex.top = rcTex.bottom;
				rcTex.bottom = temp;
			}
			fx_index = 1;
			other_fx_index = 0;
		}
		glw.setOpacity(1);
		var last = active_effect_types.length - 1;
		var post_draw = glw.programUsesCrossSampling(active_effect_types[last].shaderindex) ||
						(!layer && !inst && !this.runtime.fullscreenScalingQuality);
		var etindex = 0;
		for (i = 0, len = active_effect_types.length; i < len; i++)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(active_effect_types[i].shaderindex);
			etindex = active_effect_types[i].index;
			if (glw.programIsAnimated(active_effect_types[i].shaderindex))
				this.runtime.redraw = true;
			if (i == 0 && !pre_draw)
			{
				glw.setRenderingToTexture(fx_tex[fx_index]);
				h = clearbottom - cleartop;
				y = (windowHeight - cleartop) - h;
				glw.clearRect(clearleft, y, clearright - clearleft, h);
				if (inst)
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / inst.width,				// pixelWidth
											 1.0 / inst.height,				// pixelHeight
											 rcTex2.left, rcTex2.top,		// destStart
											 rcTex2.right, rcTex2.bottom,	// destEnd
											 layerScale,
											 inst.effect_params[etindex]);	// fx params
					inst.drawGL(glw);
				}
				else
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / windowWidth,				// pixelWidth
											 1.0 / windowHeight,			// pixelHeight
											 0.0, 0.0,						// destStart
											 1.0, 1.0,						// destEnd
											 layerScale,
											 layer ?						// fx params
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
					glw.setTexture(layer ? this.runtime.layer_tex : this.runtime.layout_tex);
					glw.resetModelView();
					glw.translate(-halfw, -halfh);
					glw.updateModelView();
					glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				}
				rcTex2.left = rcTex2.top = 0;
				rcTex2.right = rcTex2.bottom = 1;
				if (inst && !post_draw)
				{
					temp = screenbottom;
					screenbottom = screentop;
					screentop = temp;
				}
			}
			else
			{
				glw.setProgramParameters(rendertarget,						// backTex
										 1.0 / windowWidth,					// pixelWidth
										 1.0 / windowHeight,				// pixelHeight
										 rcTex2.left, rcTex2.top,			// destStart
										 rcTex2.right, rcTex2.bottom,		// destEnd
										 layerScale,
										 inst ?								// fx params
											inst.effect_params[etindex] :
											layer ?
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
				glw.setTexture(null);
				if (i === last && !post_draw)
				{
					if (inst)
						glw.setBlend(inst.srcBlend, inst.destBlend);
					else if (layer)
						glw.setBlend(layer.srcBlend, layer.destBlend);
					glw.setRenderingToTexture(rendertarget);
				}
				else
				{
					glw.setRenderingToTexture(fx_tex[fx_index]);
					h = clearbottom - cleartop;
					y = (windowHeight - cleartop) - h;
					glw.clearRect(clearleft, y, clearright - clearleft, h);
				}
				glw.setTexture(fx_tex[other_fx_index]);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				if (i === last && !post_draw)
					glw.setTexture(null);
			}
			fx_index = (fx_index === 0 ? 1 : 0);
			other_fx_index = (fx_index === 0 ? 1 : 0);		// will be opposite to fx_index since it was just assigned
		}
		if (post_draw)
		{
			glw.switchProgram(0);
			if (inst)
				glw.setBlend(inst.srcBlend, inst.destBlend);
			else if (layer)
				glw.setBlend(layer.srcBlend, layer.destBlend);
			else
			{
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
					halfw = this.runtime.width / 2;
					halfh = this.runtime.height / 2;
					screenleft = 0;
					screentop = 0;
					screenright = this.runtime.width;
					screenbottom = this.runtime.height;
				}
			}
			glw.setRenderingToTexture(rendertarget);
			glw.setTexture(fx_tex[other_fx_index]);
			glw.resetModelView();
			glw.translate(-halfw, -halfh);
			glw.updateModelView();
			if (inst && active_effect_types.length === 1 && !pre_draw)
				glw.quadTex(screenleft, screentop, screenright, screentop, screenright, screenbottom, screenleft, screenbottom, rcTex);
			else
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			glw.setTexture(null);
		}
	};
	Layout.prototype.getLayerBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].sid === sid_)
				return this.layers[i];
		}
		return null;
	};
	Layout.prototype.saveToJSON = function ()
	{
		var i, len, layer, et;
		var o = {
			"sx": this.scrollX,
			"sy": this.scrollY,
			"s": this.scale,
			"a": this.angle,
			"w": this.width,
			"h": this.height,
			"fv": this.first_visit,			// added r127
			"persist": this.persist_data,
			"fx": [],
			"layers": {}
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			o["layers"][layer.sid.toString()] = layer.saveToJSON();
		}
		return o;
	};
	Layout.prototype.loadFromJSON = function (o)
	{
		var i, len, fx, p, layer;
		this.scrollX = o["sx"];
		this.scrollY = o["sy"];
		this.scale = o["s"];
		this.angle = o["a"];
		this.width = o["w"];
		this.height = o["h"];
		this.persist_data = o["persist"];
		if (typeof o["fv"] !== "undefined")
			this.first_visit = o["fv"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		var olayers = o["layers"];
		for (p in olayers)
		{
			if (olayers.hasOwnProperty(p))
			{
				layer = this.getLayerBySid(parseInt(p, 10));
				if (!layer)
					continue;		// must've gone missing
				layer.loadFromJSON(olayers[p]);
			}
		}
	};
	cr.layout = Layout;
	function Layer(layout, m)
	{
		this.layout = layout;
		this.runtime = layout.runtime;
		this.instances = [];        // running instances
		this.scale = 1.0;
		this.angle = 0;
		this.disableAngle = false;
		this.tmprect = new cr.rect(0, 0, 0, 0);
		this.tmpquad = new cr.quad();
		this.viewLeft = 0;
		this.viewRight = 0;
		this.viewTop = 0;
		this.viewBottom = 0;
		this.zindices_stale = false;
		this.name = m[0];
		this.index = m[1];
		this.sid = m[2];
		this.visible = m[3];		// initially visible
		this.background_color = m[4];
		this.transparent = m[5];
		this.parallaxX = m[6];
		this.parallaxY = m[7];
		this.opacity = m[8];
		this.forceOwnTexture = m[9];
		this.zoomRate = m[10];
		this.blend_mode = m[11];
		this.effect_fallback = m[12];
		this.compositeOp = "source-over";
		this.srcBlend = 0;
		this.destBlend = 0;
		this.render_offscreen = false;
		var im = m[13];
		var i, len;
		this.initial_instances = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_instances.push(inst);
			if (this.layout.initial_types.indexOf(type) === -1)
				this.layout.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[14].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[14][i][0],
				name: m[14][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[14][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
	};
	Layer.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layer.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	Layer.prototype.createInitialInstances = function ()
	{
		var i, k, len, inst, initial_inst, type, keep, hasPersistBehavior;
		for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++)
		{
			initial_inst = this.initial_instances[i];
			type = this.runtime.types_by_index[initial_inst[1]];
;
			hasPersistBehavior = this.runtime.typeHasPersistBehavior(type);
			keep = true;
			if (!hasPersistBehavior || this.layout.first_visit)
			{
				inst = this.runtime.createInstanceFromInit(initial_inst, this, true);
;
				created_instances.push(inst);
				if (inst.type.global)
					keep = false;
			}
			if (keep)
			{
				this.initial_instances[k] = this.initial_instances[i];
				k++;
			}
		}
		this.initial_instances.length = k;
		this.runtime.ClearDeathRow();		// flushes creation row so IIDs will be correct
		if (!this.runtime.glwrap && this.effect_types.length)	// no WebGL renderer and shaders used
			this.blend_mode = this.effect_fallback;				// use fallback blend mode
		this.compositeOp = cr.effectToCompositeOp(this.blend_mode);
		if (this.runtime.gl)
			cr.setGLBlend(this, this.blend_mode, this.runtime.gl);
	};
	Layer.prototype.updateZIndices = function ()
	{
		if (!this.zindices_stale)
			return;
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
;
;
			this.instances[i].zindex = i;
		}
		this.zindices_stale = false;
	};
	Layer.prototype.getScale = function (include_aspect)
	{
		return this.getNormalScale() * (this.runtime.fullscreenScalingQuality || include_aspect ? this.runtime.aspect_scale : 1);
	};
	Layer.prototype.getNormalScale = function ()
	{
		return ((this.scale * this.layout.scale) - 1) * this.zoomRate + 1;
	};
	Layer.prototype.getAngle = function ()
	{
		if (this.disableAngle)
			return 0;
		return cr.clamp_angle(this.layout.angle + this.angle);
	};
	Layer.prototype.draw = function (ctx)
	{
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.blend_mode !== 0);
		var layer_canvas = this.runtime.canvas;
		var layer_ctx = ctx;
		var ctx_changed = false;
		ctx.globalAlpha = 1;
		ctx.globalCompositeOperation = "source-over";
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_canvas)
			{
				this.runtime.layer_canvas = document.createElement("canvas");
;
				layer_canvas = this.runtime.layer_canvas;
				layer_canvas.width = this.runtime.draw_width;
				layer_canvas.height = this.runtime.draw_height;
				this.runtime.layer_ctx = layer_canvas.getContext("2d");
;
				ctx_changed = true;
			}
			layer_canvas = this.runtime.layer_canvas;
			layer_ctx = this.runtime.layer_ctx;
			if (layer_canvas.width !== this.runtime.draw_width)
			{
				layer_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layer_canvas.height !== this.runtime.draw_height)
			{
				layer_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				layer_ctx["webkitImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["mozImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["msImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["imageSmoothingEnabled"] = this.runtime.linearSampling;
			}
			if (this.transparent)
				layer_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		if (!this.transparent)
		{
			layer_ctx.fillStyle = "rgb(" + this.background_color[0] + "," + this.background_color[1] + "," + this.background_color[2] + ")";
			layer_ctx.fillRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, layer_ctx);
		var myscale = this.getScale();
		layer_ctx.scale(myscale, myscale);
		layer_ctx.translate(-px, -py);
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			layer_ctx.globalCompositeOperation = inst.compositeOp;
			inst.draw(layer_ctx);
		}
		layer_ctx.restore();
		if (this.render_offscreen)
		{
			ctx.globalCompositeOperation = this.compositeOp;
			ctx.globalAlpha = this.opacity;
			ctx.drawImage(layer_canvas, 0, 0);
		}
	};
	Layer.prototype.rotateViewport = function (px, py, ctx)
	{
		var myscale = this.getScale();
		this.viewLeft = px;
		this.viewTop = py;
		this.viewRight = px + (this.runtime.draw_width * (1 / myscale));
		this.viewBottom = py + (this.runtime.draw_height * (1 / myscale));
		var myAngle = this.getAngle();
		if (myAngle !== 0)
		{
			if (ctx)
			{
				ctx.translate(this.runtime.draw_width / 2, this.runtime.draw_height / 2);
				ctx.rotate(-myAngle);
				ctx.translate(this.runtime.draw_width / -2, this.runtime.draw_height / -2);
			}
			this.tmprect.set(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom);
			this.tmprect.offset((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			this.tmpquad.set_from_rotated_rect(this.tmprect, myAngle);
			this.tmpquad.bounding_box(this.tmprect);
			this.tmprect.offset((this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2);
			this.viewLeft = this.tmprect.left;
			this.viewTop = this.tmprect.top;
			this.viewRight = this.tmprect.right;
			this.viewBottom = this.tmprect.bottom;
		}
	}
	Layer.prototype.drawGL = function (glw)
	{
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var shaderindex = 0;
		var etindex = 0;
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.active_effect_types.length > 0 || this.blend_mode !== 0);
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.draw_width || this.runtime.layer_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
			if (this.transparent)
				glw.clear(0, 0, 0, 0);
		}
		if (!this.transparent)
		{
			glw.clear(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
		}
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, null);
		var myscale = this.getScale();
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			if (inst.uses_shaders)
			{
				shaderindex = inst.active_effect_types[0].shaderindex;
				etindex = inst.active_effect_types[0].index;
				if (inst.active_effect_types.length === 1 && !glw.programUsesCrossSampling(shaderindex) &&
					!glw.programExtendsBox(shaderindex) && ((!inst.angle && !inst.layer.getAngle()) || !glw.programUsesDest(shaderindex)) &&
					inst.opacity === 1 && !inst.type.plugin.must_predraw)
				{
					glw.switchProgram(shaderindex);
					glw.setBlend(inst.srcBlend, inst.destBlend);
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
					var destStartX = 0, destStartY = 0, destEndX = 0, destEndY = 0;
					if (glw.programUsesDest(shaderindex))
					{
						var bbox = inst.bbox;
						var screenleft = this.layerToCanvas(bbox.left, bbox.top, true, true);
						var screentop = this.layerToCanvas(bbox.left, bbox.top, false, true);
						var screenright = this.layerToCanvas(bbox.right, bbox.bottom, true, true);
						var screenbottom = this.layerToCanvas(bbox.right, bbox.bottom, false, true);
						destStartX = screenleft / windowWidth;
						destStartY = 1 - screentop / windowHeight;
						destEndX = screenright / windowWidth;
						destEndY = 1 - screenbottom / windowHeight;
					}
					glw.setProgramParameters(this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget(), // backTex
											 1.0 / inst.width,			// pixelWidth
											 1.0 / inst.height,			// pixelHeight
											 destStartX, destStartY,
											 destEndX, destEndY,
											 this.getScale(),
											 inst.effect_params[etindex]);
					inst.drawGL(glw);
				}
				else
				{
					this.layout.renderEffectChain(glw, this, inst, this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget());
					glw.resetModelView();
					glw.scale(myscale, myscale);
					glw.rotateZ(-this.getAngle());
					glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
					glw.updateModelView();
				}
			}
			else
			{
				glw.switchProgram(0);		// un-set any previously set shader
				glw.setBlend(inst.srcBlend, inst.destBlend);
				inst.drawGL(glw);
			}
		}
		if (this.render_offscreen)
		{
			shaderindex = this.active_effect_types.length ? this.active_effect_types[0].shaderindex : 0;
			etindex = this.active_effect_types.length ? this.active_effect_types[0].index : 0;
			if (this.active_effect_types.length === 0 || (this.active_effect_types.length === 1 &&
				!glw.programUsesCrossSampling(shaderindex) && this.opacity === 1))
			{
				if (this.active_effect_types.length === 1)
				{
					glw.switchProgram(shaderindex);
					glw.setProgramParameters(this.layout.getRenderTarget(),		// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.getScale(),					// layerScale
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				glw.setRenderingToTexture(this.layout.getRenderTarget());
				glw.setOpacity(this.opacity);
				glw.setTexture(this.runtime.layer_tex);
				glw.setBlend(this.srcBlend, this.destBlend);
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.draw_width / 2;
				var halfh = this.runtime.draw_height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.layout.renderEffectChain(glw, this, null, this.layout.getRenderTarget());
			}
		}
	};
	Layer.prototype.canvasToLayer = function (ptx, pty, getx, using_draw_area)
	{
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina)
		{
			ptx *= multiplier;
			pty *= multiplier;
		}
		var ox = (this.runtime.original_width / 2);
		var oy = (this.runtime.original_height / 2);
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x += ptx * invScale;
		y += pty * invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= this.layout.scrollX;
			y -= this.layout.scrollY;
			var cosa = Math.cos(a);
			var sina = Math.sin(a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += this.layout.scrollX;
			y += this.layout.scrollY;
		}
		return getx ? x : y;
	};
	Layer.prototype.layerToCanvas = function (ptx, pty, getx, using_draw_area)
	{
		var a = this.getAngle();
		if (a !== 0)
		{
			ptx -= this.layout.scrollX;
			pty -= this.layout.scrollY;
			var cosa = Math.cos(-a);
			var sina = Math.sin(-a);
			var x_temp = (ptx * cosa) - (pty * sina);
			pty = (pty * cosa) + (ptx * sina);
			ptx = x_temp;
			ptx += this.layout.scrollX;
			pty += this.layout.scrollY;
		}
		var ox = (this.runtime.original_width / 2);
		var oy = (this.runtime.original_height / 2);
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x = (ptx - x) / invScale;
		y = (pty - y) / invScale;
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina)
		{
			x /= multiplier;
			y /= multiplier;
		}
		return getx ? x : y;
	};
	Layer.prototype.rotatePt = function (x_, y_, getx)
	{
		if (this.getAngle() === 0)
			return getx ? x_ : y_;
		var nx = this.layerToCanvas(x_, y_, true);
		var ny = this.layerToCanvas(x_, y_, false);
		this.disableAngle = true;
		var px = this.canvasToLayer(nx, ny, true);
		var py = this.canvasToLayer(nx, ny, true);
		this.disableAngle = false;
		return getx ? px : py;
	};
	Layer.prototype.saveToJSON = function ()
	{
		var i, len, et;
		var o = {
			"s": this.scale,
			"a": this.angle,
			"vl": this.viewLeft,
			"vt": this.viewTop,
			"vr": this.viewRight,
			"vb": this.viewBottom,
			"v": this.visible,
			"bc": this.background_color,
			"t": this.transparent,
			"px": this.parallaxX,
			"py": this.parallaxY,
			"o": this.opacity,
			"zr": this.zoomRate,
			"fx": [],
			"instances": []
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		return o;
	};
	function sortInstanceByZIndex(a, b)
	{
		return a.zindex - b.zindex;
	};
	Layer.prototype.loadFromJSON = function (o)
	{
		var i, len, p, inst, fx;
		this.scale = o["s"];
		this.angle = o["a"];
		this.viewLeft = o["vl"];
		this.viewTop = o["vt"];
		this.viewRight = o["vr"];
		this.viewBottom = o["vb"];
		this.visible = o["v"];
		this.background_color = o["bc"];
		this.transparent = o["t"];
		this.parallaxX = o["px"];
		this.parallaxY = o["py"];
		this.opacity = o["o"];
		this.zoomRate = o["zr"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		this.instances.sort(sortInstanceByZIndex);
		this.zindices_stale = true;
	};
	cr.layer = Layer;
}());
;
(function()
{
	var allUniqueSolModifiers = [];
	function testSolsMatch(arr1, arr2)
	{
		var i, len = arr1.length;
		switch (len) {
		case 0:
			return true;
		case 1:
			return arr1[0] === arr2[0];
		case 2:
			return arr1[0] === arr2[0] && arr1[1] === arr2[1];
		default:
			for (i = 0; i < len; i++)
			{
				if (arr1[i] !== arr2[i])
					return false;
			}
			return true;
		}
	};
	function solArraySorter(t1, t2)
	{
		return t1.index - t2.index;
	};
	function findMatchingSolModifier(arr)
	{
		var i, len, u, temp, subarr;
		if (arr.length === 2)
		{
			if (arr[0].index > arr[1].index)
			{
				temp = arr[0];
				arr[0] = arr[1];
				arr[1] = temp;
			}
		}
		else if (arr.length > 2)
			arr.sort(solArraySorter);		// so testSolsMatch compares in same order
		if (arr.length >= allUniqueSolModifiers.length)
			allUniqueSolModifiers.length = arr.length + 1;
		if (!allUniqueSolModifiers[arr.length])
			allUniqueSolModifiers[arr.length] = [];
		subarr = allUniqueSolModifiers[arr.length];
		for (i = 0, len = subarr.length; i < len; i++)
		{
			u = subarr[i];
			if (testSolsMatch(arr, u))
				return u;
		}
		subarr.push(arr);
		return arr;
	};
	function EventSheet(runtime, m)
	{
		this.runtime = runtime;
		this.triggers = {};
		this.fasttriggers = {};
        this.hasRun = false;
        this.includes = new cr.ObjectSet(); // all event sheets included by this sheet, at first-level indirection only
		this.name = m[0];
		var em = m[1];		// events model
		this.events = [];       // triggers won't make it to this array
		var i, len;
		for (i = 0, len = em.length; i < len; i++)
			this.init_event(em[i], null, this.events);
	};
    EventSheet.prototype.toString = function ()
    {
        return this.name;
    };
	EventSheet.prototype.init_event = function (m, parent, nontriggers)
	{
		switch (m[0]) {
		case 0:	// event block
		{
			var block = new cr.eventblock(this, parent, m);
			cr.seal(block);
			if (block.orblock)
			{
				nontriggers.push(block);
				var i, len;
				for (i = 0, len = block.conditions.length; i < len; i++)
				{
					if (block.conditions[i].trigger)
						this.init_trigger(block, i);
				}
			}
			else
			{
				if (block.is_trigger())
					this.init_trigger(block, 0);
				else
					nontriggers.push(block);
			}
			break;
		}
		case 1: // variable
		{
			var v = new cr.eventvariable(this, parent, m);
			cr.seal(v);
			nontriggers.push(v);
			break;
		}
        case 2:	// include
        {
            var inc = new cr.eventinclude(this, parent, m);
			cr.seal(inc);
            nontriggers.push(inc);
			break;
        }
		default:
;
		}
	};
	EventSheet.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			this.events[i].postInit(i < len - 1 && this.events[i + 1].is_else_block);
		}
	};
	EventSheet.prototype.run = function (from_include)
	{
		if (!this.runtime.resuming_breakpoint)
		{
			this.hasRun = true;
			if (!from_include)
				this.runtime.isRunningEvents = true;
		}
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			var ev = this.events[i];
			ev.run();
				this.runtime.clearSol(ev.solModifiers);
				if (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length)
					this.runtime.ClearDeathRow();
		}
			if (!from_include)
				this.runtime.isRunningEvents = false;
	};
	EventSheet.prototype.init_trigger = function (trig, index)
	{
		if (!trig.orblock)
			this.runtime.triggers_to_postinit.push(trig);	// needs to be postInit'd later
		var i, len;
		var cnd = trig.conditions[index];
		var type_name;
		if (cnd.type)
			type_name = cnd.type.name;
		else
			type_name = "system";
		var fasttrigger = cnd.fasttrigger;
		var triggers = (fasttrigger ? this.fasttriggers : this.triggers);
		if (!triggers[type_name])
			triggers[type_name] = [];
		var obj_entry = triggers[type_name];
		var method = cnd.func;
		if (fasttrigger)
		{
			if (!cnd.parameters.length)				// no parameters
				return;
			var firstparam = cnd.parameters[0];
			if (firstparam.type !== 1 ||			// not a string param
				firstparam.expression.type !== 2)	// not a string literal node
			{
				return;
			}
			var fastevs;
			var firstvalue = firstparam.expression.value.toLowerCase();
			var i, len;
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					fastevs = obj_entry[i].evs;
					if (!fastevs[firstvalue])
						fastevs[firstvalue] = [[trig, index]];
					else
						fastevs[firstvalue].push([trig, index]);
					return;
				}
			}
			fastevs = {};
			fastevs[firstvalue] = [[trig, index]];
			obj_entry.push({ method: method, evs: fastevs });
		}
		else
		{
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					obj_entry[i].evs.push([trig, index]);
					return;
				}
			}
			obj_entry.push({ method: method, evs: [[trig, index]]});
		}
	};
	cr.eventsheet = EventSheet;
	function Selection(type)
	{
		this.type = type;
		this.instances = [];        // subset of picked instances
		this.else_instances = [];	// subset of unpicked instances
		this.select_all = true;
	};
	Selection.prototype.hasObjects = function ()
	{
		if (this.select_all)
			return this.type.instances.length;
		else
			return this.instances.length;
	};
	Selection.prototype.getObjects = function ()
	{
		if (this.select_all)
			return this.type.instances;
		else
			return this.instances;
	};
	/*
	Selection.prototype.ensure_picked = function (inst, skip_siblings)
	{
		var i, len;
		var orblock = inst.runtime.getCurrentEventStack().current_event.orblock;
		if (this.select_all)
		{
			this.select_all = false;
			if (orblock)
			{
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				cr.arrayFindRemove(this.else_instances, inst);
			}
			this.instances.length = 1;
			this.instances[0] = inst;
		}
		else
		{
			if (orblock)
			{
				i = this.else_instances.indexOf(inst);
				if (i !== -1)
				{
					this.instances.push(this.else_instances[i]);
					this.else_instances.splice(i, 1);
				}
			}
			else
			{
				if (this.instances.indexOf(inst) === -1)
					this.instances.push(inst);
			}
		}
		if (!skip_siblings)
		{
		}
	};
	*/
	Selection.prototype.pick_one = function (inst)
	{
		if (!inst)
			return;
		if (inst.runtime.getCurrentEventStack().current_event.orblock)
		{
			if (this.select_all)
			{
				this.instances.length = 0;
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				this.select_all = false;
			}
			var i = this.else_instances.indexOf(inst);
			if (i !== -1)
			{
				this.instances.push(this.else_instances[i]);
				this.else_instances.splice(i, 1);
			}
		}
		else
		{
			this.select_all = false;
			this.instances.length = 1;
			this.instances[0] = inst;
		}
	};
	cr.selection = Selection;
	function EventBlock(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.solModifiersIncludingParents = [];
		this.solWriterAfterCnds = false;	// block does not change SOL after running its conditions
		this.group = false;					// is group of events
		this.initially_activated = false;	// if a group, is active on startup
		this.toplevelevent = false;			// is an event block parented only by a top-level group
		this.toplevelgroup = false;			// is parented only by other groups or is top-level (i.e. not in a subevent)
		this.has_else_block = false;		// is followed by else
;
		this.conditions = [];
		this.actions = [];
		this.subevents = [];
        if (m[1])
        {
			this.group_name = m[1][1].toLowerCase();
			this.group = true;
			this.initially_activated = !!m[1][0];
			this.runtime.allGroups.push(this);
            this.runtime.activeGroups[(/*this.sheet.name + "|" + */this.group_name).toLowerCase()] = this.initially_activated;
        }
		else
		{
			this.group_name = "";
			this.group = false;
			this.initially_activated = false;
		}
		this.orblock = m[2];
		this.sid = m[4];
		if (!this.group)
			this.runtime.blocksBySid[this.sid.toString()] = this;
		var i, len;
		var cm = m[5];
		for (i = 0, len = cm.length; i < len; i++)
		{
			var cnd = new cr.condition(this, cm[i]);
			cnd.index = i;
			cr.seal(cnd);
			this.conditions.push(cnd);
			/*
			if (cnd.is_logical())
				this.is_logical = true;
			if (cnd.type && !cnd.type.plugin.singleglobal && this.cndReferences.indexOf(cnd.type) === -1)
				this.cndReferences.push(cnd.type);
			*/
			this.addSolModifier(cnd.type);
		}
		var am = m[6];
		for (i = 0, len = am.length; i < len; i++)
		{
			var act = new cr.action(this, am[i]);
			act.index = i;
			cr.seal(act);
			this.actions.push(act);
		}
		if (m.length === 8)
		{
			var em = m[7];
			for (i = 0, len = em.length; i < len; i++)
				this.sheet.init_event(em[i], this, this.subevents);
		}
		this.is_else_block = false;
		if (this.conditions.length)
		{
			this.is_else_block = (this.conditions[0].type == null && this.conditions[0].func == cr.system_object.prototype.cnds.Else);
		}
	};
	EventBlock.prototype.postInit = function (hasElse/*, prevBlock_*/)
	{
		var i, len;
		var p = this.parent;
		if (this.group)
		{
			this.toplevelgroup = true;
			while (p)
			{
				if (!p.group)
				{
					this.toplevelgroup = false;
					break;
				}
				p = p.parent;
			}
		}
		this.toplevelevent = !this.is_trigger() && (!this.parent || (this.parent.group && this.parent.toplevelgroup));
		this.has_else_block = !!hasElse;
		this.solModifiersIncludingParents = this.solModifiers.slice(0);
		p = this.parent;
		while (p)
		{
			for (i = 0, len = p.solModifiers.length; i < len; i++)
				this.addParentSolModifier(p.solModifiers[i]);
			p = p.parent;
		}
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		this.solModifiersIncludingParents = findMatchingSolModifier(this.solModifiersIncludingParents);
		var i, len/*, s*/;
		for (i = 0, len = this.conditions.length; i < len; i++)
			this.conditions[i].postInit();
		for (i = 0, len = this.actions.length; i < len; i++)
			this.actions[i].postInit();
		for (i = 0, len = this.subevents.length; i < len; i++)
		{
			this.subevents[i].postInit(i < len - 1 && this.subevents[i + 1].is_else_block);
		}
		/*
		if (this.is_else_block && this.prev_block)
		{
			for (i = 0, len = this.prev_block.solModifiers.length; i < len; i++)
			{
				s = this.prev_block.solModifiers[i];
				if (this.solModifiers.indexOf(s) === -1)
					this.solModifiers.push(s);
			}
		}
		*/
	}
	function addSolModifierToList(type, arr)
	{
		var i, len, t;
		if (!type)
			return;
		if (arr.indexOf(type) === -1)
			arr.push(type);
		if (type.is_contained)
		{
			for (i = 0, len = type.container.length; i < len; i++)
			{
				t = type.container[i];
				if (type === t)
					continue;		// already handled
				if (arr.indexOf(t) === -1)
					arr.push(t);
			}
		}
	};
	EventBlock.prototype.addSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiers);
	};
	EventBlock.prototype.addParentSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiersIncludingParents);
	};
	EventBlock.prototype.setSolWriterAfterCnds = function ()
	{
		this.solWriterAfterCnds = true;
		if (this.parent)
			this.parent.setSolWriterAfterCnds();
	};
	EventBlock.prototype.is_trigger = function ()
	{
		if (!this.conditions.length)    // no conditions
			return false;
		else
			return this.conditions[0].trigger;
	};
	EventBlock.prototype.run = function ()
	{
		var i, len, any_true = false, cnd_result;
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
			if (!this.is_else_block)
				evinfo.else_branch_ran = false;
		if (this.orblock)
		{
			if (this.conditions.length === 0)
				any_true = true;		// be sure to run if empty block
				evinfo.cndindex = 0
			for (len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (this.conditions[evinfo.cndindex].trigger)		// skip triggers when running OR block
					continue;
				cnd_result = this.conditions[evinfo.cndindex].run();
				if (cnd_result)			// make sure all conditions run and run if any were true
					any_true = true;
			}
			evinfo.last_event_true = any_true;
			if (any_true)
				this.run_actions_and_subevents();
		}
		else
		{
				evinfo.cndindex = 0
			for (len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				cnd_result = this.conditions[evinfo.cndindex].run();
				if (!cnd_result)    // condition failed
				{
					evinfo.last_event_true = false;
					if (this.toplevelevent && (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length))
						this.runtime.ClearDeathRow();
					return;		// bail out now
				}
			}
			evinfo.last_event_true = true;
			this.run_actions_and_subevents();
		}
		this.end_run(evinfo);
	};
	EventBlock.prototype.end_run = function (evinfo)
	{
		if (evinfo.last_event_true && this.has_else_block)
			evinfo.else_branch_ran = true;
		if (this.toplevelevent && (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length))
			this.runtime.ClearDeathRow();
	};
	EventBlock.prototype.run_orblocktrigger = function (index)
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (this.conditions[index].run())
		{
			this.run_actions_and_subevents();
			this.runtime.getCurrentEventStack().last_event_true = true;
		}
	};
	EventBlock.prototype.run_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.resume_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.run_subevents = function ()
	{
		if (!this.subevents.length)
			return;
		var i, len, subev, pushpop/*, skipped_pop = false, pop_modifiers = null*/;
		var last = this.subevents.length - 1;
			this.runtime.pushEventStack(this);
		if (this.solWriterAfterCnds)
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				subev = this.subevents[i];
					pushpop = (!this.toplevelgroup || (!this.group && i < last));
					if (pushpop)
						this.runtime.pushCopySol(subev.solModifiers);
				subev.run();
					if (pushpop)
						this.runtime.popSol(subev.solModifiers);
					else
						this.runtime.clearSol(subev.solModifiers);
			}
		}
		else
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				this.subevents[i].run();
			}
		}
			this.runtime.popEventStack();
	};
	EventBlock.prototype.run_pretrigger = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var any_true = false;
		var i, len;
		for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
		{
;
			if (this.conditions[evinfo.cndindex].run())
				any_true = true;
			else if (!this.orblock)			// condition failed (let OR blocks run all conditions anyway)
				return false;               // bail out
		}
		return this.orblock ? any_true : true;
	};
	EventBlock.prototype.retrigger = function ()
	{
		this.runtime.execcount++;
		var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
		var len;
		var evinfo = this.runtime.pushEventStack(this);
		if (!this.orblock)
		{
			for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					this.runtime.popEventStack();               // moving up level of recursion
					return false;                               // bail out
				}
			}
		}
		this.run_actions_and_subevents();
		this.runtime.popEventStack();
		return true;		// ran an iteration
	};
	EventBlock.prototype.isFirstConditionOfType = function (cnd)
	{
		var cndindex = cnd.index;
		if (cndindex === 0)
			return true;
		--cndindex;
		for ( ; cndindex >= 0; --cndindex)
		{
			if (this.conditions[cndindex].type === cnd.type)
				return false;
		}
		return true;
	};
	cr.eventblock = EventBlock;
	function Condition(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.func = m[1];
;
		this.trigger = (m[3] > 0);
		this.fasttrigger = (m[3] === 2);
		this.looping = m[4];
		this.inverted = m[5];
		this.isstatic = m[6];
		this.sid = m[7];
		this.runtime.cndsBySid[this.sid.toString()] = this;
		if (m[0] === -1)		// system object
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			if (this.isstatic)
				this.run = this.run_static;
			else
				this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
			if (this.block.parent)
				this.block.parent.setSolWriterAfterCnds();
		}
		if (this.fasttrigger)
			this.run = this.run_true;
		if (m.length === 10)
		{
			var i, len;
			var em = m[9];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Condition.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.parameters[i].postInit();
	};
	/*
	Condition.prototype.is_logical = function ()
	{
		return !this.type || this.type.plugin.singleglobal;
	};
	*/
	Condition.prototype.run_true = function ()
	{
		return true;
	};
	Condition.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
	};
	Condition.prototype.run_static = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get(i);
		var ret = this.func.apply(this.behaviortype ? this.behaviortype : this.type, this.results);
		this.type.applySolToContainer();
		return ret;
	};
	Condition.prototype.run_object = function ()
	{
		var i, j, leni, lenj, ret, met, inst, s, sol2;
		var sol = this.type.getCurrentSol();
		var is_orblock = this.block.orblock && !this.trigger;		// triggers in OR blocks need to work normally
		var offset = 0;
		var is_contained = this.type.is_contained;
		if (sol.select_all) {
			sol.instances.length = 0;       // clear contents
			sol.else_instances.length = 0;
			for (i = 0, leni = this.type.instances.length; i < leni; i++)
			{
				inst = this.type.instances[i];
;
				for (j = 0, lenj = this.parameters.length; j < lenj; j++)
					this.results[j] = this.parameters[j].get(i);        // default SOL index is current object
				if (this.beh_index > -1)
				{
					if (this.type.is_family)
					{
						offset = inst.type.family_beh_map[this.type.family_index];
					}
					ret = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
				}
				else
					ret = this.func.apply(inst, this.results);
				met = cr.xor(ret, this.inverted);
				if (met)
					sol.instances.push(inst);
				else if (is_orblock)					// in OR blocks, keep the instances not meeting the condition for subsequent testing
					sol.else_instances.push(inst);
			}
			if (this.type.finish)
				this.type.finish(true);
			sol.select_all = false;
			this.type.applySolToContainer();
			return sol.hasObjects();
		}
		else {
			var k = 0;
			var using_else_instances = (is_orblock && !this.block.isFirstConditionOfType(this));
			var arr = (using_else_instances ? sol.else_instances : sol.instances);
			var any_true = false;
			for (i = 0, leni = arr.length; i < leni; i++)
			{
				inst = arr[i];
;
				for (j = 0, lenj = this.parameters.length; j < lenj; j++)
					this.results[j] = this.parameters[j].get(i);        // default SOL index is current object
				if (this.beh_index > -1)
				{
					if (this.type.is_family)
					{
						offset = inst.type.family_beh_map[this.type.family_index];
					}
					ret = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
				}
				else
					ret = this.func.apply(inst, this.results);
				if (cr.xor(ret, this.inverted))
				{
					any_true = true;
					if (using_else_instances)
					{
						sol.instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances.push(s);
							}
						}
					}
					else
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances[k] = s;
							}
						}
						k++;
					}
				}
				else
				{
					if (using_else_instances)
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances[k] = s;
							}
						}
						k++;
					}
					else if (is_orblock)
					{
						sol.else_instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances.push(s);
							}
						}
					}
				}
			}
			arr.length = k;
			if (is_contained)
			{
				for (i = 0, leni = this.type.container.length; i < leni; i++)
				{
					sol2 = this.type.container[i].getCurrentSol();
					if (using_else_instances)
						sol2.else_instances.length = k;
					else
						sol2.instances.length = k;
				}
			}
			var pick_in_finish = any_true;		// don't pick in finish() if we're only doing the logic test below
			if (using_else_instances && !any_true)
			{
				for (i = 0, leni = sol.instances.length; i < leni; i++)
				{
					inst = sol.instances[i];
					for (j = 0, lenj = this.parameters.length; j < lenj; j++)
						this.results[j] = this.parameters[j].get(i);
					if (this.beh_index > -1)
						ret = this.func.apply(inst.behavior_insts[this.beh_index], this.results);
					else
						ret = this.func.apply(inst, this.results);
					if (cr.xor(ret, this.inverted))
					{
						any_true = true;
						break;		// got our flag, don't need to test any more
					}
				}
			}
			if (this.type.finish)
				this.type.finish(pick_in_finish || is_orblock);
			return is_orblock ? any_true : sol.hasObjects();
		}
	};
	cr.condition = Condition;
	function Action(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.func = m[1];
;
		if (m[0] === -1)	// system
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
		}
		this.sid = m[3];
		this.runtime.actsBySid[this.sid.toString()] = this;
		if (m.length === 6)
		{
			var i, len;
			var em = m[5];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Action.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.parameters[i].postInit();
	};
	Action.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return this.func.apply(this.runtime.system, this.results);
	};
	Action.prototype.run_object = function ()
	{
		var instances = this.type.getCurrentSol().getObjects();
		var i, j, leni, lenj, inst;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			inst = instances[i];
			for (j = 0, lenj = this.parameters.length; j < lenj; j++)
				this.results[j] = this.parameters[j].get(i);    // pass i to use as default SOL index
			if (this.beh_index > -1)
			{
				var offset = 0;
				if (this.type.is_family)
				{
					offset = inst.type.family_beh_map[this.type.family_index];
				}
				this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
			}
			else
				this.func.apply(inst, this.results);
		}
		return false;
	};
	cr.action = Action;
	var tempValues = [];
	var tempValuesPtr = -1;
	function Parameter(owner, m)
	{
		this.owner = owner;
		this.block = owner.block;
		this.sheet = owner.sheet;
		this.runtime = owner.runtime;
		this.type = m[0];
		this.expression = null;
		this.solindex = 0;
		this.combosel = 0;
		this.layout = null;
		this.key = 0;
		this.object = null;
		this.index = 0;
		this.varname = null;
		this.eventvar = null;
		this.fileinfo = null;
		this.subparams = null;
		this.variadicret = null;
		var i, len, param;
		switch (m[0])
		{
			case 0:		// number
			case 7:		// any
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp;
				break;
			case 1:		// string
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp_str;
				break;
			case 5:		// layer
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_layer;
				break;
			case 3:		// combo
			case 8:		// cmp
				this.combosel = m[1];
				this.get = this.get_combosel;
				break;
			case 6:		// layout
				this.layout = this.runtime.layouts[m[1]];
;
				this.get = this.get_layout;
				break;
			case 9:		// keyb
				this.key = m[1];
				this.get = this.get_key;
				break;
			case 4:		// object
				this.object = this.runtime.types_by_index[m[1]];
;
				this.get = this.get_object;
				this.block.addSolModifier(this.object);
				if (this.owner instanceof cr.action)
					this.block.setSolWriterAfterCnds();
				else if (this.block.parent)
					this.block.parent.setSolWriterAfterCnds();
				break;
			case 10:	// instvar
				this.index = m[1];
				if (owner.type.is_family)
					this.get = this.get_familyvar;
				else
					this.get = this.get_instvar;
				break;
			case 11:	// eventvar
				this.varname = m[1];
				this.eventvar = null;
				this.get = this.get_eventvar;
				break;
			case 2:		// audiofile	["name", ismusic]
			case 12:	// fileinfo		"name"
				this.fileinfo = m[1];
				this.get = this.get_audiofile;
				break;
			case 13:	// variadic
				this.get = this.get_variadic;
				this.subparams = [];
				this.variadicret = [];
				for (i = 1, len = m.length; i < len; i++)
				{
					param = new cr.parameter(this.owner, m[i]);
					cr.seal(param);
					this.subparams.push(param);
					this.variadicret.push(0);
				}
				break;
			default:
;
		}
	};
	Parameter.prototype.postInit = function ()
	{
		var i, len;
		if (this.type === 11)		// eventvar
		{
			this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);
;
		}
		else if (this.type === 13)	// variadic, postInit all sub-params
		{
			for (i = 0, len = this.subparams.length; i < len; i++)
				this.subparams[i].postInit();
		}
		if (this.expression)
			this.expression.postInit();
	};
	Parameter.prototype.pushTempValue = function ()
	{
		tempValuesPtr++;
		if (tempValues.length === tempValuesPtr)
			tempValues.push(new cr.expvalue());
		return tempValues[tempValuesPtr];
	};
	Parameter.prototype.popTempValue = function ()
	{
		tempValuesPtr--;
	};
	Parameter.prototype.get_exp = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		return temp.data;      			// return actual JS value, not expvalue
	};
	Parameter.prototype.get_exp_str = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (cr.is_string(temp.data))
			return temp.data;
		else
			return "";
	};
	Parameter.prototype.get_object = function ()
	{
		return this.object;
	};
	Parameter.prototype.get_combosel = function ()
	{
		return this.combosel;
	};
	Parameter.prototype.get_layer = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (temp.is_number())
			return this.runtime.getLayerByNumber(temp.data);
		else
			return this.runtime.getLayerByName(temp.data);
	}
	Parameter.prototype.get_layout = function ()
	{
		return this.layout;
	};
	Parameter.prototype.get_key = function ()
	{
		return this.key;
	};
	Parameter.prototype.get_instvar = function ()
	{
		return this.index;
	};
	Parameter.prototype.get_familyvar = function (solindex)
	{
		var familytype = this.owner.type;
		var realtype = null;
		var sol = familytype.getCurrentSol();
		var objs = sol.getObjects();
		if (objs.length)
			realtype = objs[solindex % objs.length].type;
		else
		{
;
			realtype = sol.else_instances[solindex % sol.else_instances.length].type;
		}
		return this.index + realtype.family_var_map[familytype.family_index];
	};
	Parameter.prototype.get_eventvar = function ()
	{
		return this.eventvar;
	};
	Parameter.prototype.get_audiofile = function ()
	{
		return this.fileinfo;
	};
	Parameter.prototype.get_variadic = function ()
	{
		var i, len;
		for (i = 0, len = this.subparams.length; i < len; i++)
		{
			this.variadicret[i] = this.subparams[i].get();
		}
		return this.variadicret;
	};
	cr.parameter = Parameter;
	function EventVariable(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.name = m[1];
		this.vartype = m[2];
		this.initial = m[3];
		this.is_static = !!m[4];
		this.is_constant = !!m[5];
		this.sid = m[6];
		this.runtime.varsBySid[this.sid.toString()] = this;
		this.data = this.initial;	// note: also stored in event stack frame for local nonstatic nonconst vars
		if (this.parent)			// local var
		{
			if (this.is_static || this.is_constant)
				this.localIndex = -1;
			else
				this.localIndex = this.runtime.stackLocalCount++;
			this.runtime.all_local_vars.push(this);
		}
		else						// global var
		{
			this.localIndex = -1;
			this.runtime.all_global_vars.push(this);
		}
	};
	EventVariable.prototype.postInit = function ()
	{
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventVariable.prototype.setValue = function (x)
	{
;
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs)
			this.data = x;
		else	// local nonstatic variable: use event stack to keep value at this level of recursion
		{
			if (this.localIndex >= lvs.length)
				lvs.length = this.localIndex + 1;
			lvs[this.localIndex] = x;
		}
	};
	EventVariable.prototype.getValue = function ()
	{
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs || this.is_constant)
			return this.data;
		else	// local nonstatic variable
		{
			if (this.localIndex >= lvs.length)
			{
;
				return this.initial;
			}
			if (typeof lvs[this.localIndex] === "undefined")
			{
;
				return this.initial;
			}
			return lvs[this.localIndex];
		}
	};
	EventVariable.prototype.run = function ()
	{
			if (this.parent && !this.is_static && !this.is_constant)
				this.setValue(this.initial);
	};
	cr.eventvariable = EventVariable;
	function EventInclude(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.include_sheet = null;		// determined in postInit
		this.include_sheet_name = m[1];
	};
	EventInclude.prototype.toString = function ()
	{
		return "include:" + this.include_sheet.toString();
	};
	EventInclude.prototype.postInit = function ()
	{
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];
;
;
        this.sheet.includes.add(this);
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventInclude.prototype.run = function ()
	{
			if (this.parent)
				this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun)
            this.include_sheet.run(true);			// from include
			if (this.parent)
				this.runtime.popSol(this.runtime.types_by_index);
	};
	EventInclude.prototype.isActive = function ()
	{
		var p = this.parent;
		while (p)
		{
			if (p.group)
			{
				if (!this.runtime.activeGroups[p.group_name.toLowerCase()])
					return false;
			}
			p = p.parent;
		}
		return true;
	};
	cr.eventinclude = EventInclude;
	function EventStackFrame()
	{
		this.temp_parents_arr = [];
		this.reset(null);
		cr.seal(this);
	};
	EventStackFrame.prototype.reset = function (cur_event)
	{
		this.current_event = cur_event;
		this.cndindex = 0;
		this.actindex = 0;
		this.temp_parents_arr.length = 0;
		this.last_event_true = false;
		this.else_branch_ran = false;
		this.any_true_state = false;
	};
	EventStackFrame.prototype.isModifierAfterCnds = function ()
	{
		if (this.current_event.solWriterAfterCnds)
			return true;
		if (this.cndindex < this.current_event.conditions.length - 1)
			return !!this.current_event.solModifiers.length;
		return false;
	};
	cr.eventStackFrame = EventStackFrame;
}());
(function()
{
	function ExpNode(owner_, m)
	{
		this.owner = owner_;
		this.runtime = owner_.runtime;
		this.type = m[0];
;
		this.get = [this.eval_int,
					this.eval_float,
					this.eval_string,
					this.eval_unaryminus,
					this.eval_add,
					this.eval_subtract,
					this.eval_multiply,
					this.eval_divide,
					this.eval_mod,
					this.eval_power,
					this.eval_and,
					this.eval_or,
					this.eval_equal,
					this.eval_notequal,
					this.eval_less,
					this.eval_lessequal,
					this.eval_greater,
					this.eval_greaterequal,
					this.eval_conditional,
					this.eval_system_exp,
					this.eval_object_behavior_exp,
					this.eval_instvar_exp,
					this.eval_object_behavior_exp,
					this.eval_eventvar_exp][this.type];
		var paramsModel = null;
		this.value = null;
		this.first = null;
		this.second = null;
		this.third = null;
		this.func = null;
		this.results = null;
		this.parameters = null;
		this.object_type = null;
		this.beh_index = -1;
		this.instance_expr = null;
		this.varindex = -1;
		this.behavior_type = null;
		this.varname = null;
		this.eventvar = null;
		this.return_string = false;
		switch (this.type) {
		case 0:		// int
		case 1:		// float
		case 2:		// string
			this.value = m[1];
			break;
		case 3:		// unaryminus
			this.first = new cr.expNode(owner_, m[1]);
			break;
		case 18:	// conditional
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
			this.third = new cr.expNode(owner_, m[3]);
			break;
		case 19:	// system_exp
			this.func = m[1];
;
			this.results = [];
			this.parameters = [];
			if (m.length === 3)
			{
				paramsModel = m[2];
				this.results.length = paramsModel.length + 1;	// must also fit 'ret'
			}
			else
				this.results.length = 1;      // to fit 'ret'
			break;
		case 20:	// object_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.beh_index = -1;
			this.func = m[2];
			this.return_string = m[3];
			if (m[4])
				this.instance_expr = new cr.expNode(owner_, m[4]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 6)
			{
				paramsModel = m[5];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 21:		// instvar_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.return_string = m[2];
			if (m[3])
				this.instance_expr = new cr.expNode(owner_, m[3]);
			else
				this.instance_expr = null;
			this.varindex = m[4];
			break;
		case 22:		// behavior_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.behavior_type = this.object_type.getBehaviorByName(m[2]);
;
			this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
			this.func = m[3];
			this.return_string = m[4];
			if (m[5])
				this.instance_expr = new cr.expNode(owner_, m[5]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 7)
			{
				paramsModel = m[6];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 23:		// eventvar_exp
			this.varname = m[1];
			this.eventvar = null;	// assigned in postInit
			break;
		}
		if (this.type >= 4 && this.type <= 17)
		{
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
		}
		if (paramsModel)
		{
			var i, len;
			for (i = 0, len = paramsModel.length; i < len; i++)
				this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
		}
		cr.seal(this);
	};
	ExpNode.prototype.postInit = function ()
	{
		if (this.type === 23)	// eventvar_exp
		{
			this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);
;
		}
		if (this.first)
			this.first.postInit();
		if (this.second)
			this.second.postInit();
		if (this.third)
			this.third.postInit();
		if (this.instance_expr)
			this.instance_expr.postInit();
		if (this.parameters)
		{
			var i, len;
			for (i = 0, len = this.parameters.length; i < len; i++)
				this.parameters[i].postInit();
		}
	};
	ExpNode.prototype.eval_system_exp = function (ret)
	{
		this.results[0] = ret;
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		this.owner.popTempValue();
		this.func.apply(this.runtime.system, this.results);
	};
	ExpNode.prototype.eval_object_behavior_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		this.results[0] = ret;
		ret.object_class = this.object_type;		// so expression can access family type if need be
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++) {
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		var index = this.owner.solindex;
		if (this.instance_expr) {
			this.instance_expr.get(temp);
			if (temp.is_number()) {
				index = temp.data;
				instances = this.object_type.instances;    // pick from all instances, not SOL
			}
		}
		this.owner.popTempValue();
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var returned_val;
		var inst = instances[index];
		if (this.beh_index > -1)
		{
			var offset = 0;
			if (this.object_type.is_family)
			{
				offset = inst.type.family_beh_map[this.object_type.family_index];
			}
			returned_val = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
		}
		else
			returned_val = this.func.apply(inst, this.results);
;
	};
	ExpNode.prototype.eval_instvar_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		var index = this.owner.solindex;
		if (this.instance_expr)
		{
			var temp = this.owner.pushTempValue();
			this.instance_expr.get(temp);
			if (temp.is_number())
			{
				index = temp.data;
				var type_instances = this.object_type.instances;
				index %= type_instances.length;     // wraparound
				if (index < 0)                      // offset
					index += type_instances.length;
				var to_ret = type_instances[index].instance_vars[this.varindex];
				if (cr.is_string(to_ret))
					ret.set_string(to_ret);
				else
					ret.set_float(to_ret);
				this.owner.popTempValue();
				return;         // done
			}
			this.owner.popTempValue();
		}
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var inst = instances[index];
		var offset = 0;
		if (this.object_type.is_family)
		{
			offset = inst.type.family_var_map[this.object_type.family_index];
		}
		var to_ret = inst.instance_vars[this.varindex + offset];
		if (cr.is_string(to_ret))
			ret.set_string(to_ret);
		else
			ret.set_float(to_ret);
	};
	ExpNode.prototype.eval_int = function (ret)
	{
		ret.type = cr.exptype.Integer;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_float = function (ret)
	{
		ret.type = cr.exptype.Float;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_string = function (ret)
	{
		ret.type = cr.exptype.String;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_unaryminus = function (ret)
	{
		this.first.get(ret);                // retrieve operand
		if (ret.is_number())
			ret.data = -ret.data;
	};
	ExpNode.prototype.eval_add = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data += temp.data;          // both operands numbers: add
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_subtract = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data -= temp.data;          // both operands numbers: subtract
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_multiply = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data *= temp.data;          // both operands numbers: multiply
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_divide = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data /= temp.data;          // both operands numbers: divide
			ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_mod = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data %= temp.data;          // both operands numbers: modulo
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_power = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data = Math.pow(ret.data, temp.data);   // both operands numbers: raise to power
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_and = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number())
		{
			if (temp.is_string())
			{
				ret.set_string(ret.data.toString() + temp.data);
			}
			else
			{
				if (ret.data && temp.data)
					ret.set_int(1);
				else
					ret.set_int(0);
			}
		}
		else if (ret.is_string())
		{
			if (temp.is_string())
				ret.data += temp.data;
			else
			{
				ret.data += (Math.round(temp.data * 1e10) / 1e10).toString();
			}
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_or = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			if (ret.data || temp.data)
				ret.set_int(1);
			else
				ret.set_int(0);
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_conditional = function (ret)
	{
		this.first.get(ret);                // condition operand
		if (ret.data)                       // is true
			this.second.get(ret);           // evaluate second operand to ret
		else
			this.third.get(ret);            // evaluate third operand to ret
	};
	ExpNode.prototype.eval_equal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data === temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_notequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data !== temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_less = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data < temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_lessequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data <= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greater = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data > temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greaterequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data >= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_eventvar_exp = function (ret)
	{
		var val = this.eventvar.getValue();
		if (cr.is_number(val))
			ret.set_float(val);
		else
			ret.set_string(val);
	};
	cr.expNode = ExpNode;
	function ExpValue(type, data)
	{
		this.type = type || cr.exptype.Integer;
		this.data = data || 0;
		this.object_class = null;
;
;
;
		if (this.type == cr.exptype.Integer)
			this.data = Math.floor(this.data);
		cr.seal(this);
	};
	ExpValue.prototype.is_int = function ()
	{
		return this.type === cr.exptype.Integer;
	};
	ExpValue.prototype.is_float = function ()
	{
		return this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_number = function ()
	{
		return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_string = function ()
	{
		return this.type === cr.exptype.String;
	};
	ExpValue.prototype.make_int = function ()
	{
		if (!this.is_int())
		{
			if (this.is_float())
				this.data = Math.floor(this.data);      // truncate float
			else if (this.is_string())
				this.data = parseInt(this.data, 10);
			this.type = cr.exptype.Integer;
		}
	};
	ExpValue.prototype.make_float = function ()
	{
		if (!this.is_float())
		{
			if (this.is_string())
				this.data = parseFloat(this.data);
			this.type = cr.exptype.Float;
		}
	};
	ExpValue.prototype.make_string = function ()
	{
		if (!this.is_string())
		{
			this.data = this.data.toString();
			this.type = cr.exptype.String;
		}
	};
	ExpValue.prototype.set_int = function (val)
	{
;
		this.type = cr.exptype.Integer;
		this.data = Math.floor(val);
	};
	ExpValue.prototype.set_float = function (val)
	{
;
		this.type = cr.exptype.Float;
		this.data = val;
	};
	ExpValue.prototype.set_string = function (val)
	{
;
		this.type = cr.exptype.String;
		this.data = val;
	};
	ExpValue.prototype.set_any = function (val)
	{
		if (cr.is_number(val))
		{
			this.type = cr.exptype.Float;
			this.data = val;
		}
		else if (cr.is_string(val))
		{
			this.type = cr.exptype.String;
			this.data = val.toString();
		}
		else
		{
			this.type = cr.exptype.Integer;
			this.data = 0;
		}
	};
	cr.expvalue = ExpValue;
	cr.exptype = {
		Integer: 0,     // emulated; no native integer support in javascript
		Float: 1,
		String: 2
	};
}());
;
cr.system_object = function (runtime)
{
    this.runtime = runtime;
	this.waits = [];
};
cr.system_object.prototype.saveToJSON = function ()
{
	var o = {};
	var i, len, j, lenj, p, w, t, sobj;
	o["waits"] = [];
	var owaits = o["waits"];
	var waitobj;
	for (i = 0, len = this.waits.length; i < len; i++)
	{
		w = this.waits[i];
		waitobj = {
			"t": w.time,
			"ev": w.ev.sid,
			"sm": [],
			"sols": {}
		};
		if (w.ev.actions[w.actindex])
			waitobj["act"] = w.ev.actions[w.actindex].sid;
		for (j = 0, lenj = w.solModifiers.length; j < lenj; j++)
			waitobj["sm"].push(w.solModifiers[j].sid);
		for (p in w.sols)
		{
			if (w.sols.hasOwnProperty(p))
			{
				t = this.runtime.types_by_index[parseInt(p, 10)];
;
				sobj = {
					"sa": w.sols[p].sa,
					"insts": []
				};
				for (j = 0, lenj = w.sols[p].insts.length; j < lenj; j++)
					sobj["insts"].push(w.sols[p].insts[j].uid);
				waitobj["sols"][t.sid.toString()] = sobj;
			}
		}
		owaits.push(waitobj);
	}
	return o;
};
cr.system_object.prototype.loadFromJSON = function (o)
{
	var owaits = o["waits"];
	var i, len, j, lenj, p, w, addWait, e, aindex, t, savedsol, nusol, inst;
	this.waits.length = 0;
	for (i = 0, len = owaits.length; i < len; i++)
	{
		w = owaits[i];
		e = this.runtime.blocksBySid[w["ev"].toString()];
		if (!e)
			continue;	// event must've gone missing
		aindex = -1;
		for (j = 0, lenj = e.actions.length; j < lenj; j++)
		{
			if (e.actions[j].sid === w["act"])
			{
				aindex = j;
				break;
			}
		}
		if (aindex === -1)
			continue;	// action must've gone missing
		addWait = {};
		addWait.sols = {};
		addWait.solModifiers = [];
		addWait.deleteme = false;
		addWait.time = w["t"];
		addWait.ev = e;
		addWait.actindex = aindex;
		for (j = 0, lenj = w["sm"].length; j < lenj; j++)
		{
			t = this.runtime.getObjectTypeBySid(w["sm"][j]);
			if (t)
				addWait.solModifiers.push(t);
		}
		for (p in w["sols"])
		{
			if (w["sols"].hasOwnProperty(p))
			{
				t = this.runtime.getObjectTypeBySid(parseInt(p, 10));
				if (!t)
					continue;		// type must've been deleted
				savedsol = w["sols"][p];
				nusol = {
					sa: savedsol["sa"],
					insts: []
				};
				for (j = 0, lenj = savedsol["insts"].length; j < lenj; j++)
				{
					inst = this.runtime.getObjectByUID(savedsol["insts"][j]);
					if (inst)
						nusol.insts.push(inst);
				}
				addWait.sols[t.index.toString()] = nusol;
			}
		}
		this.waits.push(addWait);
	}
};
(function ()
{
	var sysProto = cr.system_object.prototype;
	function SysCnds() {};
    SysCnds.prototype.EveryTick = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutStart = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutEnd = function()
    {
        return true;
    };
    SysCnds.prototype.Compare = function(x, cmp, y)
    {
        return cr.do_cmp(x, cmp, y);
    };
    SysCnds.prototype.CompareTime = function (cmp, t)
    {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0)
        {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra.CompareTime_executed)
            {
                if (elapsed >= t)
                {
                    cnd.extra.CompareTime_executed = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    SysCnds.prototype.LayerVisible = function (layer)
    {
        if (!layer)
            return false;
        else
            return layer.visible;
    };
	SysCnds.prototype.LayerCmpOpacity = function (layer, cmp, opacity_)
	{
		if (!layer)
			return false;
		return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
	};
    SysCnds.prototype.Repeat = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	SysCnds.prototype.While = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				if (!current_event.retrigger())		// one of the other conditions returned false
					current_loop.stopped = true;	// break
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				current_loop.index = i;
				if (!current_event.retrigger())
					current_loop.stopped = true;
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    SysCnds.prototype.For = function (name, start, end)
    {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
		if (end < start)
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
		else
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	var foreach_instancestack = [];
	var foreach_instanceptr = -1;
    SysCnds.prototype.ForEach = function (obj)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i, len, j, lenj, inst, s, sol2;
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	function foreach_sortinstances(a, b)
	{
		var va = a.extra.c2_foreachordered_val;
		var vb = b.extra.c2_foreachordered_val;
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			va = "" + va;
			vb = "" + vb;
			if (va < vb)
				return -1;
			else if (va > vb)
				return 1;
			else
				return 0;
		}
	};
	SysCnds.prototype.ForEachOrdered = function (obj, exp, order)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var current_condition = this.runtime.getCurrentCondition();
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
		var i, len, j, lenj, inst, s, sol2;
		for (i = 0, len = instances.length; i < len; i++)
		{
			instances[i].extra.c2_foreachordered_val = current_condition.parameters[1].get(i);
		}
		instances.sort(foreach_sortinstances);
		if (order === 1)
			instances.reverse();
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	SysCnds.prototype.PickByComparison = function (obj_, exp_, cmp_, val_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			val_ = current_condition.parameters[3].get(i);
			if (cr.do_cmp(exp_, cmp_, val_))
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
	SysCnds.prototype.PickByEvaluate = function (obj_, exp_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			if (exp_)
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
    SysCnds.prototype.TriggerOnce = function ()
    {
        var cndextra = this.runtime.getCurrentCondition().extra;
		if (typeof cndextra.TriggerOnce_lastTick === "undefined")
			cndextra.TriggerOnce_lastTick = -1;
        var last_tick = cndextra.TriggerOnce_lastTick;
        var cur_tick = this.runtime.tickcount;
        cndextra.TriggerOnce_lastTick = cur_tick;
        return this.runtime.layout_first_tick || last_tick !== cur_tick - 1;
    };
    SysCnds.prototype.Every = function (seconds)
    {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra.Every_lastTime || 0;
        var cur_time = this.runtime.kahanTime.sum;
		if (typeof cnd.extra.Every_seconds === "undefined")
			cnd.extra.Every_seconds = seconds;
		var this_seconds = cnd.extra.Every_seconds;
        if (cur_time >= last_time + this_seconds)
        {
            cnd.extra.Every_lastTime = last_time + this_seconds;
			if (cur_time >= cnd.extra.Every_lastTime + this_seconds)
				cnd.extra.Every_lastTime = cur_time;
			cnd.extra.Every_seconds = seconds;
            return true;
        }
        else
            return false;
    };
    SysCnds.prototype.PickNth = function (obj, index)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		index = cr.floor(index);
        if (index < 0 || index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.PickRandom = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		var index = cr.floor(Math.random() * instances.length);
        if (index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.CompareVar = function (v, cmp, val)
    {
        return cr.do_cmp(v.getValue(), cmp, val);
    };
    SysCnds.prototype.IsGroupActive = function (group)
    {
        return this.runtime.activeGroups[(/*this.runtime.getCurrentCondition().sheet.name + "|" + */group).toLowerCase()];
    };
	SysCnds.prototype.IsPreview = function ()
	{
		return typeof cr_is_preview !== "undefined";
	};
	SysCnds.prototype.PickAll = function (obj)
    {
        if (!obj)
            return false;
		if (!obj.instances.length)
			return false;
        var sol = obj.getCurrentSol();
        sol.select_all = true;
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.IsMobile = function ()
	{
		return this.runtime.isMobile;
	};
	SysCnds.prototype.CompareBetween = function (x, a, b)
	{
		return x >= a && x <= b;
	};
	SysCnds.prototype.Else = function ()
	{
		var current_frame = this.runtime.getCurrentEventStack();
		if (current_frame.else_branch_ran)
			return false;		// another event in this else-if chain has run
		else
			return !current_frame.last_event_true;
		/*
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var prev_event = current_event.prev_block;
		if (!prev_event)
			return false;
		if (prev_event.is_logical)
			return !this.runtime.last_event_true;
		var i, len, j, lenj, s, sol, temp, inst, any_picked = false;
		for (i = 0, len = prev_event.cndReferences.length; i < len; i++)
		{
			s = prev_event.cndReferences[i];
			sol = s.getCurrentSol();
			if (sol.select_all || sol.instances.length === s.instances.length)
			{
				sol.select_all = false;
				sol.instances.length = 0;
			}
			else
			{
				if (sol.instances.length === 1 && sol.else_instances.length === 0 && s.instances.length >= 2)
				{
					inst = sol.instances[0];
					sol.instances.length = 0;
					for (j = 0, lenj = s.instances.length; j < lenj; j++)
					{
						if (s.instances[j] != inst)
							sol.instances.push(s.instances[j]);
					}
					any_picked = true;
				}
				else
				{
					temp = sol.instances;
					sol.instances = sol.else_instances;
					sol.else_instances = temp;
					any_picked = true;
				}
			}
		}
		return any_picked;
		*/
	};
	SysCnds.prototype.OnLoadFinished = function ()
	{
		return true;
	};
	SysCnds.prototype.OnCanvasSnapshot = function ()
	{
		return true;
	};
	SysCnds.prototype.EffectsSupported = function ()
	{
		return !!this.runtime.glwrap;
	};
	SysCnds.prototype.OnSaveComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadFailed = function ()
	{
		return true;
	};
	SysCnds.prototype.ObjectUIDExists = function (u)
	{
		return !!this.runtime.getObjectByUID(u);
	};
	SysCnds.prototype.IsOnPlatform = function (p)
	{
		var rt = this.runtime;
		switch (p) {
		case 0:		// HTML5 website
			return !rt.isDomFree && !rt.isNodeWebkit && !rt.isPhoneGap && !rt.isWindows8App && !rt.isWindowsPhone8 && !rt.isBlackberry10;
		case 1:		// iOS
			return rt.isiOS;
		case 2:		// Android
			return rt.isAndroid;
		case 3:		// Windows 8
			return rt.isWindows8App;
		case 4:		// Windows Phone 8
			return rt.isWindowsPhone8;
		case 5:		// Blackberry 10
			return rt.isBlackberry10;
		case 6:		// Tizen
			return rt.isTizen;
		case 7:		// node-webkit
			return rt.isNodeWebkit;
		case 8:		// CocoonJS
			return rt.isCocoonJs;
		case 9:		// PhoneGap
			return rt.isPhoneGap;
		case 10:	// Scirra Arcade
			return rt.isArcade;
		case 11:	// node-webkit
			return rt.isNodeWebkit;
		default:	// should not be possible
			return false;
		}
	};
	var cacheRegex = null;
	var lastRegex = "";
	var lastFlags = "";
	function getRegex(regex_, flags_)
	{
		if (!cacheRegex || regex_ !== lastRegex || flags_ !== lastFlags)
		{
			cacheRegex = new RegExp(regex_, flags_);
			lastRegex = regex_;
			lastFlags = flags_;
		}
		cacheRegex.lastIndex = 0;		// reset
		return cacheRegex;
	};
	SysCnds.prototype.RegexTest = function (str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		return regex.test(str_);
	};
	var tmp_arr = [];
	SysCnds.prototype.PickOverlappingPoint = function (obj_, x_, y_)
	{
		if (!obj_)
            return false;
        var sol = obj_.getCurrentSol();
        var instances = sol.getObjects();
		var current_event = this.runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		var cnd = this.runtime.getCurrentCondition();
		var i, len, inst, pick;
		if (sol.select_all)
		{
			cr.shallowAssignArray(tmp_arr, instances);
			sol.else_instances.length = 0;
			sol.select_all = false;
			sol.instances.length = 0;
		}
		else
		{
			if (orblock)
			{
				cr.shallowAssignArray(tmp_arr, sol.else_instances);
				sol.else_instances.length = 0;
			}
			else
			{
				cr.shallowAssignArray(tmp_arr, instances);
				sol.instances.length = 0;
			}
		}
		for (i = 0, len = tmp_arr.length; i < len; ++i)
		{
			inst = tmp_arr[i];
			pick = cr.xor(inst.contains_pt(x_, y_), cnd.inverted);
			if (pick)
				sol.instances.push(inst);
			else
				sol.else_instances.push(inst);
		}
		obj_.applySolToContainer();
		return cr.xor(!!sol.instances.length, cnd.inverted);
	};
	sysProto.cnds = new SysCnds();
    function SysActs() {};
    SysActs.prototype.GoToLayout = function(to)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
        this.runtime.changelayout = to;
    };
    SysActs.prototype.CreateObject = function (obj, layer, x, y)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
        var sol = obj.getCurrentSol();
        sol.select_all = false;
		sol.instances.length = 1;
		sol.instances[0] = inst;
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				sol = s.type.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = s;
			}
		}
    };
    SysActs.prototype.SetLayerVisible = function (layer, visible_)
    {
        if (!layer)
            return;
		if (layer.visible !== visible_)
		{
			layer.visible = visible_;
			this.runtime.redraw = true;
		}
    };
	SysActs.prototype.SetLayerOpacity = function (layer, opacity_)
	{
		if (!layer)
			return;
		opacity_ = cr.clamp(opacity_ / 100, 0, 1);
		if (layer.opacity !== opacity_)
		{
			layer.opacity = opacity_;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayerScaleRate = function (layer, sr)
	{
		if (!layer)
			return;
		if (layer.zoomRate !== sr)
		{
			layer.zoomRate = sr;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayoutScale = function (s)
	{
		if (!this.runtime.running_layout)
			return;
		if (this.runtime.running_layout.scale !== s)
		{
			this.runtime.running_layout.scale = s;
			this.runtime.running_layout.boundScrolling();
			this.runtime.redraw = true;
		}
	};
    SysActs.prototype.ScrollX = function(x)
    {
        this.runtime.running_layout.scrollToX(x);
    };
    SysActs.prototype.ScrollY = function(y)
    {
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.Scroll = function(x, y)
    {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.ScrollToObject = function(obj)
    {
        var inst = obj.getFirstPicked();
        if (inst)
        {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
	SysActs.prototype.SetVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(x);
			else
				v.setValue(parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(x.toString());
	};
	SysActs.prototype.AddVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() + x);
			else
				v.setValue(v.getValue() + parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(v.getValue() + x.toString());
	};
	SysActs.prototype.SubVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() - x);
			else
				v.setValue(v.getValue() - parseFloat(x));
		}
	};
    SysActs.prototype.SetGroupActive = function (group, active)
    {
		var activeGroups = this.runtime.activeGroups;
		var groupkey = (/*this.runtime.getCurrentAction().sheet.name + "|" + */group).toLowerCase();
		switch (active) {
		case 0:
			activeGroups[groupkey] = false;
			break;
		case 1:
			activeGroups[groupkey] = true;
			break;
		case 2:
			activeGroups[groupkey] = !activeGroups[groupkey];
			break;
		}
    };
    SysActs.prototype.SetTimescale = function (ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        this.runtime.timescale = ts;
    };
    SysActs.prototype.SetObjectTimescale = function (obj, ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        if (!obj)
            return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = ts;
        }
    };
    SysActs.prototype.RestoreObjectTimescale = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = -1.0;
        }
    };
	var waitobjrecycle = [];
	function allocWaitObject()
	{
		var w;
		if (waitobjrecycle.length)
			w = waitobjrecycle.pop();
		else
		{
			w = {};
			w.sols = {};
			w.solModifiers = [];
		}
		w.deleteme = false;
		return w;
	};
	function freeWaitObject(w)
	{
		cr.wipe(w.sols);
		w.solModifiers.length = 0;
		waitobjrecycle.push(w);
	};
	var solstateobjects = [];
	function allocSolStateObject()
	{
		var s;
		if (solstateobjects.length)
			s = solstateobjects.pop();
		else
		{
			s = {};
			s.insts = [];
		}
		s.sa = false;
		return s;
	};
	function freeSolStateObject(s)
	{
		s.insts.length = 0;
		solstateobjects.push(s);
	};
	SysActs.prototype.Wait = function (seconds)
	{
		if (seconds < 0)
			return;
		var i, len, s, t, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = allocWaitObject();
		waitobj.time = this.runtime.kahanTime.sum + seconds;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all && evinfo.current_event.solModifiers.indexOf(t) === -1)
				continue;
			waitobj.solModifiers.push(t);
			ss = allocSolStateObject();
			ss.sa = s.select_all;
			cr.shallowAssignArray(ss.insts, s.instances);
			waitobj.sols[i.toString()] = ss;
		}
		this.waits.push(waitobj);
		return true;
	};
	SysActs.prototype.SetLayerScale = function (layer, scale)
    {
        if (!layer)
            return;
		if (layer.scale === scale)
			return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
	SysActs.prototype.ResetGlobals = function ()
	{
		var i, len, g;
		for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++)
		{
			g = this.runtime.all_global_vars[i];
			g.data = g.initial;
		}
	};
	SysActs.prototype.SetLayoutAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.runtime.running_layout)
		{
			if (this.runtime.running_layout.angle !== a)
			{
				this.runtime.running_layout.angle = a;
				this.runtime.redraw = true;
			}
		}
	};
	SysActs.prototype.SetLayerAngle = function (layer, a)
    {
        if (!layer)
            return;
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (layer.angle === a)
			return;
        layer.angle = a;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerParallax = function (layer, px, py)
    {
        if (!layer)
            return;
		if (layer.parallaxX === px / 100 && layer.parallaxY === py / 100)
			return;
        layer.parallaxX = px / 100;
		layer.parallaxY = py / 100;
		if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
		{
			var i, len, instances = layer.instances;
			for (i = 0, len = instances.length; i < len; ++i)
			{
				instances[i].type.any_instance_parallaxed = true;
			}
		}
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerBackground = function (layer, c)
    {
        if (!layer)
            return;
		var r = cr.GetRValue(c);
		var g = cr.GetGValue(c);
		var b = cr.GetBValue(c);
		if (layer.background_color[0] === r && layer.background_color[1] === g && layer.background_color[2] === b)
			return;
        layer.background_color[0] = r;
		layer.background_color[1] = g;
		layer.background_color[2] = b;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerTransparent = function (layer, t)
    {
        if (!layer)
            return;
		if (!!t === !!layer.transparent)
			return;
		layer.transparent = !!t;
        this.runtime.redraw = true;
    };
	SysActs.prototype.StopLoop = function ()
	{
		if (this.runtime.loop_stack_index < 0)
			return;		// no loop currently running
		this.runtime.getCurrentLoop().stopped = true;
	};
	SysActs.prototype.GoToLayoutByName = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to different layout
;
		var l;
		for (l in this.runtime.layouts)
		{
			if (this.runtime.layouts.hasOwnProperty(l) && cr.equals_nocase(l, layoutname))
			{
				this.runtime.changelayout = this.runtime.layouts[l];
				return;
			}
		}
	};
	SysActs.prototype.RestartLayout = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot restart loader layouts
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
		if (!this.runtime.running_layout)
			return;
		this.runtime.changelayout = this.runtime.running_layout;
		var i, len, g;
		for (i = 0, len = this.runtime.allGroups.length; i < len; i++)
		{
			g = this.runtime.allGroups[i];
			this.runtime.activeGroups[g.group_name.toLowerCase()] = g.initially_activated;
		}
	};
	SysActs.prototype.SnapshotCanvas = function (format_, quality_)
	{
		this.runtime.snapshotCanvas = [format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100];
		this.runtime.redraw = true;		// force redraw so snapshot is always taken
	};
	SysActs.prototype.SetCanvasSize = function (w, h)
	{
		if (w <= 0 || h <= 0)
			return;
		this.runtime["setSize"](w, h, true);
	};
	SysActs.prototype.SetLayoutEffectEnabled = function (enable_, effectname_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		this.runtime.running_layout.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectEnabled = function (layer, enable_, effectname_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		layer.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayoutEffectParam = function (effectname_, index_, value_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = this.runtime.running_layout.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectParam = function (layer, effectname_, index_, value_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = layer.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SaveState = function (slot_)
	{
		this.runtime.saveToSlot = slot_;
	};
	SysActs.prototype.LoadState = function (slot_)
	{
		this.runtime.loadFromSlot = slot_;
	};
	SysActs.prototype.LoadStateJSON = function (jsonstr_)
	{
		this.runtime.loadFromJson = jsonstr_;
	};
	SysActs.prototype.SetHalfFramerateMode = function (set_)
	{
		this.runtime.halfFramerateMode = (set_ !== 0);
	};
	SysActs.prototype.SetFullscreenQuality = function (q)
	{
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen);
		if (!isfullscreen && this.runtime.fullscreen_mode === 0)
			return;
		this.runtime.wantFullscreenScalingQuality = (q !== 0);
		this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
	};
	sysProto.acts = new SysActs();
    function SysExps() {};
    SysExps.prototype["int"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_int(x);
    };
    SysExps.prototype["float"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_float(x);
    };
    SysExps.prototype.str = function(ret, x)
    {
        if (cr.is_string(x))
            ret.set_string(x);
        else
            ret.set_string(x.toString());
    };
    SysExps.prototype.len = function(ret, x)
    {
        ret.set_int(x.length || 0);
    };
    SysExps.prototype.random = function (ret, a, b)
    {
        if (b === undefined)
        {
            ret.set_float(Math.random() * a);
        }
        else
        {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    SysExps.prototype.sqrt = function(ret, x)
    {
        ret.set_float(Math.sqrt(x));
    };
    SysExps.prototype.abs = function(ret, x)
    {
        ret.set_float(Math.abs(x));
    };
    SysExps.prototype.round = function(ret, x)
    {
        ret.set_int(Math.round(x));
    };
    SysExps.prototype.floor = function(ret, x)
    {
        ret.set_int(Math.floor(x));
    };
    SysExps.prototype.ceil = function(ret, x)
    {
        ret.set_int(Math.ceil(x));
    };
    SysExps.prototype.sin = function(ret, x)
    {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    SysExps.prototype.cos = function(ret, x)
    {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    SysExps.prototype.tan = function(ret, x)
    {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    SysExps.prototype.asin = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    SysExps.prototype.acos = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    SysExps.prototype.atan = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    SysExps.prototype.exp = function(ret, x)
    {
        ret.set_float(Math.exp(x));
    };
    SysExps.prototype.ln = function(ret, x)
    {
        ret.set_float(Math.log(x));
    };
    SysExps.prototype.log10 = function(ret, x)
    {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    SysExps.prototype.max = function(ret)
    {
		var max_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (max_ < arguments[i])
				max_ = arguments[i];
		}
		ret.set_float(max_);
    };
    SysExps.prototype.min = function(ret)
    {
        var min_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (min_ > arguments[i])
				min_ = arguments[i];
		}
		ret.set_float(min_);
    };
    SysExps.prototype.dt = function(ret)
    {
        ret.set_float(this.runtime.dt);
    };
    SysExps.prototype.timescale = function(ret)
    {
        ret.set_float(this.runtime.timescale);
    };
    SysExps.prototype.wallclocktime = function(ret)
    {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    SysExps.prototype.time = function(ret)
    {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    SysExps.prototype.tickcount = function(ret)
    {
        ret.set_int(this.runtime.tickcount);
    };
    SysExps.prototype.objectcount = function(ret)
    {
        ret.set_int(this.runtime.objectcount);
    };
    SysExps.prototype.fps = function(ret)
    {
        ret.set_int(this.runtime.fps);
    };
    SysExps.prototype.loopindex = function(ret, name_)
    {
		var loop, i, len;
        if (!this.runtime.loop_stack.length)
        {
            ret.set_int(0);
            return;
        }
        if (name_)
        {
            for (i = 0, len = this.runtime.loop_stack.length; i < len; i++)
            {
                loop = this.runtime.loop_stack[i];
                if (loop.name === name_)
                {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        }
        else
        {
			loop = this.runtime.getCurrentLoop();
			ret.set_int(loop ? loop.index : -1);
        }
    };
    SysExps.prototype.distance = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    SysExps.prototype.angle = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    SysExps.prototype.scrollx = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    SysExps.prototype.scrolly = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    SysExps.prototype.newline = function(ret)
    {
        ret.set_string("\n");
    };
    SysExps.prototype.lerp = function(ret, a, b, x)
    {
        ret.set_float(cr.lerp(a, b, x));
    };
    SysExps.prototype.windowwidth = function(ret)
    {
        ret.set_int(this.runtime.width);
    };
    SysExps.prototype.windowheight = function(ret)
    {
        ret.set_int(this.runtime.height);
    };
	SysExps.prototype.uppercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toUpperCase() : "");
	};
	SysExps.prototype.lowercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toLowerCase() : "");
	};
	SysExps.prototype.clamp = function(ret, x, l, u)
	{
		if (x < l)
			ret.set_float(l);
		else if (x > u)
			ret.set_float(u);
		else
			ret.set_float(x);
	};
	SysExps.prototype.layerscale = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.scale);
	};
	SysExps.prototype.layeropacity = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.opacity * 100);
	};
	SysExps.prototype.layerscalerate = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.zoomRate);
	};
	SysExps.prototype.layerparallaxx = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxX * 100);
	};
	SysExps.prototype.layerparallaxy = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxY * 100);
	};
	SysExps.prototype.layoutscale = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_float(this.runtime.running_layout.scale);
		else
			ret.set_float(0);
	};
	SysExps.prototype.layoutangle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.runtime.running_layout.angle));
	};
	SysExps.prototype.layerangle = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(cr.to_degrees(layer.angle));
	};
	SysExps.prototype.layoutwidth = function (ret)
	{
		ret.set_int(this.runtime.running_layout.width);
	};
	SysExps.prototype.layoutheight = function (ret)
	{
		ret.set_int(this.runtime.running_layout.height);
	};
	SysExps.prototype.find = function (ret, text, searchstr)
	{
		if (cr.is_string(text) && cr.is_string(searchstr))
			ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
		else
			ret.set_int(-1);
	};
	SysExps.prototype.left = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(0, n) : "");
	};
	SysExps.prototype.right = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(text.length - n) : "");
	};
	SysExps.prototype.mid = function (ret, text, index_, length_)
	{
		ret.set_string(cr.is_string(text) ? text.substr(index_, length_) : "");
	};
	SysExps.prototype.tokenat = function (ret, text, index_, sep)
	{
		if (cr.is_string(text) && cr.is_string(sep))
		{
			var arr = text.split(sep);
			var i = cr.floor(index_);
			if (i < 0 || i >= arr.length)
				ret.set_string("");
			else
				ret.set_string(arr[i]);
		}
		else
			ret.set_string("");
	};
	SysExps.prototype.tokencount = function (ret, text, sep)
	{
		if (cr.is_string(text) && text.length)
			ret.set_int(text.split(sep).length);
		else
			ret.set_int(0);
	};
	SysExps.prototype.replace = function (ret, text, find_, replace_)
	{
		if (cr.is_string(text) && cr.is_string(find_) && cr.is_string(replace_))
			ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
		else
			ret.set_string(cr.is_string(text) ? text : "");
	};
	SysExps.prototype.trim = function (ret, text)
	{
		ret.set_string(cr.is_string(text) ? text.trim() : "");
	};
	SysExps.prototype.pi = function (ret)
	{
		ret.set_float(cr.PI);
	};
	SysExps.prototype.layoutname = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_string(this.runtime.running_layout.name);
		else
			ret.set_string("");
	};
	SysExps.prototype.renderer = function (ret)
	{
		ret.set_string(this.runtime.gl ? "webgl" : "canvas2d");
	};
	SysExps.prototype.anglediff = function (ret, a, b)
	{
		ret.set_float(cr.to_degrees(cr.angleDiff(cr.to_radians(a), cr.to_radians(b))));
	};
	SysExps.prototype.choose = function (ret)
	{
		var index = cr.floor(Math.random() * (arguments.length - 1));
		ret.set_any(arguments[index + 1]);
	};
	SysExps.prototype.rgb = function (ret, r, g, b)
	{
		ret.set_int(cr.RGB(r, g, b));
	};
	SysExps.prototype.projectversion = function (ret)
	{
		ret.set_string(this.runtime.versionstr);
	};
	SysExps.prototype.anglelerp = function (ret, a, b, x)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			ret.set_float(cr.to_clamped_degrees(a + diff * x));
		}
		else
		{
			ret.set_float(cr.to_clamped_degrees(a - diff * x));
		}
	};
	SysExps.prototype.anglerotate = function (ret, a, b, c)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		c = cr.to_radians(c);
		ret.set_float(cr.to_clamped_degrees(cr.angleRotate(a, b, c)));
	};
	SysExps.prototype.zeropad = function (ret, n, d)
	{
		var s = (n < 0 ? "-" : "");
		if (n < 0) n = -n;
		var zeroes = d - n.toString().length;
		for (var i = 0; i < zeroes; i++)
			s += "0";
		ret.set_string(s + n.toString());
	};
	SysExps.prototype.cpuutilisation = function (ret)
	{
		ret.set_float(this.runtime.cpuutilisation / 1000);
	};
	SysExps.prototype.viewportleft = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewLeft : 0);
	};
	SysExps.prototype.viewporttop = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewTop : 0);
	};
	SysExps.prototype.viewportright = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewRight : 0);
	};
	SysExps.prototype.viewportbottom = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewBottom : 0);
	};
	SysExps.prototype.loadingprogress = function (ret)
	{
		ret.set_float(this.runtime.loadingprogress);
	};
	SysExps.prototype.unlerp = function(ret, a, b, y)
    {
        ret.set_float((y - a) / (b - a));
    };
	SysExps.prototype.canvassnapshot = function (ret)
	{
		ret.set_string(this.runtime.snapshotData);
	};
	SysExps.prototype.urlencode = function (ret, s)
	{
		ret.set_string(encodeURIComponent(s));
	};
	SysExps.prototype.urldecode = function (ret, s)
	{
		ret.set_string(decodeURIComponent(s));
	};
	SysExps.prototype.canvastolayerx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, true) : 0);
	};
	SysExps.prototype.canvastolayery = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, false) : 0);
	};
	SysExps.prototype.layertocanvasx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, true) : 0);
	};
	SysExps.prototype.layertocanvasy = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, false) : 0);
	};
	SysExps.prototype.savestatejson = function (ret)
	{
		ret.set_string(this.runtime.lastSaveJson);
	};
	SysExps.prototype.imagememoryusage = function (ret)
	{
		if (this.runtime.glwrap)
			ret.set_float(Math.round(100 * this.runtime.glwrap.estimateVRAM() / (1024 * 1024)) / 100);
		else
			ret.set_float(0);
	};
	SysExps.prototype.regexsearch = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_int(str_ ? str_.search(regex) : -1);
	};
	SysExps.prototype.regexreplace = function (ret, str_, regex_, flags_, replace_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_string(str_ ? str_.replace(regex, replace_) : "");
	};
	var regexMatches = [];
	var lastMatchesStr = "";
	var lastMatchesRegex = "";
	var lastMatchesFlags = "";
	function updateRegexMatches(str_, regex_, flags_)
	{
		if (str_ === lastMatchesStr && regex_ === lastMatchesRegex && flags_ === lastMatchesFlags)
			return;
		var regex = getRegex(regex_, flags_);
		regexMatches = str_.match(regex);
		lastMatchesStr = str_;
		lastMatchesRegex = regex_;
		lastMatchesFlags = flags_;
	};
	SysExps.prototype.regexmatchcount = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		ret.set_int(regexMatches ? regexMatches.length : 0);
	};
	SysExps.prototype.regexmatchat = function (ret, str_, regex_, flags_, index_)
	{
		index_ = Math.floor(index_);
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		if (!regexMatches || index_ < 0 || index_ >= regexMatches.length)
			ret.set_string("");
		else
			ret.set_string(regexMatches[index_]);
	};
	SysExps.prototype.infinity = function (ret)
	{
		ret.set_float(Infinity);
	};
	sysProto.exps = new SysExps();
	sysProto.runWaits = function ()
	{
		var i, j, len, w, k, s, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		for (i = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			if (w.time > this.runtime.kahanTime.sum)
				continue;
			evinfo.current_event = w.ev;
			evinfo.actindex = w.actindex;
			evinfo.cndindex = 0;
			for (k in w.sols)
			{
				if (w.sols.hasOwnProperty(k))
				{
					s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
					ss = w.sols[k];
					s.select_all = ss.sa;
					cr.shallowAssignArray(s.instances, ss.insts);
					freeSolStateObject(ss);
				}
			}
			w.ev.resume_actions_and_subevents();
			this.runtime.clearSol(w.solModifiers);
			w.deleteme = true;
		}
		for (i = 0, j = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			this.waits[j] = w;
			if (w.deleteme)
				freeWaitObject(w);
			else
				j++;
		}
		this.waits.length = j;
	};
}());
;
(function () {
	cr.add_common_aces = function (m)
	{
		var pluginProto = m[0].prototype;
		var singleglobal_ = m[1];
		var position_aces = m[3];
		var size_aces = m[4];
		var angle_aces = m[5];
		var appearance_aces = m[6];
		var zorder_aces = m[7];
		var effects_aces = m[8];
		if (!pluginProto.cnds)
			pluginProto.cnds = {};
		if (!pluginProto.acts)
			pluginProto.acts = {};
		if (!pluginProto.exps)
			pluginProto.exps = {};
		var cnds = pluginProto.cnds;
		var acts = pluginProto.acts;
		var exps = pluginProto.exps;
		if (position_aces)
		{
			cnds.CompareX = function (cmp, x)
			{
				return cr.do_cmp(this.x, cmp, x);
			};
			cnds.CompareY = function (cmp, y)
			{
				return cr.do_cmp(this.y, cmp, y);
			};
			cnds.IsOnScreen = function ()
			{
				var layer = this.layer;
				this.update_bbox();
				var bbox = this.bbox;
				return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
			};
			cnds.IsOutsideLayout = function ()
			{
				this.update_bbox();
				var bbox = this.bbox;
				var layout = this.runtime.running_layout;
				return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
			};
			cnds.PickDistance = function (which, x, y)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var dist = cr.distanceTo(inst.x, inst.y, x, y);
				var i, len, d;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					d = cr.distanceTo(inst.x, inst.y, x, y);
					if ((which === 0 && d < dist) || (which === 1 && d > dist))
					{
						dist = d;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.SetX = function (x)
			{
				if (this.x !== x)
				{
					this.x = x;
					this.set_bbox_changed();
				}
			};
			acts.SetY = function (y)
			{
				if (this.y !== y)
				{
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPos = function (x, y)
			{
				if (this.x !== x || this.y !== y)
				{
					this.x = x;
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPosToObject = function (obj, imgpt)
			{
				var inst = obj.getPairedInstance(this);
				if (!inst)
					return;
				var newx, newy;
				if (inst.getImagePoint)
				{
					newx = inst.getImagePoint(imgpt, true);
					newy = inst.getImagePoint(imgpt, false);
				}
				else
				{
					newx = inst.x;
					newy = inst.y;
				}
				if (this.x !== newx || this.y !== newy)
				{
					this.x = newx;
					this.y = newy;
					this.set_bbox_changed();
				}
			};
			acts.MoveForward = function (dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(this.angle) * dist;
					this.y += Math.sin(this.angle) * dist;
					this.set_bbox_changed();
				}
			};
			acts.MoveAtAngle = function (a, dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(cr.to_radians(a)) * dist;
					this.y += Math.sin(cr.to_radians(a)) * dist;
					this.set_bbox_changed();
				}
			};
			exps.X = function (ret)
			{
				ret.set_float(this.x);
			};
			exps.Y = function (ret)
			{
				ret.set_float(this.y);
			};
			exps.dt = function (ret)
			{
				ret.set_float(this.runtime.getDt(this));
			};
		}
		if (size_aces)
		{
			cnds.CompareWidth = function (cmp, w)
			{
				return cr.do_cmp(this.width, cmp, w);
			};
			cnds.CompareHeight = function (cmp, h)
			{
				return cr.do_cmp(this.height, cmp, h);
			};
			acts.SetWidth = function (w)
			{
				if (this.width !== w)
				{
					this.width = w;
					this.set_bbox_changed();
				}
			};
			acts.SetHeight = function (h)
			{
				if (this.height !== h)
				{
					this.height = h;
					this.set_bbox_changed();
				}
			};
			acts.SetSize = function (w, h)
			{
				if (this.width !== w || this.height !== h)
				{
					this.width = w;
					this.height = h;
					this.set_bbox_changed();
				}
			};
			exps.Width = function (ret)
			{
				ret.set_float(this.width);
			};
			exps.Height = function (ret)
			{
				ret.set_float(this.height);
			};
			exps.BBoxLeft = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.left);
			};
			exps.BBoxTop = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.top);
			};
			exps.BBoxRight = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.right);
			};
			exps.BBoxBottom = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.bottom);
			};
		}
		if (angle_aces)
		{
			cnds.AngleWithin = function (within, a)
			{
				return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
			};
			cnds.IsClockwiseFrom = function (a)
			{
				return cr.angleClockwise(this.angle, cr.to_radians(a));
			};
			cnds.IsBetweenAngles = function (a, b)
			{
				var lower = cr.to_clamped_radians(a);
				var upper = cr.to_clamped_radians(b);
				var angle = cr.clamp_angle(this.angle);
				var obtuse = (!cr.angleClockwise(upper, lower));
				if (obtuse)
					return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
				else
					return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
			};
			acts.SetAngle = function (a)
			{
				var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateClockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle += cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateCounterclockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle -= cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardAngle = function (amt, target)
			{
				var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardPosition = function (amt, x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var target = Math.atan2(dy, dx);
				var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.SetTowardPosition = function (x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var newangle = Math.atan2(dy, dx);
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			exps.Angle = function (ret)
			{
				ret.set_float(cr.to_clamped_degrees(this.angle));
			};
		}
		if (!singleglobal_)
		{
			cnds.CompareInstanceVar = function (iv, cmp, val)
			{
				return cr.do_cmp(this.instance_vars[iv], cmp, val);
			};
			cnds.IsBoolInstanceVarSet = function (iv)
			{
				return this.instance_vars[iv];
			};
			cnds.PickInstVarHiLow = function (which, iv)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var val = inst.instance_vars[iv];
				var i, len, v;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					v = inst.instance_vars[iv];
					if ((which === 0 && v < val) || (which === 1 && v > val))
					{
						val = v;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			cnds.PickByUID = function (u)
			{
				var i, len, j, inst, families, instances, sol;
				var cnd = this.runtime.getCurrentCondition();
				if (cnd.inverted)
				{
					sol = this.getCurrentSol();
					if (sol.select_all)
					{
						sol.select_all = false;
						sol.instances.length = 0;
						sol.else_instances.length = 0;
						instances = this.instances;
						for (i = 0, len = instances.length; i < len; i++)
						{
							inst = instances[i];
							if (inst.uid === u)
								sol.else_instances.push(inst);
							else
								sol.instances.push(inst);
						}
						this.applySolToContainer();
						return !!sol.instances.length;
					}
					else
					{
						for (i = 0, j = 0, len = sol.instances.length; i < len; i++)
						{
							inst = sol.instances[i];
							sol.instances[j] = inst;
							if (inst.uid === u)
							{
								sol.else_instances.push(inst);
							}
							else
								j++;
						}
						sol.instances.length = j;
						this.applySolToContainer();
						return !!sol.instances.length;
					}
				}
				else
				{
					inst = this.runtime.getObjectByUID(u);
					if (!inst)
						return false;
					sol = this.getCurrentSol();
					if (!sol.select_all && sol.instances.indexOf(inst) === -1)
						return false;		// not picked
					if (this.is_family)
					{
						families = inst.type.families;
						for (i = 0, len = families.length; i < len; i++)
						{
							if (families[i] === this)
							{
								sol.pick_one(inst);
								this.applySolToContainer();
								return true;
							}
						}
					}
					else if (inst.type === this)
					{
						sol.pick_one(inst);
						this.applySolToContainer();
						return true;
					}
					return false;
				}
			};
			cnds.OnCreated = function ()
			{
				return true;
			};
			cnds.OnDestroyed = function ()
			{
				return true;
			};
			acts.SetInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = val.toString();
				}
				else
;
			};
			acts.AddInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += val.toString();
				}
				else
;
			};
			acts.SubInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] -= val;
					else
						myinstvars[iv] -= parseFloat(val);
				}
				else
;
			};
			acts.SetBoolInstanceVar = function (iv, val)
			{
				this.instance_vars[iv] = val ? 1 : 0;
			};
			acts.ToggleBoolInstanceVar = function (iv)
			{
				this.instance_vars[iv] = 1 - this.instance_vars[iv];
			};
			acts.Destroy = function ()
			{
				this.runtime.DestroyInstance(this);
			};
			if (!acts.LoadFromJsonString)
			{
				acts.LoadFromJsonString = function (str_)
				{
					var o, i, len, binst;
					try {
						o = JSON.parse(str_);
					}
					catch (e) {
						return;
					}
					this.runtime.loadInstanceFromJSON(this, o, true);
					if (this.afterLoad)
						this.afterLoad();
					if (this.behavior_insts)
					{
						for (i = 0, len = this.behavior_insts.length; i < len; ++i)
						{
							binst = this.behavior_insts[i];
							if (binst.afterLoad)
								binst.afterLoad();
						}
					}
				};
			}
			exps.Count = function (ret)
			{
				var count = ret.object_class.instances.length;
				var i, len, inst;
				for (i = 0, len = this.runtime.createRow.length; i < len; i++)
				{
					inst = this.runtime.createRow[i];
					if (ret.object_class.is_family)
					{
						if (inst.type.families.indexOf(ret.object_class) >= 0)
							count++;
					}
					else
					{
						if (inst.type === ret.object_class)
							count++;
					}
				}
				ret.set_int(count);
			};
			exps.PickedCount = function (ret)
			{
				ret.set_int(ret.object_class.getCurrentSol().getObjects().length);
			};
			exps.UID = function (ret)
			{
				ret.set_int(this.uid);
			};
			exps.IID = function (ret)
			{
				ret.set_int(this.get_iid());
			};
			if (!exps.AsJSON)
			{
				exps.AsJSON = function (ret)
				{
					ret.set_string(JSON.stringify(this.runtime.saveInstanceToJSON(this, true)));
				};
			}
		}
		if (appearance_aces)
		{
			cnds.IsVisible = function ()
			{
				return this.visible;
			};
			acts.SetVisible = function (v)
			{
				if (!v !== !this.visible)
				{
					this.visible = v;
					this.runtime.redraw = true;
				}
			};
			cnds.CompareOpacity = function (cmp, x)
			{
				return cr.do_cmp(cr.round6dp(this.opacity * 100), cmp, x);
			};
			acts.SetOpacity = function (x)
			{
				var new_opacity = x / 100.0;
				if (new_opacity < 0)
					new_opacity = 0;
				else if (new_opacity > 1)
					new_opacity = 1;
				if (new_opacity !== this.opacity)
				{
					this.opacity = new_opacity;
					this.runtime.redraw = true;
				}
			};
			exps.Opacity = function (ret)
			{
				ret.set_float(cr.round6dp(this.opacity * 100.0));
			};
		}
		if (zorder_aces)
		{
			cnds.IsOnLayer = function (layer_)
			{
				if (!layer_)
					return false;
				return this.layer === layer_;
			};
			cnds.PickTopBottom = function (which_)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var i, len;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					if (which_ === 0)
					{
						if (inst.layer.index > pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() > pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
					else
					{
						if (inst.layer.index < pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() < pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.MoveToTop = function ()
			{
				var zindex = this.get_zindex();
				if (zindex === this.layer.instances.length - 1)
					return;
				cr.arrayRemove(this.layer.instances, zindex);
				this.layer.instances.push(this);
				this.runtime.redraw = true;
				this.layer.zindices_stale = true;
			};
			acts.MoveToBottom = function ()
			{
				var zindex = this.get_zindex();
				if (zindex === 0)
					return;
				cr.arrayRemove(this.layer.instances, zindex);
				this.layer.instances.unshift(this);
				this.runtime.redraw = true;
				this.layer.zindices_stale = true;
			};
			acts.MoveToLayer = function (layerMove)
			{
				if (!layerMove || layerMove == this.layer)
					return;
				cr.arrayRemove(this.layer.instances, this.get_zindex());
				this.layer.zindices_stale = true;
				this.layer = layerMove;
				this.zindex = layerMove.instances.length;
				layerMove.instances.push(this);
				this.runtime.redraw = true;
			};
			acts.ZMoveToObject = function (where_, obj_)
			{
				var isafter = (where_ === 0);
				if (!obj_)
					return;
				var other = obj_.getFirstPicked(this);
				if (!other || other.uid === this.uid)
					return;
				if (this.layer.index !== other.layer.index)
				{
					cr.arrayRemove(this.layer.instances, this.get_zindex());
					this.layer.zindices_stale = true;
					this.layer = other.layer;
					this.zindex = other.layer.instances.length;
					other.layer.instances.push(this);
				}
				var myZ = this.get_zindex();
				var insertZ = other.get_zindex();
				cr.arrayRemove(this.layer.instances, myZ);
				if (myZ < insertZ)
					insertZ--;
				if (isafter)
					insertZ++;
				if (insertZ === this.layer.instances.length)
					this.layer.instances.push(this);
				else
					this.layer.instances.splice(insertZ, 0, this);
				this.layer.zindices_stale = true;
				this.runtime.redraw = true;
			};
			exps.LayerNumber = function (ret)
			{
				ret.set_int(this.layer.number);
			};
			exps.LayerName = function (ret)
			{
				ret.set_string(this.layer.name);
			};
			exps.ZIndex = function (ret)
			{
				ret.set_int(this.get_zindex());
			};
		}
		if (effects_aces)
		{
			acts.SetEffectEnabled = function (enable_, effectname_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var enable = (enable_ === 1);
				if (this.active_effect_flags[i] === enable)
					return;		// no change
				this.active_effect_flags[i] = enable;
				this.updateActiveEffects();
				this.runtime.redraw = true;
			};
			acts.SetEffectParam = function (effectname_, index_, value_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var et = this.type.effect_types[i];
				var params = this.effect_params[i];
				index_ = Math.floor(index_);
				if (index_ < 0 || index_ >= params.length)
					return;		// effect index out of bounds
				if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
					value_ /= 100.0;
				if (params[index_] === value_)
					return;		// no change
				params[index_] = value_;
				if (et.active)
					this.runtime.redraw = true;
			};
		}
	};
	cr.set_bbox_changed = function ()
	{
		this.bbox_changed = true;      		// will recreate next time box requested
		this.type.any_bbox_changed = true;	// avoid unnecessary updateAllBBox() calls
		this.runtime.redraw = true;     	// assume runtime needs to redraw
		var i, len, callbacks = this.bbox_changed_callbacks;
		for (i = 0, len = callbacks.length; i < len; ++i)
		{
			callbacks[i](this);
		}
	};
	cr.add_bbox_changed_callback = function (f)
	{
		if (f)
		{
			this.bbox_changed_callbacks.push(f);
		}
	};
	var tmprc = new cr.rect(0, 0, 0, 0);
	cr.update_bbox = function ()
	{
		if (!this.bbox_changed)
			return;                 // bounding box not changed
		var bbox = this.bbox;
		var bquad = this.bquad;
		bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
		bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
		if (!this.angle)
		{
			bquad.set_from_rect(bbox);    // make bounding quad from box
		}
		else
		{
			bbox.offset(-this.x, -this.y);       			// translate to origin
			bquad.set_from_rotated_rect(bbox, this.angle);	// rotate around origin
			bquad.offset(this.x, this.y);      				// translate back to original position
			bquad.bounding_box(bbox);
		}
		bbox.normalize();
		this.bbox_changed = false;  // bounding box up to date
		if (this.collisionsEnabled)
		{
			var mygrid = this.type.collision_grid;
			var collcells = this.collcells;
			tmprc.set(mygrid.XToCell(bbox.left), mygrid.YToCell(bbox.top), mygrid.XToCell(bbox.right), mygrid.YToCell(bbox.bottom));
			if (!collcells.equals(tmprc))
			{
				if (collcells.right < collcells.left)
					mygrid.update(this, null, tmprc);		// first insertion with invalid rect: don't provide old range
				else
					mygrid.update(this, collcells, tmprc);
				collcells.copy(tmprc);
			}
		}
	};
	cr.inst_contains_pt = function (x, y)
	{
		if (!this.bbox.contains_pt(x, y))
			return false;
		if (!this.bquad.contains_pt(x, y))
			return false;
		if (this.collision_poly && !this.collision_poly.is_empty())
		{
			this.collision_poly.cache_poly(this.width, this.height, this.angle);
			return this.collision_poly.contains_pt(x - this.x, y - this.y);
		}
		else
			return true;
	};
	cr.inst_get_iid = function ()
	{
		this.type.updateIIDs();
		return this.iid;
	};
	cr.inst_get_zindex = function ()
	{
		this.layer.updateZIndices();
		return this.zindex;
	};
	cr.inst_updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et, inst;
		for (i = 0, len = this.active_effect_flags.length; i < len; i++)
		{
			if (this.active_effect_flags[i])
				this.active_effect_types.push(this.type.effect_types[i]);
		}
		this.uses_shaders = !!this.active_effect_types.length;
	};
	cr.inst_toString = function ()
	{
		return "Inst" + this.puid;
	};
	cr.type_getFirstPicked = function (frominst)
	{
		if (frominst && frominst.is_contained && frominst.type != this)
		{
			var i, len, s;
			for (i = 0, len = frominst.siblings.length; i < len; i++)
			{
				s = frominst.siblings[i];
				if (s.type == this)
					return s;
			}
		}
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[0];
		else
			return null;
	};
	cr.type_getPairedInstance = function (inst)
	{
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[inst.get_iid() % instances.length];
		else
			return null;
	};
	cr.type_updateIIDs = function ()
	{
		if (!this.stale_iids || this.is_family)
			return;		// up to date or is family - don't want family to overwrite IIDs
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].iid = i;
		var next_iid = i;
		var createRow = this.runtime.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === this)
				createRow[i].iid = next_iid++;
		}
		this.stale_iids = false;
	};
	cr.type_getInstanceByIID = function (i)
	{
		if (i < this.instances.length)
			return this.instances[i];
		i -= this.instances.length;
		var createRow = this.runtime.createRow;
		var j, lenj;
		for (j = 0, lenj = createRow.length; j < lenj; ++j)
		{
			if (createRow[j].type === this)
			{
				if (i === 0)
					return createRow[j];
				--i;
			}
		}
;
		return null;
	};
	cr.type_getCurrentSol = function ()
	{
		return this.solstack[this.cur_sol];
	};
	cr.type_pushCleanSol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		else
			this.solstack[this.cur_sol].select_all = true;  // else clear next SOL
	};
	cr.type_pushCopySol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		var clonesol = this.solstack[this.cur_sol];
		var prevsol = this.solstack[this.cur_sol - 1];
		if (prevsol.select_all)
			clonesol.select_all = true;
		else
		{
			clonesol.select_all = false;
			cr.shallowAssignArray(clonesol.instances, prevsol.instances);
			cr.shallowAssignArray(clonesol.else_instances, prevsol.else_instances);
		}
	};
	cr.type_popSol = function ()
	{
;
		this.cur_sol--;
	};
	cr.type_getBehaviorByName = function (behname)
	{
		var i, len, j, lenj, f, index = 0;
		if (!this.is_family)
		{
			for (i = 0, len = this.families.length; i < len; i++)
			{
				f = this.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (behname === f.behaviors[j].name)
					{
						this.extra.lastBehIndex = index;
						return f.behaviors[j];
					}
					index++;
				}
			}
		}
		for (i = 0, len = this.behaviors.length; i < len; i++) {
			if (behname === this.behaviors[i].name)
			{
				this.extra.lastBehIndex = index;
				return this.behaviors[i];
			}
			index++;
		}
		return null;
	};
	cr.type_getBehaviorIndexByName = function (behname)
	{
		var b = this.getBehaviorByName(behname);
		if (b)
			return this.extra.lastBehIndex;
		else
			return -1;
	};
	cr.type_getEffectIndexByName = function (name_)
	{
		var i, len;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			if (this.effect_types[i].name === name_)
				return i;
		}
		return -1;
	};
	cr.type_applySolToContainer = function ()
	{
		if (!this.is_contained || this.is_family)
			return;
		var i, len, j, lenj, t, sol, sol2;
		this.updateIIDs();
		sol = this.getCurrentSol();
		var select_all = sol.select_all;
		var es = this.runtime.getCurrentEventStack();
		var orblock = es && es.current_event && es.current_event.orblock;
		for (i = 0, len = this.container.length; i < len; i++)
		{
			t = this.container[i];
			if (t === this)
				continue;
			t.updateIIDs();
			sol2 = t.getCurrentSol();
			sol2.select_all = select_all;
			if (!select_all)
			{
				sol2.instances.length = sol.instances.length;
				for (j = 0, lenj = sol.instances.length; j < lenj; j++)
					sol2.instances[j] = t.getInstanceByIID(sol.instances[j].iid);
				if (orblock)
				{
					sol2.else_instances.length = sol.else_instances.length;
					for (j = 0, lenj = sol.else_instances.length; j < lenj; j++)
						sol2.else_instances[j] = t.getInstanceByIID(sol.else_instances[j].iid);
				}
			}
		}
	};
	cr.type_toString = function ()
	{
		return "Type" + this.sid;
	};
	cr.do_cmp = function (x, cmp, y)
	{
		if (typeof x === "undefined" || typeof y === "undefined")
			return false;
		switch (cmp)
		{
			case 0:     // equal
				return x === y;
			case 1:     // not equal
				return x !== y;
			case 2:     // less
				return x < y;
			case 3:     // less/equal
				return x <= y;
			case 4:     // greater
				return x > y;
			case 5:     // greater/equal
				return x >= y;
			default:
;
				return false;
		}
	};
})();
cr.shaders = {};
;
;
cr.plugins_.Audio = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Audio.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var audRuntime = null;
	var audInst = null;
	var audTag = "";
	var appPath = "";			// for PhoneGap only
	var API_HTML5 = 0;
	var API_WEBAUDIO = 1;
	var API_PHONEGAP = 2;
	var API_APPMOBI = 3;
	var api = API_HTML5;
	var context = null;
	var audioBuffers = [];		// cache of buffers
	var audioInstances = [];	// cache of instances
	var lastAudio = null;
	var useOgg = false;			// determined at create time
	var timescale_mode = 0;
	var silent = false;
	var masterVolume = 1;
	var listenerX = 0;
	var listenerY = 0;
	var panningModel = 1;		// HRTF
	var distanceModel = 1;		// Inverse
	var refDistance = 10;
	var maxDistance = 10000;
	var rolloffFactor = 1;
	var micSource = null;
	var micTag = "";
	var isMusicWorkaround = false;
	var musicPlayNextTouch = [];
	function dbToLinear(x)
	{
		var v = dbToLinear_nocap(x);
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		return v;
	};
	function linearToDb(x)
	{
		if (x < 0)
			x = 0;
		if (x > 1)
			x = 1;
		return linearToDb_nocap(x);
	};
	function dbToLinear_nocap(x)
	{
		return Math.pow(10, x / 20);
	};
	function linearToDb_nocap(x)
	{
		return (Math.log(x) / Math.log(10)) * 20;
	};
	var effects = {};
	function getDestinationForTag(tag)
	{
		tag = tag.toLowerCase();
		if (effects.hasOwnProperty(tag))
		{
			if (effects[tag].length)
				return effects[tag][0].getInputNode();
		}
		return context["destination"];
	};
	function createGain()
	{
		if (context["createGain"])
			return context["createGain"]();
		else
			return context["createGainNode"]();
	};
	function createDelay(d)
	{
		if (context["createDelay"])
			return context["createDelay"](d);
		else
			return context["createDelayNode"](d);
	};
	function startSource(s)
	{
		if (s["start"])
			s["start"](0);
		else
			s["noteOn"](0);
	};
	function startSourceAt(s, x, d)
	{
		if (s["start"])
			s["start"](0, x);
		else
			s["noteGrainOn"](0, x, d - x);
	};
	function stopSource(s)
	{
		try {
			if (s["stop"])
				s["stop"](0);
			else
				s["noteOff"](0);
		}
		catch (e) {}
	};
	function setAudioParam(ap, value, ramp, time)
	{
		if (!ap)
			return;		// iOS is missing some parameters
		ap["cancelScheduledValues"](0);
		if (time === 0)
		{
			ap["value"] = value;
			return;
		}
		var curTime = context["currentTime"];
		time += curTime;
		switch (ramp) {
		case 0:		// step
			ap["setValueAtTime"](value, time);
			break;
		case 1:		// linear
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["linearRampToValueAtTime"](value, time);
			break;
		case 2:		// exponential
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["exponentialRampToValueAtTime"](value, time);
			break;
		}
	};
	var filterTypes = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"];
	function FilterEffect(type, freq, detune, q, gain, mix)
	{
		this.type = "filter";
		this.params = [type, freq, detune, q, gain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = type;
		else
			this.filterNode["type"] = filterTypes[type];
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.filterNode["gain"]["value"] = gain;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
	};
	FilterEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	FilterEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	FilterEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FilterEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 1:		// filter frequency
			this.params[1] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[2] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[3] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is in dB here)
			this.params[4] = value;
			setAudioParam(this.filterNode["gain"], value, ramp, time);
			break;
		}
	};
	function DelayEffect(delayTime, delayGain, mix)
	{
		this.type = "delay";
		this.params = [delayTime, delayGain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.mainNode = createGain();
		this.delayNode = createDelay(delayTime);
		this.delayNode["delayTime"]["value"] = delayTime;
		this.delayGainNode = createGain();
		this.delayGainNode["gain"]["value"] = delayGain;
		this.inputNode["connect"](this.mainNode);
		this.inputNode["connect"](this.dryNode);
		this.mainNode["connect"](this.wetNode);
		this.mainNode["connect"](this.delayNode);
		this.delayNode["connect"](this.delayGainNode);
		this.delayGainNode["connect"](this.mainNode);
	};
	DelayEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DelayEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.mainNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.delayGainNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DelayEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DelayEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[2] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is passed in dB but needs to be linear here)
			this.params[1] = dbToLinear(value);
			setAudioParam(this.delayGainNode["gain"], dbToLinear(value), ramp, time);
			break;
		case 5:		// delay time
			this.params[0] = value;
			setAudioParam(this.delayNode["delayTime"], value, ramp, time);
			break;
		}
	};
	function ConvolveEffect(buffer, normalize, mix, src)
	{
		this.type = "convolve";
		this.params = [normalize, mix, src];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.convolveNode = context["createConvolver"]();
		if (buffer)
		{
			this.convolveNode["normalize"] = normalize;
			this.convolveNode["buffer"] = buffer;
		}
		this.inputNode["connect"](this.convolveNode);
		this.inputNode["connect"](this.dryNode);
		this.convolveNode["connect"](this.wetNode);
	};
	ConvolveEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	ConvolveEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.convolveNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	ConvolveEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	ConvolveEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function FlangerEffect(delay, modulation, freq, feedback, mix)
	{
		this.type = "flanger";
		this.params = [delay, modulation, freq, feedback, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.feedbackNode = createGain();
		this.feedbackNode["gain"]["value"] = feedback;
		this.delayNode = createDelay(delay + modulation);
		this.delayNode["delayTime"]["value"] = delay;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.delayNode);
		this.inputNode["connect"](this.dryNode);
		this.delayNode["connect"](this.wetNode);
		this.delayNode["connect"](this.feedbackNode);
		this.feedbackNode["connect"](this.delayNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.delayNode["delayTime"]);
		startSource(this.oscNode);
	};
	FlangerEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	FlangerEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.feedbackNode["disconnect"]();
	};
	FlangerEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FlangerEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 6:		// modulation
			this.params[1] = value / 1000;
			setAudioParam(this.oscGainNode["gain"], value / 1000, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[2] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		case 8:		// feedback
			this.params[3] = value / 100;
			setAudioParam(this.feedbackNode["gain"], value / 100, ramp, time);
			break;
		}
	};
	function PhaserEffect(freq, detune, q, modulation, modfreq, mix)
	{
		this.type = "phaser";
		this.params = [freq, detune, q, modulation, modfreq, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = 7;	// all-pass
		else
			this.filterNode["type"] = "allpass";
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = modfreq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.filterNode["frequency"]);
		startSource(this.oscNode);
	};
	PhaserEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	PhaserEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
	};
	PhaserEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	PhaserEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 1:		// filter frequency
			this.params[0] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[1] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[2] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 6:		// modulation
			this.params[3] = value;
			setAudioParam(this.oscGainNode["gain"], value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[4] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function GainEffect(g)
	{
		this.type = "gain";
		this.params = [g];
		this.node = createGain();
		this.node["gain"]["value"] = g;
	};
	GainEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	GainEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	GainEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	GainEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 4:		// gain
			this.params[0] = dbToLinear(value);
			setAudioParam(this.node["gain"], dbToLinear(value), ramp, time);
			break;
		}
	};
	function TremoloEffect(freq, mix)
	{
		this.type = "tremolo";
		this.params = [freq, mix];
		this.node = createGain();
		this.node["gain"]["value"] = 1 - (mix / 2);
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = mix / 2;
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.node["gain"]);
		startSource(this.oscNode);
	};
	TremoloEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	TremoloEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.node["disconnect"]();
	};
	TremoloEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	TremoloEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.node["gain"]["value"], 1 - (value / 2), ramp, time);
			setAudioParam(this.oscGainNode["gain"]["value"], value / 2, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function RingModulatorEffect(freq, mix)
	{
		this.type = "ringmod";
		this.params = [freq, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.ringNode = createGain();
		this.ringNode["gain"]["value"] = 0;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscNode["connect"](this.ringNode["gain"]);
		startSource(this.oscNode);
		this.inputNode["connect"](this.ringNode);
		this.inputNode["connect"](this.dryNode);
		this.ringNode["connect"](this.wetNode);
	};
	RingModulatorEffect.prototype.connectTo = function (node_)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node_);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node_);
	};
	RingModulatorEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.ringNode["disconnect"]();
		this.inputNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	RingModulatorEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	RingModulatorEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function DistortionEffect(threshold, headroom, drive, makeupgain, mix)
	{
		this.type = "distortion";
		this.params = [threshold, headroom, drive, makeupgain, mix];
		this.inputNode = createGain();
		this.preGain = createGain();
		this.postGain = createGain();
		this.setDrive(drive, dbToLinear_nocap(makeupgain));
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.waveShaper = context["createWaveShaper"]();
		this.curve = new Float32Array(65536);
		this.generateColortouchCurve(threshold, headroom);
		this.waveShaper.curve = this.curve;
		this.inputNode["connect"](this.preGain);
		this.inputNode["connect"](this.dryNode);
		this.preGain["connect"](this.waveShaper);
		this.waveShaper["connect"](this.postGain);
		this.postGain["connect"](this.wetNode);
	};
	DistortionEffect.prototype.setDrive = function (drive, makeupgain)
	{
		if (drive < 0.01)
			drive = 0.01;
		this.preGain["gain"]["value"] = drive;
		this.postGain["gain"]["value"] = Math.pow(1 / drive, 0.6) * makeupgain;
	};
	function e4(x, k)
	{
		return 1.0 - Math.exp(-k * x);
	}
	DistortionEffect.prototype.shape = function (x, linearThreshold, linearHeadroom)
	{
		var maximum = 1.05 * linearHeadroom * linearThreshold;
		var kk = (maximum - linearThreshold);
		var sign = x < 0 ? -1 : +1;
		var absx = x < 0 ? -x : x;
		var shapedInput = absx < linearThreshold ? absx : linearThreshold + kk * e4(absx - linearThreshold, 1.0 / kk);
		shapedInput *= sign;
		return shapedInput;
	};
	DistortionEffect.prototype.generateColortouchCurve = function (threshold, headroom)
	{
		var linearThreshold = dbToLinear_nocap(threshold);
		var linearHeadroom = dbToLinear_nocap(headroom);
		var n = 65536;
		var n2 = n / 2;
		var x = 0;
		for (var i = 0; i < n2; ++i) {
			x = i / n2;
			x = this.shape(x, linearThreshold, linearHeadroom);
			this.curve[n2 + i] = x;
			this.curve[n2 - i - 1] = -x;
		}
	};
	DistortionEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DistortionEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.preGain["disconnect"]();
		this.waveShaper["disconnect"]();
		this.postGain["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DistortionEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DistortionEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function CompressorEffect(threshold, knee, ratio, attack, release)
	{
		this.type = "compressor";
		this.params = [threshold, knee, ratio, attack, release];
		this.node = context["createDynamicsCompressor"]();
		this.node["threshold"]["value"] = threshold;
		this.node["knee"]["value"] = knee;
		this.node["ratio"]["value"] = ratio;
		this.node["attack"]["value"] = attack;
		this.node["release"]["value"] = release;
	};
	CompressorEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	CompressorEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	CompressorEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	CompressorEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	function AnalyserEffect(fftSize, smoothing)
	{
		this.type = "analyser";
		this.params = [fftSize, smoothing];
		this.node = context["createAnalyser"]();
		this.node["fftSize"] = fftSize;
		this.node["smoothingTimeConstant"] = smoothing;
		this.freqBins = new Float32Array(this.node["frequencyBinCount"]);
		this.signal = new Uint8Array(fftSize);
		this.peak = 0;
		this.rms = 0;
	};
	AnalyserEffect.prototype.tick = function ()
	{
		this.node["getFloatFrequencyData"](this.freqBins);
		this.node["getByteTimeDomainData"](this.signal);
		var fftSize = this.node["fftSize"];
		var i = 0;
		this.peak = 0;
		var rmsSquaredSum = 0;
		var s = 0;
		for ( ; i < fftSize; i++)
		{
			s = (this.signal[i] - 128) / 128;
			if (s < 0)
				s = -s;
			if (this.peak < s)
				this.peak = s;
			rmsSquaredSum += s * s;
		}
		this.peak = linearToDb(this.peak);
		this.rms = linearToDb(Math.sqrt(rmsSquaredSum / fftSize));
	};
	AnalyserEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	AnalyserEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	AnalyserEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	AnalyserEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	var OT_POS_SAMPLES = 4;
	function ObjectTracker()
	{
		this.obj = null;
		this.loadUid = 0;
		this.speeds = [];
		this.lastX = 0;
		this.lastY = 0;
		this.moveAngle = 0;
	};
	ObjectTracker.prototype.setObject = function (obj_)
	{
		this.obj = obj_;
		if (this.obj)
		{
			this.lastX = this.obj.x;
			this.lastY = this.obj.y;
		}
		this.speeds.length = 0;
	};
	ObjectTracker.prototype.hasObject = function ()
	{
		return !!this.obj;
	};
	ObjectTracker.prototype.tick = function (dt)
	{
		if (!this.obj || dt === 0)
			return;
		this.moveAngle = cr.angleTo(this.lastX, this.lastY, this.obj.x, this.obj.y);
		var s = cr.distanceTo(this.lastX, this.lastY, this.obj.x, this.obj.y) / dt;
		if (this.speeds.length < OT_POS_SAMPLES)
			this.speeds.push(s);
		else
		{
			this.speeds.shift();
			this.speeds.push(s);
		}
		this.lastX = this.obj.x;
		this.lastY = this.obj.y;
	};
	ObjectTracker.prototype.getSpeed = function ()
	{
		if (!this.speeds.length)
			return 0;
		var i, len, sum = 0;
		for (i = 0, len = this.speeds.length; i < len; i++)
		{
			sum += this.speeds[i];
		}
		return sum / this.speeds.length;
	};
	ObjectTracker.prototype.getVelocityX = function ()
	{
		return Math.cos(this.moveAngle) * this.getSpeed();
	};
	ObjectTracker.prototype.getVelocityY = function ()
	{
		return Math.sin(this.moveAngle) * this.getSpeed();
	};
	var iOShadtouch = false;	// has had touch input on iOS to work around web audio API muting
	function C2AudioBuffer(src_, is_music)
	{
		this.src = src_;
		this.myapi = api;
		this.is_music = is_music;
		this.added_end_listener = false;
		var self = this;
		this.outNode = null;
		this.mediaSourceNode = null;
		this.panWhenReady = [];		// for web audio API positioned sounds
		this.seekWhenReady = 0;
		this.pauseWhenReady = false;
		this.supportWebAudioAPI = false;
		if (api === API_WEBAUDIO && is_music)
		{
			this.myapi = API_HTML5;
			this.outNode = createGain();
		}
		this.bufferObject = null;			// actual audio object
		this.audioData = null;				// web audio api: ajax request result (compressed audio that needs decoding)
		var request;
		switch (this.myapi) {
		case API_HTML5:
			this.bufferObject = new Audio();
			if (api === API_WEBAUDIO && context["createMediaElementSource"] && !audRuntime.isFirefox)
			{
				this.supportWebAudioAPI = true;		// can be routed through web audio api
				this.bufferObject.addEventListener("canplay", function ()
				{
					if (!self.mediaSourceNode)		// protect against this event firing twice
					{
						self.mediaSourceNode = context["createMediaElementSource"](self.bufferObject);
						self.mediaSourceNode["connect"](self.outNode);
					}
				});
			}
			this.bufferObject.autoplay = false;	// this is only a source buffer, not an instance
			this.bufferObject.preload = "auto";
			this.bufferObject.src = src_;
			break;
		case API_WEBAUDIO:
			request = new XMLHttpRequest();
			request.open("GET", src_, true);
			request.responseType = "arraybuffer";
			request.onload = function () {
				self.audioData = request.response;
				self.decodeAudioBuffer();
			};
			request.send();
			break;
		case API_PHONEGAP:
			this.bufferObject = true;
			break;
		case API_APPMOBI:
			this.bufferObject = true;
			break;
		}
	};
	C2AudioBuffer.prototype.decodeAudioBuffer = function ()
	{
		if (this.bufferObject || !this.audioData)
			return;		// audio already decoded or AJAX request not yet complete
		var self = this;
		if (context["decodeAudioData"])
		{
			context["decodeAudioData"](this.audioData, function (buffer) {
					self.bufferObject = buffer;
					var p, i, len, a;
					if (!cr.is_undefined(self.playTagWhenReady) && !silent)
					{
						if (self.panWhenReady.length)
						{
							for (i = 0, len = self.panWhenReady.length; i < len; i++)
							{
								p = self.panWhenReady[i];
								a = new C2AudioInstance(self, p.thistag);
								a.setPannerEnabled(true);
								if (typeof p.objUid !== "undefined")
								{
									p.obj = audRuntime.getObjectByUID(p.objUid);
									if (!p.obj)
										continue;
								}
								if (p.obj)
								{
									var px = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, true);
									var py = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, false);
									a.setPan(px, py, cr.to_degrees(p.obj.angle - p.obj.layer.getAngle()), p.ia, p.oa, p.og);
									a.setObject(p.obj);
								}
								else
								{
									a.setPan(p.x, p.y, p.a, p.ia, p.oa, p.og);
								}
								a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
								if (self.pauseWhenReady)
									a.pause();
								audioInstances.push(a);
							}
							self.panWhenReady.length = 0;
						}
						else
						{
							a = new C2AudioInstance(self, self.playTagWhenReady);
							a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
							if (self.pauseWhenReady)
								a.pause();
							audioInstances.push(a);
						}
					}
					else if (!cr.is_undefined(self.convolveWhenReady))
					{
						var convolveNode = self.convolveWhenReady.convolveNode;
						convolveNode["normalize"] = self.normalizeWhenReady;
						convolveNode["buffer"] = buffer;
					}
			});
		}
		else
		{
			this.bufferObject = context["createBuffer"](this.audioData, false);
			if (!cr.is_undefined(this.playTagWhenReady) && !silent)
			{
				var a = new C2AudioInstance(this, this.playTagWhenReady);
				a.play(this.loopWhenReady, this.volumeWhenReady, this.seekWhenReady);
				if (this.pauseWhenReady)
					a.pause();
				audioInstances.push(a);
			}
			else if (!cr.is_undefined(this.convolveWhenReady))
			{
				var convolveNode = this.convolveWhenReady.convolveNode;
				convolveNode["normalize"] = this.normalizeWhenReady;
				convolveNode["buffer"] = this.bufferObject;
			}
		}
	};
	C2AudioBuffer.prototype.isLoaded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.bufferObject["readyState"] === 4;	// HAVE_ENOUGH_DATA
		case API_WEBAUDIO:
			return !!this.audioData;			// null until AJAX request completes
		case API_PHONEGAP:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	function C2AudioInstance(buffer_, tag_)
	{
		var self = this;
		this.tag = tag_;
		this.fresh = true;
		this.stopped = true;
		this.src = buffer_.src;
		this.buffer = buffer_;
		this.myapi = api;
		this.is_music = buffer_.is_music;
		this.playbackRate = 1;
		this.pgended = true;			// for PhoneGap only: ended flag
		this.resume_me = false;			// make sure resumes when leaving suspend
		this.is_paused = false;
		this.resume_position = 0;		// for web audio api to resume from correct playback position
		this.looping = false;
		this.is_muted = false;
		this.is_silent = false;
		this.volume = 1;
		this.mutevol = 1;
		this.startTime = audRuntime.kahanTime.sum;
		this.gainNode = null;
		this.pannerNode = null;
		this.pannerEnabled = false;
		this.objectTracker = null;
		this.panX = 0;
		this.panY = 0;
		this.panAngle = 0;
		this.panConeInner = 0;
		this.panConeOuter = 0;
		this.panConeOuterGain = 0;
		this.instanceObject = null;
		var add_end_listener = false;
		if (this.myapi === API_WEBAUDIO && this.buffer.myapi === API_HTML5 && !this.buffer.supportWebAudioAPI)
			this.myapi = API_HTML5;
		switch (this.myapi) {
		case API_HTML5:
			if (this.is_music)
			{
				this.instanceObject = buffer_.bufferObject;
				add_end_listener = !buffer_.added_end_listener;
				buffer_.added_end_listener = true;
			}
			else
			{
				this.instanceObject = new Audio();
				this.instanceObject.autoplay = false;
				this.instanceObject.src = buffer_.bufferObject.src;
				add_end_listener = true;
			}
			if (add_end_listener)
			{
				this.instanceObject.addEventListener('ended', function () {
						audTag = self.tag;
						self.stopped = true;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				});
			}
			break;
		case API_WEBAUDIO:
			this.gainNode = createGain();
			this.gainNode["connect"](getDestinationForTag(tag_));
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (buffer_.bufferObject)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = buffer_.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
			}
			else
			{
				this.instanceObject = this.buffer.bufferObject;		// reference the audio element
				this.buffer.outNode["connect"](this.gainNode);
			}
			break;
		case API_PHONEGAP:
			this.instanceObject = new window["Media"](appPath + this.src, null, null, function (status) {
					if (status === window["Media"]["MEDIA_STOPPED"])
					{
						self.pgended = true;
						self.stopped = true;
						audTag = self.tag;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					}
			});
			break;
		case API_APPMOBI:
			this.instanceObject = true;
			break;
		}
	};
	C2AudioInstance.prototype.hasEnded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.instanceObject.ended;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh && !this.stopped && this.instanceObject["loop"])
					return false;
				if (this.is_paused)
					return false;
				return (audRuntime.kahanTime.sum - this.startTime) > this.buffer.bufferObject["duration"];
			}
			else
				return this.instanceObject.ended;
		case API_PHONEGAP:
			return this.pgended;
		case API_APPMOBI:
			true;	// recycling an AppMobi sound does not matter because it will just do another throwaway playSound
		}
		return true;
	};
	C2AudioInstance.prototype.canBeRecycled = function ()
	{
		if (this.fresh || this.stopped)
			return true;		// not yet used or is not playing
		return this.hasEnded();
	};
	C2AudioInstance.prototype.setPannerEnabled = function (enable_)
	{
		if (api !== API_WEBAUDIO)
			return;
		if (!this.pannerEnabled && enable_)
		{
			if (!this.pannerNode)
			{
				this.pannerNode = context["createPanner"]();
				if (typeof this.pannerNode["panningModel"] === "number")
					this.pannerNode["panningModel"] = panningModel;
				else
					this.pannerNode["panningModel"] = ["equalpower", "HRTF", "soundfield"][panningModel];
				if (typeof this.pannerNode["distanceModel"] === "number")
					this.pannerNode["distanceModel"] = distanceModel;
				else
					this.pannerNode["distanceModel"] = ["linear", "inverse", "exponential"][distanceModel];
				this.pannerNode["refDistance"] = refDistance;
				this.pannerNode["maxDistance"] = maxDistance;
				this.pannerNode["rolloffFactor"] = rolloffFactor;
			}
			this.gainNode["disconnect"]();
			this.gainNode["connect"](this.pannerNode);
			this.pannerNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = true;
		}
		else if (this.pannerEnabled && !enable_)
		{
			this.pannerNode["disconnect"]();
			this.gainNode["disconnect"]();
			this.gainNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = false;
		}
	};
	C2AudioInstance.prototype.setPan = function (x, y, angle, innerangle, outerangle, outergain)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		this.pannerNode["setPosition"](x, y, 0);
		this.pannerNode["setOrientation"](Math.cos(cr.to_radians(angle)), Math.sin(cr.to_radians(angle)), 0);
		this.pannerNode["coneInnerAngle"] = innerangle;
		this.pannerNode["coneOuterAngle"] = outerangle;
		this.pannerNode["coneOuterGain"] = outergain;
		this.panX = x;
		this.panY = y;
		this.panAngle = angle;
		this.panConeInner = innerangle;
		this.panConeOuter = outerangle;
		this.panConeOuterGain = outergain;
	};
	C2AudioInstance.prototype.setObject = function (o)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		if (!this.objectTracker)
			this.objectTracker = new ObjectTracker();
		this.objectTracker.setObject(o);
	};
	C2AudioInstance.prototype.tick = function (dt)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO || !this.objectTracker || !this.objectTracker.hasObject() || !this.isPlaying())
		{
			return;
		}
		this.objectTracker.tick(dt);
		var inst = this.objectTracker.obj;
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		this.pannerNode["setPosition"](px, py, 0);
		var a = 0;
		if (typeof this.objectTracker.obj.angle !== "undefined")
		{
			a = inst.angle - inst.layer.getAngle();
			this.pannerNode["setOrientation"](Math.cos(a), Math.sin(a), 0);
		}
		this.pannerNode["setVelocity"](this.objectTracker.getVelocityX(), this.objectTracker.getVelocityY(), 0);
	};
	C2AudioInstance.prototype.play = function (looping, vol, fromPosition)
	{
		var instobj = this.instanceObject;
		this.looping = looping;
		this.volume = vol;
		var seekPos = fromPosition || 0;
		switch (this.myapi) {
		case API_HTML5:
			if (instobj.playbackRate !== 1.0)
				instobj.playbackRate = 1.0;
			if (instobj.volume !== vol * masterVolume)
				instobj.volume = vol * masterVolume;
			if (instobj.loop !== looping)
				instobj.loop = looping;
			if (instobj.muted)
				instobj.muted = false;
			if (instobj.currentTime !== seekPos)
			{
				try {
					instobj.currentTime = seekPos;
				}
				catch (err)
				{
;
				}
			}
			if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
				musicPlayNextTouch.push(this);
			else
				this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			this.muted = false;
			this.mutevol = 1;
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = this.buffer.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
				this.instanceObject.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (seekPos === 0)
					startSource(this.instanceObject);
				else
					startSourceAt(this.instanceObject, seekPos, this.getDuration());
			}
			else
			{
				if (instobj.playbackRate !== 1.0)
					instobj.playbackRate = 1.0;
				if (instobj.loop !== looping)
					instobj.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (instobj.currentTime !== seekPos)
				{
					try {
						instobj.currentTime = seekPos;
					}
					catch (err)
					{
;
					}
				}
				if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
					musicPlayNextTouch.push(this);
				else
					instobj.play();
			}
			break;
		case API_PHONEGAP:
			if ((!this.fresh && this.stopped) || seekPos !== 0)
				instobj["seekTo"](seekPos);
			instobj["play"]();
			this.pgended = false;
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["playSound"](this.src, looping);
			else
				AppMobi["player"]["playSound"](this.src, looping);
			break;
		}
		this.playbackRate = 1;
		this.startTime = audRuntime.kahanTime.sum - seekPos;
		this.fresh = false;
		this.stopped = false;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.stop = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
				stopSource(this.instanceObject);
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["stop"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.stopped = true;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.pause = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.resume_position = this.getPlaybackTime();
				if (this.looping)
					this.resume_position = this.resume_position % this.getDuration();
				stopSource(this.instanceObject);
			}
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["pause"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.is_paused = true;
	};
	C2AudioInstance.prototype.resume = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || !this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = this.buffer.bufferObject;
				this.instanceObject["connect"](this.gainNode);
				this.instanceObject.loop = this.looping;
				this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
				this.startTime = audRuntime.kahanTime.sum - this.resume_position;
				startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
			}
			else
			{
				this.instanceObject.play();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["play"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["resumeSound"](this.src);
			break;
		}
		this.is_paused = false;
	};
	C2AudioInstance.prototype.seek = function (pos)
	{
		if (this.fresh || this.stopped || this.hasEnded())
			return;
		switch (this.myapi) {
		case API_HTML5:
			try {
				this.instanceObject.currentTime = pos;
			}
			catch (e) {}
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					this.resume_position = pos;
				else
				{
					this.pause();
					this.resume_position = pos;
					this.resume();
				}
			}
			else
			{
				try {
					this.instanceObject.currentTime = pos;
				}
				catch (e) {}
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["seekSound"](this.src, pos);
			break;
		}
	};
	C2AudioInstance.prototype.reconnect = function (toNode)
	{
		if (this.myapi !== API_WEBAUDIO)
			return;
		if (this.pannerEnabled)
		{
			this.pannerNode["disconnect"]();
			this.pannerNode["connect"](toNode);
		}
		else
		{
			this.gainNode["disconnect"]();
			this.gainNode["connect"](toNode);
		}
	};
	C2AudioInstance.prototype.getDuration = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.duration !== "undefined")
				return this.instanceObject.duration;
			else
				return 0;
		case API_WEBAUDIO:
			return this.buffer.bufferObject["duration"];
		case API_PHONEGAP:
			return this.instanceObject["getDuration"]();
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				return AppMobi["context"]["getDurationSound"](this.src);
			else
				return 0;
		}
		return 0;
	};
	C2AudioInstance.prototype.getPlaybackTime = function ()
	{
		var duration = this.getDuration();
		var ret = 0;
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					return this.resume_position;
				else
					ret = audRuntime.kahanTime.sum - this.startTime;
			}
			else if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				ret = AppMobi["context"]["getPlaybackTimeSound"](this.src);
			break;
		}
		if (!this.looping && ret > duration)
			ret = duration;
		return ret;
	};
	C2AudioInstance.prototype.isPlaying = function ()
	{
		return !this.is_paused && !this.fresh && !this.stopped && !this.hasEnded();
	};
	C2AudioInstance.prototype.setVolume = function (v)
	{
		this.volume = v;
		this.updateVolume();
	};
	C2AudioInstance.prototype.updateVolume = function ()
	{
		var volToSet = this.volume * masterVolume;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.volume && this.instanceObject.volume !== volToSet)
				this.instanceObject.volume = volToSet;
			break;
		case API_WEBAUDIO:
			this.gainNode["gain"]["value"] = volToSet * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.getVolume = function ()
	{
		return this.volume;
	};
	C2AudioInstance.prototype.doSetMuted = function (m)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.muted !== !!m)
				this.instanceObject.muted = !!m;
			break;
		case API_WEBAUDIO:
			this.mutevol = (m ? 0 : 1);
			this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setMuted = function (m)
	{
		this.is_muted = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setSilent = function (m)
	{
		this.is_silent = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setLooping = function (l)
	{
		this.looping = l;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["setLoopingSound"](this.src, l);
			break;
		}
	};
	C2AudioInstance.prototype.setPlaybackRate = function (r)
	{
		this.playbackRate = r;
		this.updatePlaybackRate();
	};
	C2AudioInstance.prototype.updatePlaybackRate = function ()
	{
		var r = this.playbackRate;
		if ((timescale_mode === 1 && !this.is_music) || timescale_mode === 2)
			r *= audRuntime.timescale;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.playbackRate !== r)
				this.instanceObject.playbackRate = r;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.instanceObject["playbackRate"]["value"] !== r)
					this.instanceObject["playbackRate"]["value"] = r;
			}
			else
			{
				if (this.instanceObject.playbackRate !== r)
					this.instanceObject.playbackRate = r;
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setSuspended = function (s)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_WEBAUDIO:
			if (s)
			{
				if (this.isPlaying())
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.resume_position = this.getPlaybackTime();
						if (this.looping)
							this.resume_position = this.resume_position % this.getDuration();
						stopSource(this.instanceObject);
					}
					else
						this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.instanceObject = context["createBufferSource"]();
						this.instanceObject["buffer"] = this.buffer.bufferObject;
						this.instanceObject["connect"](this.gainNode);
						this.instanceObject.loop = this.looping;
						this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
						this.startTime = audRuntime.kahanTime.sum - this.resume_position;
						startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
					}
					else
					{
						this.instanceObject["play"]();
					}
				}
			}
			break;
		case API_PHONEGAP:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_APPMOBI:
			break;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		audRuntime = this.runtime;
		audInst = this;
		this.listenerTracker = null;
		this.listenerZ = -600;
		if ((this.runtime.isiOS || (this.runtime.isAndroid && (this.runtime.isChrome || this.runtime.isAndroidStockBrowser))) && !this.runtime.isCrosswalk && !this.runtime.isDomFree)
		{
			isMusicWorkaround = true;
		}
		context = null;
		if (typeof AudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new AudioContext();
		}
		else if (typeof webkitAudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new webkitAudioContext();
		}
		if ((this.runtime.isiOS && api === API_WEBAUDIO) || isMusicWorkaround)
		{
			document.addEventListener("touchstart", function ()
			{
				var i, len, m;
				if (!iOShadtouch && context)
				{
					var buffer = context["createBuffer"](1, 1, 22050);
					var source = context["createBufferSource"]();
					source["buffer"] = buffer;
					source["connect"](context["destination"]);
					startSource(source);
					iOShadtouch = true;
				}
				if (isMusicWorkaround)
				{
					if (!silent)
					{
						for (i = 0, len = musicPlayNextTouch.length; i < len; ++i)
						{
							m = musicPlayNextTouch[i];
							if (!m.stopped && !m.is_paused)
								m.instanceObject.play();
						}
					}
					musicPlayNextTouch.length = 0;
				}
			}, true);
		}
		if (api !== API_WEBAUDIO)
		{
			if (this.runtime.isPhoneGap)
				api = API_PHONEGAP;
			else if (this.runtime.isAppMobi)
				api = API_APPMOBI;
		}
		if (api === API_PHONEGAP)
		{
			appPath = location.href;
			var i = appPath.lastIndexOf("/");
			if (i > -1)
				appPath = appPath.substr(0, i + 1);
			appPath = appPath.replace("file://", "");
		}
		if (this.runtime.isSafari && this.runtime.isWindows && typeof Audio === "undefined")
		{
			alert("It looks like you're using Safari for Windows without Quicktime.  Audio cannot be played until Quicktime is installed.");
			this.runtime.DestroyInstance(this);
		}
		else
		{
			if (this.runtime.isDirectCanvas)
				useOgg = this.runtime.isAndroid;		// AAC on iOS, OGG on Android
			else
			{
				try {
					useOgg = !!(new Audio().canPlayType('audio/ogg; codecs="vorbis"'));
				}
				catch (e)
				{
					useOgg = false;
				}
			}
			switch (api) {
			case API_HTML5:
;
				break;
			case API_WEBAUDIO:
;
				break;
			case API_PHONEGAP:
;
				break;
			case API_APPMOBI:
;
				break;
			default:
;
			}
			this.runtime.tickMe(this);
		}
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function ()
	{
		timescale_mode = this.properties[0];	// 0 = off, 1 = sounds only, 2 = all
		this.saveload = this.properties[1];		// 0 = all, 1 = sounds only, 2 = music only, 3 = none
		panningModel = this.properties[2];		// 0 = equalpower, 1 = hrtf, 3 = soundfield
		distanceModel = this.properties[3];		// 0 = linear, 1 = inverse, 2 = exponential
		this.listenerZ = -this.properties[4];
		refDistance = this.properties[5];
		maxDistance = this.properties[6];
		rolloffFactor = this.properties[7];
		this.listenerTracker = new ObjectTracker();
		if (api === API_WEBAUDIO)
		{
			context["listener"]["speedOfSound"] = this.properties[8];
			context["listener"]["dopplerFactor"] = this.properties[9];
			context["listener"]["setPosition"](this.runtime.draw_width / 2, this.runtime.draw_height / 2, this.listenerZ);
			context["listener"]["setOrientation"](0, 0, 1, 0, -1, 0);
			window["c2OnAudioMicStream"] = function (localMediaStream, tag)
			{
				if (micSource)
					micSource["disconnect"]();
				micTag = tag.toLowerCase();
				micSource = context["createMediaStreamSource"](localMediaStream);
				micSource["connect"](getDestinationForTag(micTag));
			};
		}
		this.runtime.addSuspendCallback(function(s)
		{
			audInst.onSuspend(s);
		});
		var self = this;
		this.runtime.addDestroyCallback(function (inst)
		{
			self.onInstanceDestroyed(inst);
		});
	};
	instanceProto.onInstanceDestroyed = function (inst)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.objectTracker)
			{
				if (a.objectTracker.obj === inst)
				{
					a.objectTracker.obj = null;
					if (a.pannerEnabled && a.isPlaying() && a.looping)
						a.stop();
				}
			}
		}
		if (this.listenerTracker.obj === inst)
			this.listenerTracker.obj = null;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"silent": silent,
			"masterVolume": masterVolume,
			"listenerZ": this.listenerZ,
			"listenerUid": this.listenerTracker.hasObject() ? this.listenerTracker.obj.uid : -1,
			"playing": [],
			"effects": {}
		};
		var playingarr = o["playing"];
		var i, len, a, d, p, panobj, playbackTime;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (!a.isPlaying())
				continue;				// no need to save stopped sounds
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			if (a.is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!a.is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			playbackTime = a.getPlaybackTime();
			if (a.looping)
				playbackTime = playbackTime % a.getDuration();
			d = {
				"tag": a.tag,
				"buffersrc": a.buffer.src,
				"is_music": a.is_music,
				"playbackTime": playbackTime,
				"volume": a.volume,
				"looping": a.looping,
				"muted": a.is_muted,
				"playbackRate": a.playbackRate,
				"paused": a.is_paused,
				"resume_position": a.resume_position
			};
			if (a.pannerEnabled)
			{
				d["pan"] = {};
				panobj = d["pan"];
				if (a.objectTracker && a.objectTracker.hasObject())
				{
					panobj["objUid"] = a.objectTracker.obj.uid;
				}
				else
				{
					panobj["x"] = a.panX;
					panobj["y"] = a.panY;
					panobj["a"] = a.panAngle;
				}
				panobj["ia"] = a.panConeInner;
				panobj["oa"] = a.panConeOuter;
				panobj["og"] = a.panConeOuterGain;
			}
			playingarr.push(d);
		}
		var fxobj = o["effects"];
		var fxarr;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				fxarr = [];
				for (i = 0, len = effects[p].length; i < len; i++)
				{
					fxarr.push({ "type": effects[p][i].type, "params": effects[p][i].params });
				}
				fxobj[p] = fxarr;
			}
		}
		return o;
	};
	var objectTrackerUidsToLoad = [];
	instanceProto.loadFromJSON = function (o)
	{
		var setSilent = o["silent"];
		masterVolume = o["masterVolume"];
		this.listenerZ = o["listenerZ"];
		this.listenerTracker.setObject(null);
		var listenerUid = o["listenerUid"];
		if (listenerUid !== -1)
		{
			this.listenerTracker.loadUid = listenerUid;
			objectTrackerUidsToLoad.push(this.listenerTracker);
		}
		var playingarr = o["playing"];
		var i, len, d, src, is_music, tag, playbackTime, looping, vol, b, a, p, pan, panObjUid;
		if (this.saveload !== 3)
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
			{
				a = audioInstances[i];
				if (a.is_music && this.saveload === 1)
					continue;		// only saving/loading sound: leave music playing
				if (!a.is_music && this.saveload === 2)
					continue;		// only saving/loading music: leave sound playing
				a.stop();
			}
		}
		var fxarr, fxtype, fxparams, fx;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				for (i = 0, len = effects[p].length; i < len; i++)
					effects[p][i].remove();
			}
		}
		cr.wipe(effects);
		for (p in o["effects"])
		{
			if (o["effects"].hasOwnProperty(p))
			{
				fxarr = o["effects"][p];
				for (i = 0, len = fxarr.length; i < len; i++)
				{
					fxtype = fxarr[i]["type"];
					fxparams = fxarr[i]["params"];
					switch (fxtype) {
					case "filter":
						addEffectForTag(p, new FilterEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "delay":
						addEffectForTag(p, new DelayEffect(fxparams[0], fxparams[1], fxparams[2]));
						break;
					case "convolve":
						src = fxparams[2];
						b = this.getAudioBuffer(src, false);
						if (b.bufferObject)
						{
							fx = new ConvolveEffect(b.bufferObject, fxparams[0], fxparams[1], src);
						}
						else
						{
							fx = new ConvolveEffect(null, fxparams[0], fxparams[1], src);
							b.normalizeWhenReady = fxparams[0];
							b.convolveWhenReady = fx;
						}
						addEffectForTag(p, fx);
						break;
					case "flanger":
						addEffectForTag(p, new FlangerEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "phaser":
						addEffectForTag(p, new PhaserEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "gain":
						addEffectForTag(p, new GainEffect(fxparams[0]));
						break;
					case "tremolo":
						addEffectForTag(p, new TremoloEffect(fxparams[0], fxparams[1]));
						break;
					case "ringmod":
						addEffectForTag(p, new RingModulatorEffect(fxparams[0], fxparams[1]));
						break;
					case "distortion":
						addEffectForTag(p, new DistortionEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "compressor":
						addEffectForTag(p, new CompressorEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "analyser":
						addEffectForTag(p, new AnalyserEffect(fxparams[0], fxparams[1]));
						break;
					}
				}
			}
		}
		for (i = 0, len = playingarr.length; i < len; i++)
		{
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			d = playingarr[i];
			src = d["buffersrc"];
			is_music = d["is_music"];
			tag = d["tag"];
			playbackTime = d["playbackTime"];
			looping = d["looping"];
			vol = d["volume"];
			pan = d["pan"];
			panObjUid = (pan && pan.hasOwnProperty("objUid")) ? pan["objUid"] : -1;
			if (is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			a = this.getAudioInstance(src, tag, is_music, looping, vol);
			if (!a)
			{
				b = this.getAudioBuffer(src, is_music);
				b.seekWhenReady = playbackTime;
				b.pauseWhenReady = d["paused"];
				if (pan)
				{
					if (panObjUid !== -1)
					{
						b.panWhenReady.push({ objUid: panObjUid, ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
					else
					{
						b.panWhenReady.push({ x: pan["x"], y: pan["y"], a: pan["a"], ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
				}
				continue;
			}
			a.resume_position = d["resume_position"];
			a.setPannerEnabled(!!pan);
			a.play(looping, vol, playbackTime);
			a.updatePlaybackRate();
			a.updateVolume();
			a.doSetMuted(a.is_muted || a.is_silent);
			if (d["paused"])
				a.pause();
			if (d["muted"])
				a.setMuted(true);
			a.doSetMuted(a.is_muted || a.is_silent);
			if (pan)
			{
				if (panObjUid !== -1)
				{
					a.objectTracker = a.objectTracker || new ObjectTracker();
					a.objectTracker.loadUid = panObjUid;
					objectTrackerUidsToLoad.push(a.objectTracker);
				}
				else
				{
					a.setPan(pan["x"], pan["y"], pan["a"], pan["ia"], pan["oa"], pan["og"]);
				}
			}
		}
		if (setSilent && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (!setSilent && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	instanceProto.afterLoad = function ()
	{
		var i, len, ot, inst;
		for (i = 0, len = objectTrackerUidsToLoad.length; i < len; i++)
		{
			ot = objectTrackerUidsToLoad[i];
			inst = this.runtime.getObjectByUID(ot.loadUid);
			ot.setObject(inst);
			ot.loadUid = -1;
			if (inst)
			{
				listenerX = inst.x;
				listenerY = inst.y;
			}
		}
		objectTrackerUidsToLoad.length = 0;
	};
	instanceProto.onSuspend = function (s)
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].setSuspended(s);
	};
	instanceProto.tick = function ()
	{
		var dt = this.runtime.dt;
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			a.tick(dt);
			if (a.myapi !== API_HTML5 && a.myapi !== API_APPMOBI)
			{
				if (!a.fresh && !a.stopped && a.hasEnded())
				{
					a.stopped = true;
					audTag = a.tag;
					audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				}
			}
			if (timescale_mode !== 0)
				a.updatePlaybackRate();
		}
		var p, arr, f;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				arr = effects[p];
				for (i = 0, len = arr.length; i < len; i++)
				{
					f = arr[i];
					if (f.tick)
						f.tick();
				}
			}
		}
		if (api === API_WEBAUDIO && this.listenerTracker.hasObject())
		{
			this.listenerTracker.tick(dt);
			listenerX = this.listenerTracker.obj.x;
			listenerY = this.listenerTracker.obj.y;
			context["listener"]["setPosition"](this.listenerTracker.obj.x, this.listenerTracker.obj.y, this.listenerZ);
			context["listener"]["setVelocity"](this.listenerTracker.getVelocityX(), this.listenerTracker.getVelocityY(), 0);
		}
	};
	instanceProto.getAudioBuffer = function (src_, is_music)
	{
		var i, len, a, ret = null, j, k, lenj, ai;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			a = audioBuffers[i];
			if (a.src === src_)
			{
				ret = a;
				break;
			}
		}
		if (!ret)
		{
			ret = new C2AudioBuffer(src_, is_music);
			audioBuffers.push(ret);
		}
		return ret;
	};
	instanceProto.getAudioInstance = function (src_, tag, is_music, looping, vol)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.src === src_ && (a.canBeRecycled() || is_music))
			{
				a.tag = tag;
				return a;
			}
		}
		var b = this.getAudioBuffer(src_, is_music);
		if (!b.bufferObject)
		{
			if (tag !== "<preload>")
			{
				b.playTagWhenReady = tag;
				b.loopWhenReady = looping;
				b.volumeWhenReady = vol;
			}
			return null;
		}
		a = new C2AudioInstance(b, tag);
		audioInstances.push(a);
		return a;
	};
	var taggedAudio = [];
	function getAudioByTag(tag)
	{
		taggedAudio.length = 0;
		if (!tag.length)
		{
			if (!lastAudio || lastAudio.hasEnded())
				return;
			else
			{
				taggedAudio.length = 1;
				taggedAudio[0] = lastAudio;
				return;
			}
		}
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (cr.equals_nocase(tag, a.tag))
				taggedAudio.push(a);
		}
	};
	function reconnectEffects(tag)
	{
		var i, len, arr, n, toNode = context["destination"];
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				toNode = arr[0].getInputNode();
				for (i = 0, len = arr.length; i < len; i++)
				{
					n = arr[i];
					if (i + 1 === len)
						n.connectTo(context["destination"]);
					else
						n.connectTo(arr[i + 1].getInputNode());
				}
			}
		}
		getAudioByTag(tag);
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].reconnect(toNode);
		if (micSource && micTag === tag)
		{
			micSource["disconnect"]();
			micSource["connect"](toNode);
		}
	};
	function addEffectForTag(tag, fx)
	{
		if (!effects.hasOwnProperty(tag))
			effects[tag] = [fx];
		else
			effects[tag].push(fx);
		reconnectEffects(tag);
	};
	function Cnds() {};
	Cnds.prototype.OnEnded = function (t)
	{
		return cr.equals_nocase(audTag, t);
	};
	Cnds.prototype.PreloadsComplete = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			if (!audioBuffers[i].isLoaded())
				return false;
		}
		return true;
	};
	Cnds.prototype.AdvancedAudioSupported = function ()
	{
		return api === API_WEBAUDIO;
	};
	Cnds.prototype.IsSilent = function ()
	{
		return silent;
	};
	Cnds.prototype.IsAnyPlaying = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			if (audioInstances[i].isPlaying())
				return true;
		}
		return false;
	};
	Cnds.prototype.IsTagPlaying = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (taggedAudio[i].isPlaying())
				return true;
		}
		return false;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Play = function (file, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPosition = function (file, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObject = function (file, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayByName = function (folder, filename, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPositionByName = function (folder, filename, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObjectByName = function (folder, filename, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.SetLooping = function (tag, looping)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setLooping(looping === 0);
	};
	Acts.prototype.SetMuted = function (tag, muted)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setMuted(muted === 0);
	};
	Acts.prototype.SetVolume = function (tag, vol)
	{
		getAudioByTag(tag);
		var v = dbToLinear(vol);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setVolume(v);
	};
	Acts.prototype.Preload = function (file)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.PreloadByName = function (folder, filename)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.SetPlaybackRate = function (tag, rate)
	{
		getAudioByTag(tag);
		if (rate < 0.0)
			rate = 0;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setPlaybackRate(rate);
	};
	Acts.prototype.Stop = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].stop();
	};
	Acts.prototype.StopAll = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].stop();
	};
	Acts.prototype.SetPaused = function (tag, state)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (state === 0)
				taggedAudio[i].pause();
			else
				taggedAudio[i].resume();
		}
	};
	Acts.prototype.Seek = function (tag, pos)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			taggedAudio[i].seek(pos);
		}
	};
	Acts.prototype.SetSilent = function (s)
	{
		var i, len;
		if (s === 2)					// toggling
			s = (silent ? 1 : 0);		// choose opposite state
		if (s === 0 && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (s === 1 && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	Acts.prototype.SetMasterVolume = function (vol)
	{
		masterVolume = dbToLinear(vol);
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].updateVolume();
	};
	Acts.prototype.AddFilterEffect = function (tag, type, freq, detune, q, gain, mix)
	{
		if (api !== API_WEBAUDIO || type < 0 || type >= filterTypes.length)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FilterEffect(type, freq, detune, q, gain, mix));
	};
	Acts.prototype.AddDelayEffect = function (tag, delay, gain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DelayEffect(delay, dbToLinear(gain), mix));
	};
	Acts.prototype.AddFlangerEffect = function (tag, delay, modulation, freq, feedback, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FlangerEffect(delay / 1000, modulation / 1000, freq, feedback / 100, mix));
	};
	Acts.prototype.AddPhaserEffect = function (tag, freq, detune, q, mod, modfreq, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new PhaserEffect(freq, detune, q, mod, modfreq, mix));
	};
	Acts.prototype.AddConvolutionEffect = function (tag, file, norm, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		var doNormalize = (norm === 0);
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, false);
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		var fx;
		if (b.bufferObject)
		{
			fx = new ConvolveEffect(b.bufferObject, doNormalize, mix, src);
		}
		else
		{
			fx = new ConvolveEffect(null, doNormalize, mix, src);
			b.normalizeWhenReady = doNormalize;
			b.convolveWhenReady = fx;
		}
		addEffectForTag(tag, fx);
	};
	Acts.prototype.AddGainEffect = function (tag, g)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(dbToLinear(g)));
	};
	Acts.prototype.AddMuteEffect = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(0));	// re-use gain effect with 0 gain
	};
	Acts.prototype.AddTremoloEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new TremoloEffect(freq, mix));
	};
	Acts.prototype.AddRingModEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new RingModulatorEffect(freq, mix));
	};
	Acts.prototype.AddDistortionEffect = function (tag, threshold, headroom, drive, makeupgain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DistortionEffect(threshold, headroom, drive, makeupgain, mix));
	};
	Acts.prototype.AddCompressorEffect = function (tag, threshold, knee, ratio, attack, release)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new CompressorEffect(threshold, knee, ratio, attack / 1000, release / 1000));
	};
	Acts.prototype.AddAnalyserEffect = function (tag, fftSize, smoothing)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new AnalyserEffect(fftSize, smoothing));
	};
	Acts.prototype.RemoveEffects = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		var i, len, arr;
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				for (i = 0, len = arr.length; i < len; i++)
					arr[i].remove();
				arr.length = 0;
				reconnectEffects(tag);
			}
		}
	};
	Acts.prototype.SetEffectParameter = function (tag, index, param, value, ramp, time)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var arr;
		if (!effects.hasOwnProperty(tag))
			return;
		arr = effects[tag];
		if (index < 0 || index >= arr.length)
			return;
		arr[index].setParam(param, value, ramp, time);
	};
	Acts.prototype.SetListenerObject = function (obj_)
	{
		if (!obj_ || api !== API_WEBAUDIO)
			return;
		var inst = obj_.getFirstPicked();
		if (!inst)
			return;
		this.listenerTracker.setObject(inst);
		listenerX = inst.x;
		listenerY = inst.y;
	};
	Acts.prototype.SetListenerZ = function (z)
	{
		this.listenerZ = z;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Duration = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getDuration());
		else
			ret.set_float(0);
	};
	Exps.prototype.PlaybackTime = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getPlaybackTime());
		else
			ret.set_float(0);
	};
	Exps.prototype.Volume = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
		{
			var v = taggedAudio[0].getVolume();
			ret.set_float(linearToDb(v));
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.MasterVolume = function (ret)
	{
		ret.set_float(masterVolume);
	};
	Exps.prototype.EffectCount = function (ret, tag)
	{
		tag = tag.toLowerCase();
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		ret.set_int(arr ? arr.length : 0);
	};
	function getAnalyser(tag, index)
	{
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		if (arr && index >= 0 && index < arr.length && arr[index].freqBins)
			return arr[index];
		else
			return null;
	};
	Exps.prototype.AnalyserFreqBinCount = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		ret.set_int(analyser ? analyser.node["frequencyBinCount"] : 0);
	};
	Exps.prototype.AnalyserFreqBinAt = function (ret, tag, index, bin)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		bin = Math.floor(bin);
		var analyser = getAnalyser(tag, index);
		if (!analyser)
			ret.set_float(0);
		else if (bin < 0 || bin >= analyser.node["frequencyBinCount"])
			ret.set_float(0);
		else
			ret.set_float(analyser.freqBins[bin]);
	};
	Exps.prototype.AnalyserPeakLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.peak);
		else
			ret.set_float(0);
	};
	Exps.prototype.AnalyserRMSLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.rms);
		else
			ret.set_float(0);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Browser = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Browser.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		window.addEventListener("resize", function () {
			self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnResize, self);
		});
		if (typeof navigator.onLine !== "undefined")
		{
			window.addEventListener("online", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOnline, self);
			});
			window.addEventListener("offline", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOffline, self);
			});
		}
		if (typeof window.applicationCache !== "undefined")
		{
			window.applicationCache.addEventListener('updateready', function() {
				self.runtime.loadingprogress = 1;
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			window.applicationCache.addEventListener('progress', function(e) {
				self.runtime.loadingprogress = e["loaded"] / e["total"];
			});
		}
		if (!this.runtime.isDirectCanvas)
		{
			document.addEventListener("appMobi.device.update.available", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			document.addEventListener("backbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
			});
			document.addEventListener("menubutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
			});
			document.addEventListener("searchbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnSearchButton, self);
			});
			document.addEventListener("tizenhwkey", function (e) {
				var ret;
				switch (e["keyName"]) {
				case "back":
					ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
					if (!ret)
					{
						if (window["tizen"])
							window["tizen"]["application"]["getCurrentApplication"]()["exit"]();
					}
					break;
				case "menu":
					ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
					if (!ret)
						e.preventDefault();
					break;
				}
			});
		}
		this.runtime.addSuspendCallback(function(s) {
			if (s)
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageHidden, self);
			}
			else
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageVisible, self);
			}
		});
		this.is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	};
	function Cnds() {};
	Cnds.prototype.CookiesEnabled = function()
	{
		return navigator ? navigator.cookieEnabled : false;
	};
	Cnds.prototype.IsOnline = function()
	{
		return navigator ? navigator.onLine : false;
	};
	Cnds.prototype.HasJava = function()
	{
		return navigator ? navigator.javaEnabled() : false;
	};
	Cnds.prototype.OnOnline = function()
	{
		return true;
	};
	Cnds.prototype.OnOffline = function()
	{
		return true;
	};
	Cnds.prototype.IsDownloadingUpdate = function ()
	{
		if (typeof window["applicationCache"] === "undefined")
			return false;
		else
			return window["applicationCache"]["status"] === window["applicationCache"]["DOWNLOADING"];
	};
	Cnds.prototype.OnUpdateReady = function ()
	{
		return true;
	};
	Cnds.prototype.PageVisible = function ()
	{
		return !this.runtime.isSuspended;
	};
	Cnds.prototype.OnPageVisible = function ()
	{
		return true;
	};
	Cnds.prototype.OnPageHidden = function ()
	{
		return true;
	};
	Cnds.prototype.OnResize = function ()
	{
		return true;
	};
	Cnds.prototype.IsFullscreen = function ()
	{
		return !!(document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
	};
	Cnds.prototype.OnBackButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnMenuButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnSearchButton = function ()
	{
		return true;
	};
	Cnds.prototype.IsMetered = function ()
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			return false;
		return connection["metered"];
	};
	Cnds.prototype.IsCharging = function ()
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			return true;
		return battery["charging"];
	};
	Cnds.prototype.IsPortraitLandscape = function (p)
	{
		var current = (window.innerWidth <= window.innerHeight ? 0 : 1);
		return current === p;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Alert = function (msg)
	{
		if (!this.runtime.isDomFree)
			alert(msg.toString());
	};
	Acts.prototype.Close = function ()
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["forceToFinish"]();
		else if (window["tizen"])
			window["tizen"]["application"]["getCurrentApplication"]()["exit"]();
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.close();
	};
	Acts.prototype.Focus = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["focus"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.focus();
	};
	Acts.prototype.Blur = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["blur"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.blur();
	};
	Acts.prototype.GoBack = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.back)
			window.back();
	};
	Acts.prototype.GoForward = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.forward)
			window.forward();
	};
	Acts.prototype.GoHome = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.home)
			window.home();
	};
	Acts.prototype.GoToURL = function (url)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.location = url;
	};
	Acts.prototype.GoToURLWindow = function (url, tag)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.open(url, tag);
	};
	Acts.prototype.Reload = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree)
			window.location.reload();
	};
	var firstRequestFullscreen = true;
	var crruntime = null;
	function onFullscreenError()
	{
		if (typeof jQuery !== "undefined")
		{
			crruntime["setSize"](jQuery(window).width(), jQuery(window).height());
		}
	};
	Acts.prototype.RequestFullScreen = function (stretchmode)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Requesting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (stretchmode >= 2)
			stretchmode += 1;
		if (stretchmode === 6)
			stretchmode = 2;
		if (this.runtime.isNodeWebkit)
		{
			if (!this.runtime.isNodeFullscreen)
			{
				window["nwgui"]["Window"]["get"]()["enterFullscreen"]();
				this.runtime.isNodeFullscreen = true;
			}
		}
		else
		{
			if (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"])
			{
				return;
			}
			this.runtime.fullscreen_scaling = (stretchmode >= 2 ? stretchmode : 0);
			var elem = this.runtime.canvasdiv || this.runtime.canvas;
			if (firstRequestFullscreen)
			{
				firstRequestFullscreen = false;
				crruntime = this.runtime;
				elem.addEventListener("mozfullscreenerror", onFullscreenError);
				elem.addEventListener("webkitfullscreenerror", onFullscreenError);
				elem.addEventListener("msfullscreenerror", onFullscreenError);
				elem.addEventListener("fullscreenerror", onFullscreenError);
			}
			if (!cr.is_undefined(elem["requestFullscreen"]))
				elem["requestFullscreen"]();
			else if (!cr.is_undefined(elem["webkitRequestFullScreen"]))
			{
				if (typeof Element !== "undefined" && typeof Element["ALLOW_KEYBOARD_INPUT"] !== "undefined")
					elem["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
				else
					elem["webkitRequestFullScreen"]();
			}
			else if (!cr.is_undefined(elem["mozRequestFullScreen"]))
				elem["mozRequestFullScreen"]();
			else if (!cr.is_undefined(elem["msRequestFullscreen"]))
				elem["msRequestFullscreen"]();
		}
	};
	Acts.prototype.CancelFullScreen = function ()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Exiting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (this.runtime.isNodeWebkit)
		{
			if (this.runtime.isNodeFullscreen)
			{
				window["nwgui"]["Window"]["get"]()["leaveFullscreen"]();
				this.runtime.isNodeFullscreen = false;
			}
		}
		else
		{
			if (!cr.is_undefined(document["exitFullscreen"]))
				document["exitFullscreen"]();
			else if (!cr.is_undefined(document["webkitCancelFullScreen"]))
				document["webkitCancelFullScreen"]();
			else if (!cr.is_undefined(document["mozCancelFullScreen"]))
				document["mozCancelFullScreen"]();
			else if (!cr.is_undefined(document["msExitFullscreen"]))
				document["msExitFullscreen"]();
		}
	};
	Acts.prototype.Vibrate = function (pattern_)
	{
		try {
			var arr = pattern_.split(",");
			var i, len;
			for (i = 0, len = arr.length; i < len; i++)
			{
				arr[i] = parseInt(arr[i], 10);
			}
			if (navigator["vibrate"])
				navigator["vibrate"](arr);
			else if (navigator["mozVibrate"])
				navigator["mozVibrate"](arr);
			else if (navigator["webkitVibrate"])
				navigator["webkitVibrate"](arr);
			else if (navigator["msVibrate"])
				navigator["msVibrate"](arr);
		}
		catch (e) {}
	};
	Acts.prototype.InvokeDownload = function (url_, filename_)
	{
		var a = document.createElement("a");
		if (typeof a.download === "undefined")
		{
			window.open(url_);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = url_;
			a.download = filename_;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.InvokeDownloadString = function (str_, mimetype_, filename_)
	{
		var datauri = "data:" + mimetype_ + "," + encodeURIComponent(str_);
		var a = document.createElement("a");
		if (typeof a.download === "undefined")
		{
			window.open(datauri);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = datauri;
			a.download = filename_;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.ConsoleLog = function (type_, msg_)
	{
		if (typeof console === "undefined")
			return;
		if (type_ === 0 && console.log)
			console.log(msg_.toString());
		if (type_ === 1 && console.warn)
			console.warn(msg_.toString());
		if (type_ === 2 && console.error)
			console.error(msg_.toString());
	};
	Acts.prototype.ConsoleGroup = function (name_)
	{
		if (console && console.group)
			console.group(name_);
	};
	Acts.prototype.ConsoleGroupEnd = function ()
	{
		if (console && console.groupEnd)
			console.groupEnd();
	};
	Acts.prototype.ExecJs = function (js_)
	{
		if (eval)
			eval(js_);
	};
	var orientations = [
		"portrait",
		"landscape",
		"portrait-primary",
		"portrait-secondary",
		"landscape-primary",
		"landscape-secondary"
	];
	Acts.prototype.LockOrientation = function (o)
	{
		o = Math.floor(o);
		if (o < 0 || o >= orientations.length)
			return;
		this.runtime.autoLockOrientation = false;
		var orientation = orientations[o];
		if (screen["lockOrientation"])
			screen["lockOrientation"](orientation);
		else if (screen["webkitLockOrientation"])
			screen["webkitLockOrientation"](orientation);
		else if (screen["mozLockOrientation"])
			screen["mozLockOrientation"](orientation);
		else if (screen["msLockOrientation"])
			screen["msLockOrientation"](orientation);
	};
	Acts.prototype.UnlockOrientation = function ()
	{
		this.runtime.autoLockOrientation = false;
		if (screen["unlockOrientation"])
			screen["unlockOrientation"]();
		else if (screen["webkitUnlockOrientation"])
			screen["webkitUnlockOrientation"]();
		else if (screen["mozUnlockOrientation"])
			screen["mozUnlockOrientation"]();
		else if (screen["msUnlockOrientation"])
			screen["msUnlockOrientation"]();
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.URL = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.toString());
	};
	Exps.prototype.Protocol = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.protocol);
	};
	Exps.prototype.Domain = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hostname);
	};
	Exps.prototype.PathName = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.pathname);
	};
	Exps.prototype.Hash = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hash);
	};
	Exps.prototype.Referrer = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.referrer);
	};
	Exps.prototype.Title = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.title);
	};
	Exps.prototype.Name = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appName);
	};
	Exps.prototype.Version = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appVersion);
	};
	Exps.prototype.Language = function (ret)
	{
		if (navigator && navigator.language)
			ret.set_string(navigator.language);
		else
			ret.set_string("");
	};
	Exps.prototype.Platform = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.platform);
	};
	Exps.prototype.Product = function (ret)
	{
		if (navigator && navigator.product)
			ret.set_string(navigator.product);
		else
			ret.set_string("");
	};
	Exps.prototype.Vendor = function (ret)
	{
		if (navigator && navigator.vendor)
			ret.set_string(navigator.vendor);
		else
			ret.set_string("");
	};
	Exps.prototype.UserAgent = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.userAgent);
	};
	Exps.prototype.QueryString = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.search);
	};
	Exps.prototype.QueryParam = function (ret, paramname)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_string("");
			return;
		}
		var match = RegExp('[?&]' + paramname + '=([^&]*)').exec(window.location.search);
		if (match)
			ret.set_string(decodeURIComponent(match[1].replace(/\+/g, ' ')));
		else
			ret.set_string("");
	};
	Exps.prototype.Bandwidth = function (ret)
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
			ret.set_float(connection["bandwidth"]);
	};
	Exps.prototype.BatteryLevel = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			ret.set_float(1);
		else
			ret.set_float(battery["level"]);
	};
	Exps.prototype.BatteryTimeLeft = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
			ret.set_float(battery["dischargingTime"]);
	};
	Exps.prototype.ExecJS = function (ret, js_)
	{
		if (!eval)
		{
			ret.set_any(0);
			return;
		}
		var result = eval(js_);
		if (typeof result === "number")
			ret.set_any(result);
		else if (typeof result === "string")
			ret.set_any(result);
		else if (typeof result === "boolean")
			ret.set_any(result ? 1 : 0);
		else
			ret.set_any(0);
	};
	Exps.prototype.ScreenWidth = function (ret)
	{
		ret.set_int(screen.width);
	};
	Exps.prototype.ScreenHeight = function (ret)
	{
		ret.set_int(screen.height);
	};
	Exps.prototype.DevicePixelRatio = function (ret)
	{
		ret.set_float(this.runtime.devicePixelRatio);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Keyboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Keyboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.keyMap = new Array(256);	// stores key up/down state
		this.usedKeys = new Array(256);
		this.triggerKey = 0;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				function(info) {
					self.onKeyDown(info);
				}
			);
			jQuery(document).keyup(
				function(info) {
					self.onKeyUp(info);
				}
			);
		}
	};
	var keysToBlockWhenFramed = [32, 33, 34, 35, 36, 37, 38, 39, 40, 44];
	instanceProto.onKeyDown = function (info)
	{
		var alreadyPreventedDefault = false;
		if (window != window.top && keysToBlockWhenFramed.indexOf(info.which) > -1)
		{
			info.preventDefault();
			alreadyPreventedDefault = true;
			info.stopPropagation();
		}
		if (this.keyMap[info.which])
		{
			if (this.usedKeys[info.which] && !alreadyPreventedDefault)
				info.preventDefault();
			return;
		}
		this.keyMap[info.which] = true;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCode, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2)
		{
			this.usedKeys[info.which] = true;
			if (!alreadyPreventedDefault)
				info.preventDefault();
		}
	};
	instanceProto.onKeyUp = function (info)
	{
		this.keyMap[info.which] = false;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKeyReleased, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCodeReleased, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2 || this.usedKeys[info.which])
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return { "triggerKey": this.triggerKey };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.triggerKey = o["triggerKey"];
	};
	function Cnds() {};
	Cnds.prototype.IsKeyDown = function(key)
	{
		return this.keyMap[key];
	};
	Cnds.prototype.OnKey = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnAnyKey = function(key)
	{
		return true;
	};
	Cnds.prototype.OnAnyKeyReleased = function(key)
	{
		return true;
	};
	Cnds.prototype.OnKeyReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.IsKeyCodeDown = function(key)
	{
		key = Math.floor(key);
		if (key < 0 || key >= this.keyMap.length)
			return false;
		return this.keyMap[key];
	};
	Cnds.prototype.OnKeyCode = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnKeyCodeReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LastKeyCode = function (ret)
	{
		ret.set_int(this.triggerKey);
	};
	function fixedStringFromCharCode(kc)
	{
		kc = Math.floor(kc);
		switch (kc) {
		case 8:		return "backspace";
		case 9:		return "tab";
		case 13:	return "enter";
		case 16:	return "shift";
		case 17:	return "control";
		case 18:	return "alt";
		case 19:	return "pause";
		case 20:	return "capslock";
		case 27:	return "esc";
		case 33:	return "pageup";
		case 34:	return "pagedown";
		case 35:	return "end";
		case 36:	return "home";
		case 37:	return "←";
		case 38:	return "↑";
		case 39:	return "→";
		case 40:	return "↓";
		case 45:	return "insert";
		case 46:	return "del";
		case 91:	return "left window key";
		case 92:	return "right window key";
		case 93:	return "select";
		case 96:	return "numpad 0";
		case 97:	return "numpad 1";
		case 98:	return "numpad 2";
		case 99:	return "numpad 3";
		case 100:	return "numpad 4";
		case 101:	return "numpad 5";
		case 102:	return "numpad 6";
		case 103:	return "numpad 7";
		case 104:	return "numpad 8";
		case 105:	return "numpad 9";
		case 106:	return "numpad *";
		case 107:	return "numpad +";
		case 109:	return "numpad -";
		case 110:	return "numpad .";
		case 111:	return "numpad /";
		case 112:	return "F1";
		case 113:	return "F2";
		case 114:	return "F3";
		case 115:	return "F4";
		case 116:	return "F5";
		case 117:	return "F6";
		case 118:	return "F7";
		case 119:	return "F8";
		case 120:	return "F9";
		case 121:	return "F10";
		case 122:	return "F11";
		case 123:	return "F12";
		case 144:	return "numlock";
		case 145:	return "scroll lock";
		case 186:	return ";";
		case 187:	return "=";
		case 188:	return ",";
		case 189:	return "-";
		case 190:	return ".";
		case 191:	return "/";
		case 192:	return "'";
		case 219:	return "[";
		case 220:	return "\\";
		case 221:	return "]";
		case 222:	return "#";
		case 223:	return "`";
		default:	return String.fromCharCode(kc);
		}
	};
	Exps.prototype.StringFromKeyCode = function (ret, kc)
	{
		ret.set_string(fixedStringFromCharCode(kc));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Mouse = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Mouse.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.buttonMap = new Array(4);		// mouse down states
		this.mouseXcanvas = 0;				// mouse position relative to canvas
		this.mouseYcanvas = 0;
		this.triggerButton = 0;
		this.triggerType = 0;
		this.triggerDir = 0;
		this.handled = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
			jQuery(document).dblclick(
				function(info) {
					self.onDoubleClick(info);
				}
			);
			var wheelevent = function(info) {
								self.onWheel(info);
							};
			document.addEventListener("mousewheel", wheelevent, false);
			document.addEventListener("DOMMouseScroll", wheelevent, false);
		}
	};
	var dummyoffset = {left: 0, top: 0};
	instanceProto.onMouseMove = function(info)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		this.mouseXcanvas = info.pageX - offset.left;
		this.mouseYcanvas = info.pageY - offset.top;
	};
	instanceProto.mouseInGame = function ()
	{
		if (this.runtime.fullscreen_mode > 0)
			return true;
		return this.mouseXcanvas >= 0 && this.mouseYcanvas >= 0
		    && this.mouseXcanvas < this.runtime.width && this.mouseYcanvas < this.runtime.height;
	};
	instanceProto.onMouseDown = function(info)
	{
		if (!this.mouseInGame())
			return;
		if (this.runtime.had_a_click)
			info.preventDefault();
		this.buttonMap[info.which] = true;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 0;					// single click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onMouseUp = function(info)
	{
		if (!this.buttonMap[info.which])
			return;
		if (this.runtime.had_a_click)
			info.preventDefault();
		this.runtime.had_a_click = true;
		this.buttonMap[info.which] = false;
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onDoubleClick = function(info)
	{
		if (!this.mouseInGame())
			return;
		info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 1;					// double click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onWheel = function (info)
	{
		var delta = info.wheelDelta ? info.wheelDelta : info.detail ? -info.detail : 0;
		this.triggerDir = (delta < 0 ? 0 : 1);
		this.handled = false;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnWheel, this);
		this.runtime.isInUserInputEvent = false;
		if (this.handled)
			info.preventDefault();
	};
	function Cnds() {};
	Cnds.prototype.OnClick = function (button, type)
	{
		return button === this.triggerButton && type === this.triggerType;
	};
	Cnds.prototype.OnAnyClick = function ()
	{
		return true;
	};
	Cnds.prototype.IsButtonDown = function (button)
	{
		return this.buttonMap[button + 1];	// jQuery uses 1-based buttons for some reason
	};
	Cnds.prototype.OnRelease = function (button)
	{
		return button === this.triggerButton;
	};
	Cnds.prototype.IsOverObject = function (obj)
	{
		var cnd = this.runtime.getCurrentCondition();
		var mx = this.mouseXcanvas;
		var my = this.mouseYcanvas;
		return cr.xor(this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.inverted), cnd.inverted);
	};
	Cnds.prototype.OnObjectClicked = function (button, type, obj)
	{
		if (button !== this.triggerButton || type !== this.triggerType)
			return false;	// wrong click type
		return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
	};
	Cnds.prototype.OnWheel = function (dir)
	{
		this.handled = true;
		return dir === this.triggerDir;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetCursor = function (c)
	{
		var cursor_style = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
		if (this.runtime.canvas && this.runtime.canvas.style)
			this.runtime.canvas.style.cursor = cursor_style;
	};
	Acts.prototype.SetCursorSprite = function (obj)
	{
		if (this.runtime.isDomFree || this.runtime.isMobile || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst || !inst.curFrame)
			return;
		var frame = inst.curFrame;
		var datauri = frame.getDataUri();
		var cursor_style = "url(" + datauri + ") " + Math.round(frame.hotspotX * frame.width) + " " + Math.round(frame.hotspotY * frame.height) + ", auto";
		jQuery(this.runtime.canvas).css("cursor", cursor_style);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.X = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		ret.set_float(this.mouseXcanvas);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		ret.set_float(this.mouseYcanvas);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.NodeWebkit = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var isNodeWebkit = false;
	var path = null;
	var fs = null;
	var gui = null;
	var child_process = null;
	var nw_appfolder = "";
	var nw_userfolder = "";
	var slash = "\\";
	var filelist = [];
	var droppedfile = "";
	var chosenpath = "";
	var pluginProto = cr.plugins_.NodeWebkit.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		isNodeWebkit = this.runtime.isNodeWebkit;
		var self = this;
		if (isNodeWebkit)
		{
			path = require("path");
			fs = require("fs");
			child_process = require("child_process");
			if (process["platform"] !== "win32")
				slash = "/";
			nw_appfolder = path["dirname"](process["execPath"]) + slash;
			nw_userfolder = (process["env"]["HOME"] || process["env"]["HOMEPATH"] || process["env"]["USERPROFILE"]) + slash;
			gui = require("nw.gui");
			window.ondrop = function (e)
			{
				e.preventDefault();
				for (var i = 0; i < e["dataTransfer"]["files"].length; ++i)
				{
					droppedfile = e["dataTransfer"]["files"][i]["path"];
					self.runtime.trigger(cr.plugins_.NodeWebkit.prototype.cnds.OnFileDrop, self);
				}
				return false;
			};
			jQuery("#c2nwOpenFileDialog").change(function (e) {
				chosenpath = jQuery(this).val();
				self.runtime.trigger(cr.plugins_.NodeWebkit.prototype.cnds.OnOpenDlg, self);
			});
			jQuery("#c2nwChooseFolderDialog").change(function (e) {
				chosenpath = jQuery(this).val();
				self.runtime.trigger(cr.plugins_.NodeWebkit.prototype.cnds.OnFolderDlg, self);
			});
			jQuery("#c2nwSaveDialog").change(function (e) {
				chosenpath = jQuery(this).val();
				self.runtime.trigger(cr.plugins_.NodeWebkit.prototype.cnds.OnSaveDlg, self);
			});
		}
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.saveToJSON = function ()
	{
		return {
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
	};
	function Cnds() {};
	Cnds.prototype.PathExists = function (path_)
	{
		if (isNodeWebkit)
			return fs["existsSync"](path_);
		else
			return false;
	};
	Cnds.prototype.OnFileDrop = function ()
	{
		return true;
	};
	Cnds.prototype.OnOpenDlg = function ()
	{
		return true;
	};
	Cnds.prototype.OnFolderDlg = function ()
	{
		return true;
	};
	Cnds.prototype.OnSaveDlg = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.WriteFile = function (path_, contents_)
	{
		if (!isNodeWebkit)
			return;
		try {
			fs["writeFileSync"](path_, contents_, {"encoding": "utf8"});
		}
		catch (e)
		{}
	};
	Acts.prototype.RenameFile = function (old_, new_)
	{
		if (!isNodeWebkit)
			return;
		try {
			fs["renameSync"](old_, new_);
		}
		catch (e)
		{}
	};
	Acts.prototype.DeleteFile = function (path_)
	{
		if (!isNodeWebkit)
			return;
		try {
			fs["unlinkSync"](path_);
		}
		catch (e)
		{}
	};
	Acts.prototype.CopyFile = function (path_, dest_)
	{
		if (!isNodeWebkit || path_ === dest_)
			return;
		try {
			var contents = fs["readFileSync"](path_, {"flags": "rb"});
			fs["writeFileSync"](dest_, contents, {"flags": "wb"});
		}
		catch (e)
		{}
	};
	Acts.prototype.MoveFile = function (path_, dest_)
	{
		if (!isNodeWebkit || path_ === dest_)
			return;
		try {
			var contents = fs["readFileSync"](path_, {"flags": "rb"});
			fs["writeFileSync"](dest_, contents, {"flags": "wb"});
			if (fs["existsSync"](dest_))
				fs["unlinkSync"](path_);
		}
		catch (e)
		{}
	};
	Acts.prototype.RunFile = function (path_)
	{
		if (!isNodeWebkit)
			return;
		child_process["exec"](path_, function() {});
	};
	Acts.prototype.CreateFolder = function (path_)
	{
		if (!isNodeWebkit)
			return;
		try {
			fs["mkdirSync"](path_);
		}
		catch (e)
		{}
	};
	Acts.prototype.AppendFile = function (path_, contents_)
	{
		if (!isNodeWebkit)
			return;
		try {
			fs["appendFileSync"](path_, contents_, {"encoding": "utf8"});
		}
		catch (e)
		{}
	};
	Acts.prototype.ListFiles = function (path_)
	{
		if (!isNodeWebkit)
			return;
		try {
			filelist = fs["readdirSync"](path_);
		}
		catch (e)
		{}
		if (!filelist)
			filelist = [];
	};
	Acts.prototype.ShowOpenDlg = function (accept_)
	{
		if (!isNodeWebkit)
			return;
		var dlg = jQuery("#c2nwOpenFileDialog");
		dlg.attr("accept", accept_);
		dlg.trigger("click");
	};
	Acts.prototype.ShowFolderDlg = function (accept_)
	{
		if (!isNodeWebkit)
			return;
		jQuery("#c2nwChooseFolderDialog").trigger("click");
	};
	Acts.prototype.ShowSaveDlg = function (accept_)
	{
		if (!isNodeWebkit)
			return;
		var dlg = jQuery("#c2nwSaveDialog");
		dlg.attr("accept", accept_);
		dlg.trigger("click");
	};
	Acts.prototype.SetWindowX = function (x_)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["x"] = x_;
	};
	Acts.prototype.SetWindowY = function (y_)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["y"] = y_;
	};
	Acts.prototype.SetWindowWidth = function (w_)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["width"] = w_;
	};
	Acts.prototype.SetWindowHeight = function (h_)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["height"] = h_;
	};
	Acts.prototype.SetWindowTitle = function (str)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["title"] = str;
	};
	Acts.prototype.WindowMinimize = function ()
	{
		if (!isNodeWebkit)
			return;
		var win = gui["Window"]["get"]();
		setTimeout(function () {
			win["minimize"]();
		}, 100);
	};
	Acts.prototype.WindowMaximize = function ()
	{
		if (!isNodeWebkit)
			return;
		var win = gui["Window"]["get"]();
		setTimeout(function () {
			win["maximize"]();
		}, 100);
	};
	Acts.prototype.WindowUnmaximize = function ()
	{
		if (!isNodeWebkit)
			return;
		var win = gui["Window"]["get"]();
		setTimeout(function () {
			win["unmaximize"]();
		}, 100);
	};
	Acts.prototype.WindowRestore = function ()
	{
		if (!isNodeWebkit)
			return;
		var win = gui["Window"]["get"]();
		setTimeout(function () {
			win["restore"]();
		}, 100);
	};
	Acts.prototype.WindowRequestAttention = function (request_)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["requestAttention"](request_ === 0);
	};
	Acts.prototype.WindowSetMaxSize = function (w, h)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["setMaximumSize"](w, h);
	};
	Acts.prototype.WindowSetMinSize = function (w, h)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["setMinimumSize"](w, h);
	};
	Acts.prototype.WindowSetResizable = function (x)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["setResizable"](x !== 0);
	};
	Acts.prototype.WindowSetAlwaysOnTop = function (x)
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["setAlwaysOnTop"](x !== 0);
	};
	Acts.prototype.ShowDevTools = function ()
	{
		if (!isNodeWebkit)
			return;
		gui["Window"]["get"]()["showDevTools"]();
	};
	Acts.prototype.SetClipboardText = function (str)
	{
		if (!isNodeWebkit)
			return;
		gui["Clipboard"]["get"]()["set"](str);
	};
	Acts.prototype.ClearClipboard = function ()
	{
		if (!isNodeWebkit)
			return;
		gui["Clipboard"]["get"]()["clear"]();
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.AppFolder = function (ret)
	{
		ret.set_string(nw_appfolder);
	};
	Exps.prototype.UserFolder = function (ret)
	{
		ret.set_string(nw_userfolder);
	};
	Exps.prototype.ReadFile = function (ret, path_)
	{
		if (!isNodeWebkit)
		{
			ret.set_string("");
			return;
		}
		var contents = "";
		try {
			contents = fs["readFileSync"](path_, {"encoding": "utf8"});
		}
		catch (e) {}
		ret.set_string(contents);
	};
	Exps.prototype.ListCount = function (ret)
	{
		ret.set_int(filelist.length);
	};
	Exps.prototype.ListAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= filelist.length)
			ret.set_string("");
		else
			ret.set_string(filelist[index]);
	};
	Exps.prototype.DroppedFile = function (ret)
	{
		ret.set_string(droppedfile);
	};
	Exps.prototype.ChosenPath = function (ret)
	{
		ret.set_string(chosenpath);
	};
	Exps.prototype.WindowX = function (ret)
	{
		ret.set_int(isNodeWebkit ? gui["Window"]["get"]()["x"] : 0);
	};
	Exps.prototype.WindowY = function (ret)
	{
		ret.set_int(isNodeWebkit ? gui["Window"]["get"]()["y"] : 0);
	};
	Exps.prototype.WindowWidth = function (ret)
	{
		ret.set_int(isNodeWebkit ? gui["Window"]["get"]()["width"] : 0);
	};
	Exps.prototype.WindowHeight = function (ret)
	{
		ret.set_int(isNodeWebkit ? gui["Window"]["get"]()["height"] : 0);
	};
	Exps.prototype.WindowTitle = function (ret)
	{
		ret.set_string(isNodeWebkit ? (gui["Window"]["get"]()["title"] || "") : 0);
	};
	Exps.prototype.ClipboardText = function (ret)
	{
		ret.set_string(isNodeWebkit ? (gui["Clipboard"]["get"]()["get"]() || "") : 0);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Particles = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Particles.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.webGL_texture = null;
		this.runtime.wait_for_textures.push(this.texture_img);
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	function Particle(owner)
	{
		this.owner = owner;
		this.active = false;
		this.x = 0;
		this.y = 0;
		this.speed = 0;
		this.angle = 0;
		this.opacity = 1;
		this.grow = 0;
		this.size = 0;
		this.gs = 0;			// gravity speed
		this.age = 0;
		cr.seal(this);
	};
	Particle.prototype.init = function ()
	{
		var owner = this.owner;
		this.x = owner.x - (owner.xrandom / 2) + (Math.random() * owner.xrandom);
		this.y = owner.y - (owner.yrandom / 2) + (Math.random() * owner.yrandom);
		this.speed = owner.initspeed - (owner.speedrandom / 2) + (Math.random() * owner.speedrandom);
		this.angle = owner.angle - (owner.spraycone / 2) + (Math.random() * owner.spraycone);
		this.opacity = owner.initopacity;
		this.size = owner.initsize - (owner.sizerandom / 2) + (Math.random() * owner.sizerandom);
		this.grow = owner.growrate - (owner.growrandom / 2) + (Math.random() * owner.growrandom);
		this.gs = 0;
		this.age = 0;
	};
	Particle.prototype.tick = function (dt)
	{
		var owner = this.owner;
		this.x += Math.cos(this.angle) * this.speed * dt;
		this.y += Math.sin(this.angle) * this.speed * dt;
		this.y += this.gs * dt;
		this.speed += owner.acc * dt;
		this.size += this.grow * dt;
		this.gs += owner.g * dt;
		this.age += dt;
		if (this.size < 1)
		{
			this.active = false;
			return;
		}
		if (owner.lifeanglerandom !== 0)
			this.angle += (Math.random() * owner.lifeanglerandom * dt) - (owner.lifeanglerandom * dt / 2);
		if (owner.lifespeedrandom !== 0)
			this.speed += (Math.random() * owner.lifespeedrandom * dt) - (owner.lifespeedrandom * dt / 2);
		if (owner.lifeopacityrandom !== 0)
		{
			this.opacity += (Math.random() * owner.lifeopacityrandom * dt) - (owner.lifeopacityrandom * dt / 2);
			if (this.opacity < 0)
				this.opacity = 0;
			else if (this.opacity > 1)
				this.opacity = 1;
		}
		if (owner.destroymode <= 1 && this.age >= owner.timeout)
		{
			this.active = false;
		}
		if (owner.destroymode === 2 && this.speed <= 0)
		{
			this.active = false;
		}
	};
	Particle.prototype.draw = function (ctx)
	{
		var curopacity = this.owner.opacity * this.opacity;
		if (curopacity === 0)
			return;
		if (this.owner.destroymode === 0)
			curopacity *= 1 - (this.age / this.owner.timeout);
		ctx.globalAlpha = curopacity;
		var drawx = this.x - this.size / 2;
		var drawy = this.y - this.size / 2;
		if (this.owner.runtime.pixel_rounding)
		{
			drawx = (drawx + 0.5) | 0;
			drawy = (drawy + 0.5) | 0;
		}
		ctx.drawImage(this.owner.type.texture_img, drawx, drawy, this.size, this.size);
	};
	Particle.prototype.drawGL = function (glw)
	{
		var curopacity = this.owner.opacity * this.opacity;
		if (this.owner.destroymode === 0)
			curopacity *= 1 - (this.age / this.owner.timeout);
		var drawsize = this.size;
		var scaleddrawsize = drawsize * this.owner.particlescale;
		var drawx = this.x - drawsize / 2;
		var drawy = this.y - drawsize / 2;
		if (this.owner.runtime.pixel_rounding)
		{
			drawx = (drawx + 0.5) | 0;
			drawy = (drawy + 0.5) | 0;
		}
		if (scaleddrawsize < 1 || curopacity === 0)
			return;
		if (scaleddrawsize < glw.minPointSize || scaleddrawsize > glw.maxPointSize)
		{
			glw.setOpacity(curopacity);
			glw.quad(drawx, drawy, drawx + drawsize, drawy, drawx + drawsize, drawy + drawsize, drawx, drawy + drawsize);
		}
		else
			glw.point(this.x, this.y, scaleddrawsize, curopacity);
	};
	Particle.prototype.left = function ()
	{
		return this.x - this.size / 2;
	};
	Particle.prototype.right = function ()
	{
		return this.x + this.size / 2;
	};
	Particle.prototype.top = function ()
	{
		return this.y - this.size / 2;
	};
	Particle.prototype.bottom = function ()
	{
		return this.y + this.size / 2;
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var deadparticles = [];
	instanceProto.onCreate = function()
	{
		var props = this.properties;
		this.rate = props[0];
		this.spraycone = cr.to_radians(props[1]);
		this.spraytype = props[2];			// 0 = continuous, 1 = one-shot
		this.spraying = true;				// for continuous mode only
		this.initspeed = props[3];
		this.initsize = props[4];
		this.initopacity = props[5] / 100.0;
		this.growrate = props[6];
		this.xrandom = props[7];
		this.yrandom = props[8];
		this.speedrandom = props[9];
		this.sizerandom = props[10];
		this.growrandom = props[11];
		this.acc = props[12];
		this.g = props[13];
		this.lifeanglerandom = props[14];
		this.lifespeedrandom = props[15];
		this.lifeopacityrandom = props[16];
		this.destroymode = props[17];		// 0 = fade, 1 = timeout, 2 = stopped
		this.timeout = props[18];
		this.particleCreateCounter = 0;
		this.particlescale = 1;
		this.particleBoxLeft = this.x;
		this.particleBoxTop = this.y;
		this.particleBoxRight = this.x;
		this.particleBoxBottom = this.y;
		this.add_bbox_changed_callback(function (self) {
			self.bbox.set(self.particleBoxLeft, self.particleBoxTop, self.particleBoxRight, self.particleBoxBottom);
			self.bquad.set_from_rect(self.bbox);
			self.bbox_changed = false;
		});
		if (!this.recycled)
			this.particles = [];
		this.runtime.tickMe(this);
		this.type.loadTextures();
		if (this.spraytype === 1)
		{
			for (var i = 0; i < this.rate; i++)
				this.allocateParticle().opacity = 0;
		}
		this.first_tick = true;		// for re-init'ing one-shot particles on first tick so they assume any new angle/position
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"r": this.rate,
			"sc": this.spraycone,
			"st": this.spraytype,
			"s": this.spraying,
			"isp": this.initspeed,
			"isz": this.initsize,
			"io": this.initopacity,
			"gr": this.growrate,
			"xr": this.xrandom,
			"yr": this.yrandom,
			"spr": this.speedrandom,
			"szr": this.sizerandom,
			"grnd": this.growrandom,
			"acc": this.acc,
			"g": this.g,
			"lar": this.lifeanglerandom,
			"lsr": this.lifespeedrandom,
			"lor": this.lifeopacityrandom,
			"dm": this.destroymode,
			"to": this.timeout,
			"pcc": this.particleCreateCounter,
			"ft": this.first_tick,
			"p": []
		};
		var i, len, p;
		var arr = o["p"];
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			arr.push([p.x, p.y, p.speed, p.angle, p.opacity, p.grow, p.size, p.gs, p.age]);
		}
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.rate = o["r"];
		this.spraycone = o["sc"];
		this.spraytype = o["st"];
		this.spraying = o["s"];
		this.initspeed = o["isp"];
		this.initsize = o["isz"];
		this.initopacity = o["io"];
		this.growrate = o["gr"];
		this.xrandom = o["xr"];
		this.yrandom = o["yr"];
		this.speedrandom = o["spr"];
		this.sizerandom = o["szr"];
		this.growrandom = o["grnd"];
		this.acc = o["acc"];
		this.g = o["g"];
		this.lifeanglerandom = o["lar"];
		this.lifespeedrandom = o["lsr"];
		this.lifeopacityrandom = o["lor"];
		this.destroymode = o["dm"];
		this.timeout = o["to"];
		this.particleCreateCounter = o["pcc"];
		this.first_tick = o["ft"];
		deadparticles.push.apply(deadparticles, this.particles);
		this.particles.length = 0;
		var i, len, p, d;
		var arr = o["p"];
		for (i = 0, len = arr.length; i < len; i++)
		{
			p = this.allocateParticle();
			d = arr[i];
			p.x = d[0];
			p.y = d[1];
			p.speed = d[2];
			p.angle = d[3];
			p.opacity = d[4];
			p.grow = d[5];
			p.size = d[6];
			p.gs = d[7];
			p.age = d[8];
		}
	};
	instanceProto.onDestroy = function ()
	{
		deadparticles.push.apply(deadparticles, this.particles);
		this.particles.length = 0;
	};
	instanceProto.allocateParticle = function ()
	{
		var p;
		if (deadparticles.length)
		{
			p = deadparticles.pop();
			p.owner = this;
		}
		else
			p = new Particle(this);
		this.particles.push(p);
		p.active = true;
		return p;
	};
	instanceProto.tick = function()
	{
		var dt = this.runtime.getDt(this);
		var i, len, p, n, j;
		if (this.spraytype === 0 && this.spraying)
		{
			this.particleCreateCounter += dt * this.rate;
			n = cr.floor(this.particleCreateCounter);
			this.particleCreateCounter -= n;
			for (i = 0; i < n; i++)
			{
				p = this.allocateParticle();
				p.init();
			}
		}
		this.particleBoxLeft = this.x;
		this.particleBoxTop = this.y;
		this.particleBoxRight = this.x;
		this.particleBoxBottom = this.y;
		for (i = 0, j = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			this.particles[j] = p;
			this.runtime.redraw = true;
			if (this.spraytype === 1 && this.first_tick)
				p.init();
			p.tick(dt);
			if (!p.active)
			{
				deadparticles.push(p);
				continue;
			}
			if (p.left() < this.particleBoxLeft)
				this.particleBoxLeft = p.left();
			if (p.right() > this.particleBoxRight)
				this.particleBoxRight = p.right();
			if (p.top() < this.particleBoxTop)
				this.particleBoxTop = p.top();
			if (p.bottom() > this.particleBoxBottom)
				this.particleBoxBottom = p.bottom();
			j++;
		}
		this.particles.length = j;
		this.set_bbox_changed();
		this.first_tick = false;
		if (this.spraytype === 1 && this.particles.length === 0)
			this.runtime.DestroyInstance(this);
	};
	instanceProto.draw = function (ctx)
	{
		var i, len, p, layer = this.layer;
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			if (p.right() >= layer.viewLeft && p.bottom() >= layer.viewTop && p.left() <= layer.viewRight && p.top() <= layer.viewBottom)
			{
				p.draw(ctx);
			}
		}
	};
	instanceProto.drawGL = function (glw)
	{
		this.particlescale = this.layer.getScale();
		glw.setTexture(this.type.webGL_texture);
		var i, len, p, layer = this.layer;
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			if (p.right() >= layer.viewLeft && p.bottom() >= layer.viewTop && p.left() <= layer.viewRight && p.top() <= layer.viewBottom)
			{
				p.drawGL(glw);
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.IsSpraying = function ()
	{
		return this.spraying;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpraying = function (set_)
	{
		this.spraying = (set_ !== 0);
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.SetRate = function (x)
	{
		this.rate = x;
		var diff, i;
		if (this.spraytype === 1 && this.first_tick)
		{
			if (x < this.particles.length)
			{
				diff = this.particles.length - x;
				for (i = 0; i < diff; i++)
					deadparticles.push(this.particles.pop());
			}
			else if (x > this.particles.length)
			{
				diff = x - this.particles.length;
				for (i = 0; i < diff; i++)
					this.allocateParticle().opacity = 0;
			}
		}
	};
	Acts.prototype.SetSprayCone = function (x)
	{
		this.spraycone = cr.to_radians(x);
	};
	Acts.prototype.SetInitSpeed = function (x)
	{
		this.initspeed = x;
	};
	Acts.prototype.SetInitSize = function (x)
	{
		this.initsize = x;
	};
	Acts.prototype.SetInitOpacity = function (x)
	{
		this.initopacity = x / 100;
	};
	Acts.prototype.SetGrowRate = function (x)
	{
		this.growrate = x;
	};
	Acts.prototype.SetXRandomiser = function (x)
	{
		this.xrandom = x;
	};
	Acts.prototype.SetYRandomiser = function (x)
	{
		this.yrandom = x;
	};
	Acts.prototype.SetSpeedRandomiser = function (x)
	{
		this.speedrandom = x;
	};
	Acts.prototype.SetSizeRandomiser = function (x)
	{
		this.sizerandom = x;
	};
	Acts.prototype.SetGrowRateRandomiser = function (x)
	{
		this.growrandom = x;
	};
	Acts.prototype.SetParticleAcc = function (x)
	{
		this.acc = x;
	};
	Acts.prototype.SetGravity = function (x)
	{
		this.g = x;
	};
	Acts.prototype.SetAngleRandomiser = function (x)
	{
		this.lifeanglerandom = x;
	};
	Acts.prototype.SetSpeedRandomiser = function (x)
	{
		this.lifespeedrandom = x;
	};
	Acts.prototype.SetOpacityRandomiser = function (x)
	{
		this.lifeopacityrandom = x;
	};
	Acts.prototype.SetTimeout = function (x)
	{
		this.timeout = x;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ParticleCount = function (ret)
	{
		ret.set_int(this.particles.length);
	};
	Exps.prototype.Rate = function (ret)
	{
		ret.set_float(this.rate);
	};
	Exps.prototype.SprayCone = function (ret)
	{
		ret.set_float(cr.to_degrees(this.spraycone));
	};
	Exps.prototype.InitSpeed = function (ret)
	{
		ret.set_float(this.initspeed);
	};
	Exps.prototype.InitSize = function (ret)
	{
		ret.set_float(this.initsize);
	};
	Exps.prototype.InitOpacity = function (ret)
	{
		ret.set_float(this.initopacity * 100);
	};
	Exps.prototype.InitGrowRate = function (ret)
	{
		ret.set_float(this.growrate);
	};
	Exps.prototype.XRandom = function (ret)
	{
		ret.set_float(this.xrandom);
	};
	Exps.prototype.YRandom = function (ret)
	{
		ret.set_float(this.yrandom);
	};
	Exps.prototype.InitSpeedRandom = function (ret)
	{
		ret.set_float(this.speedrandom);
	};
	Exps.prototype.InitSizeRandom = function (ret)
	{
		ret.set_float(this.sizerandom);
	};
	Exps.prototype.InitGrowRandom = function (ret)
	{
		ret.set_float(this.growrandom);
	};
	Exps.prototype.ParticleAcceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Gravity = function (ret)
	{
		ret.set_float(this.g);
	};
	Exps.prototype.ParticleAngleRandom = function (ret)
	{
		ret.set_float(this.lifeanglerandom);
	};
	Exps.prototype.ParticleSpeedRandom = function (ret)
	{
		ret.set_float(this.lifespeedrandom);
	};
	Exps.prototype.ParticleOpacityRandom = function (ret)
	{
		ret.set_float(this.lifeopacityrandom);
	};
	Exps.prototype.Timeout = function (ret)
	{
		ret.set_float(this.timeout);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Sprite = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Sprite.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	function frame_getDataUri()
	{
		if (this.datauri.length === 0)
		{
			var tmpcanvas = document.createElement("canvas");
			tmpcanvas.width = this.width;
			tmpcanvas.height = this.height;
			var tmpctx = tmpcanvas.getContext("2d");
			if (this.spritesheeted)
			{
				tmpctx.drawImage(this.texture_img, this.offx, this.offy, this.width, this.height,
										 0, 0, this.width, this.height);
			}
			else
			{
				tmpctx.drawImage(this.texture_img, 0, 0, this.width, this.height);
			}
			this.datauri = tmpcanvas.toDataURL("image/png");
		}
		return this.datauri;
	};
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		var i, leni, j, lenj;
		var anim, frame, animobj, frameobj, wt, uv;
		this.all_frames = [];
		this.has_loaded_textures = false;
		for (i = 0, leni = this.animations.length; i < leni; i++)
		{
			anim = this.animations[i];
			animobj = {};
			animobj.name = anim[0];
			animobj.speed = anim[1];
			animobj.loop = anim[2];
			animobj.repeatcount = anim[3];
			animobj.repeatto = anim[4];
			animobj.pingpong = anim[5];
			animobj.sid = anim[6];
			animobj.frames = [];
			for (j = 0, lenj = anim[7].length; j < lenj; j++)
			{
				frame = anim[7][j];
				frameobj = {};
				frameobj.texture_file = frame[0];
				frameobj.texture_filesize = frame[1];
				frameobj.offx = frame[2];
				frameobj.offy = frame[3];
				frameobj.width = frame[4];
				frameobj.height = frame[5];
				frameobj.duration = frame[6];
				frameobj.hotspotX = frame[7];
				frameobj.hotspotY = frame[8];
				frameobj.image_points = frame[9];
				frameobj.poly_pts = frame[10];
				frameobj.pixelformat = frame[11];
				frameobj.spritesheeted = (frameobj.width !== 0);
				frameobj.datauri = "";		// generated on demand and cached
				frameobj.getDataUri = frame_getDataUri;
				uv = {};
				uv.left = 0;
				uv.top = 0;
				uv.right = 1;
				uv.bottom = 1;
				frameobj.sheetTex = uv;
				frameobj.webGL_texture = null;
				wt = this.runtime.findWaitingTexture(frame[0]);
				if (wt)
				{
					frameobj.texture_img = wt;
				}
				else
				{
					frameobj.texture_img = new Image();
					frameobj.texture_img["idtkLoadDisposed"] = true;
					frameobj.texture_img.src = frame[0];
					frameobj.texture_img.cr_src = frame[0];
					frameobj.texture_img.cr_filesize = frame[1];
					frameobj.texture_img.c2webGL_texture = null;
					this.runtime.wait_for_textures.push(frameobj.texture_img);
				}
				cr.seal(frameobj);
				animobj.frames.push(frameobj);
				this.all_frames.push(frameobj);
			}
			cr.seal(animobj);
			this.animations[i] = animobj;		// swap array data for object
		}
	};
	typeProto.updateAllCurrentTexture = function ()
	{
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.curWebGLTexture = inst.curFrame.webGL_texture;
		}
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.texture_img.c2webGL_texture = null;
			frame.webGL_texture = null;
		}
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.updateAllCurrentTexture();
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.has_loaded_textures || !this.runtime.glwrap)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.has_loaded_textures = true;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.has_loaded_textures)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			this.runtime.glwrap.deleteTexture(frame.webGL_texture);
		}
		this.has_loaded_textures = false;
	};
	var already_drawn_images = [];
	typeProto.preloadCanvas2D = function (ctx)
	{
		var i, len, frameimg;
		already_drawn_images.length = 0;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frameimg = this.all_frames[i].texture_img;
			if (already_drawn_images.indexOf(frameimg) !== -1)
					continue;
			ctx.drawImage(frameimg, 0, 0);
			already_drawn_images.push(frameimg);
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		var poly_pts = this.type.animations[0].frames[0].poly_pts;
		if (this.recycled)
			this.collision_poly.set_pts(poly_pts);
		else
			this.collision_poly = new cr.CollisionPoly(poly_pts);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);	// 0=visible, 1=invisible
		this.isTicking = false;
		this.inAnimTrigger = false;
		this.collisionsEnabled = (this.properties[3] !== 0);
		if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.type.animations[0].speed !== 0)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		this.cur_animation = this.getAnimationByName(this.properties[1]) || this.type.animations[0];
		this.cur_frame = this.properties[2];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		var curanimframe = this.cur_animation.frames[this.cur_frame];
		this.collision_poly.set_pts(curanimframe.poly_pts);
		this.hotspotX = curanimframe.hotspotX;
		this.hotspotY = curanimframe.hotspotY;
		this.cur_anim_speed = this.cur_animation.speed;
		if (this.recycled)
			this.animTimer.reset();
		else
			this.animTimer = new cr.KahanAdder();
		this.frameStart = this.getNowTime();
		this.animPlaying = true;
		this.animRepeats = 0;
		this.animForwards = true;
		this.animTriggerName = "";
		this.changeAnimName = "";
		this.changeAnimFrom = 0;
		this.changeAnimFrame = -1;
		this.type.loadTextures();
		var i, leni, j, lenj;
		var anim, frame, uv, maintex;
		for (i = 0, leni = this.type.animations.length; i < leni; i++)
		{
			anim = this.type.animations[i];
			for (j = 0, lenj = anim.frames.length; j < lenj; j++)
			{
				frame = anim.frames[j];
				if (frame.width === 0)
				{
					frame.width = frame.texture_img.width;
					frame.height = frame.texture_img.height;
				}
				if (frame.spritesheeted)
				{
					maintex = frame.texture_img;
					uv = frame.sheetTex;
					uv.left = frame.offx / maintex.width;
					uv.top = frame.offy / maintex.height;
					uv.right = (frame.offx + frame.width) / maintex.width;
					uv.bottom = (frame.offy + frame.height) / maintex.height;
					if (frame.offx === 0 && frame.offy === 0 && frame.width === maintex.width && frame.height === maintex.height)
					{
						frame.spritesheeted = false;
					}
				}
			}
		}
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"a": this.cur_animation.sid,
			"f": this.cur_frame,
			"cas": this.cur_anim_speed,
			"fs": this.frameStart,
			"ar": this.animRepeats,
			"at": this.animTimer.sum
		};
		if (!this.animPlaying)
			o["ap"] = this.animPlaying;
		if (!this.animForwards)
			o["af"] = this.animForwards;
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		var anim = this.getAnimationBySid(o["a"]);
		if (anim)
			this.cur_animation = anim;
		this.cur_frame = o["f"];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		this.cur_anim_speed = o["cas"];
		this.frameStart = o["fs"];
		this.animRepeats = o["ar"];
		this.animTimer.reset();
		this.animTimer.sum = o["at"];
		this.animPlaying = o.hasOwnProperty("ap") ? o["ap"] : true;
		this.animForwards = o.hasOwnProperty("af") ? o["af"] : true;
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
		this.collision_poly.set_pts(this.curFrame.poly_pts);
		this.hotspotX = this.curFrame.hotspotX;
		this.hotspotY = this.curFrame.hotspotY;
	};
	instanceProto.animationFinish = function (reverse)
	{
		this.cur_frame = reverse ? 0 : this.cur_animation.frames.length - 1;
		this.animPlaying = false;
		this.animTriggerName = this.cur_animation.name;
		this.inAnimTrigger = true;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
		this.inAnimTrigger = false;
		this.animRepeats = 0;
	};
	instanceProto.getNowTime = function()
	{
		return this.animTimer.sum;
	};
	instanceProto.tick = function()
	{
		this.animTimer.add(this.runtime.getDt(this));
		if (this.changeAnimName.length)
			this.doChangeAnim();
		if (this.changeAnimFrame >= 0)
			this.doChangeAnimFrame();
		var now = this.getNowTime();
		var cur_animation = this.cur_animation;
		var prev_frame = cur_animation.frames[this.cur_frame];
		var next_frame;
		var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
		if (this.animPlaying && now >= this.frameStart + cur_frame_time)
		{
			if (this.animForwards)
			{
				this.cur_frame++;
			}
			else
			{
				this.cur_frame--;
			}
			this.frameStart += cur_frame_time;
			if (this.cur_frame >= cur_animation.frames.length)
			{
				if (cur_animation.pingpong)
				{
					this.animForwards = false;
					this.cur_frame = cur_animation.frames.length - 2;
				}
				else if (cur_animation.loop)
				{
					this.cur_frame = cur_animation.repeatto;
				}
				else
				{
					this.animRepeats++;
					if (this.animRepeats >= cur_animation.repeatcount)
					{
						this.animationFinish(false);
					}
					else
					{
						this.cur_frame = cur_animation.repeatto;
					}
				}
			}
			if (this.cur_frame < 0)
			{
				if (cur_animation.pingpong)
				{
					this.cur_frame = 1;
					this.animForwards = true;
					if (!cur_animation.loop)
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
					}
				}
				else
				{
					if (cur_animation.loop)
					{
						this.cur_frame = cur_animation.repeatto;
					}
					else
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
						else
						{
							this.cur_frame = cur_animation.repeatto;
						}
					}
				}
			}
			if (this.cur_frame < 0)
				this.cur_frame = 0;
			else if (this.cur_frame >= cur_animation.frames.length)
				this.cur_frame = cur_animation.frames.length - 1;
			if (now > this.frameStart + (cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed))
			{
				this.frameStart = now;
			}
			next_frame = cur_animation.frames[this.cur_frame];
			this.OnFrameChanged(prev_frame, next_frame);
			this.runtime.redraw = true;
		}
	};
	instanceProto.getAnimationByName = function (name_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (cr.equals_nocase(a.name, name_))
				return a;
		}
		return null;
	};
	instanceProto.getAnimationBySid = function (sid_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (a.sid === sid_)
				return a;
		}
		return null;
	};
	instanceProto.doChangeAnim = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var anim = this.getAnimationByName(this.changeAnimName);
		this.changeAnimName = "";
		if (!anim)
			return;
		if (cr.equals_nocase(anim.name, this.cur_animation.name) && this.animPlaying)
			return;
		this.cur_animation = anim;
		this.cur_anim_speed = anim.speed;
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.changeAnimFrom === 1)
			this.cur_frame = 0;
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		this.animForwards = true;
		this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
		this.runtime.redraw = true;
	};
	instanceProto.doChangeAnimFrame = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var prev_frame_number = this.cur_frame;
		this.cur_frame = cr.floor(this.changeAnimFrame);
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (prev_frame_number !== this.cur_frame)
		{
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
			this.frameStart = this.getNowTime();
			this.runtime.redraw = true;
		}
		this.changeAnimFrame = -1;
	};
	instanceProto.OnFrameChanged = function (prev_frame, next_frame)
	{
		var oldw = prev_frame.width;
		var oldh = prev_frame.height;
		var neww = next_frame.width;
		var newh = next_frame.height;
		if (oldw != neww)
			this.width *= (neww / oldw);
		if (oldh != newh)
			this.height *= (newh / oldh);
		this.hotspotX = next_frame.hotspotX;
		this.hotspotY = next_frame.hotspotY;
		this.collision_poly.set_pts(next_frame.poly_pts);
		this.set_bbox_changed();
		this.curFrame = next_frame;
		this.curWebGLTexture = next_frame.webGL_texture;
		var i, len, b;
		for (i = 0, len = this.behavior_insts.length; i < len; i++)
		{
			b = this.behavior_insts[i];
			if (b.onSpriteFrameChanged)
				b.onSpriteFrameChanged(prev_frame, next_frame);
		}
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		var cur_frame = this.curFrame;
		var spritesheeted = cur_frame.spritesheeted;
		var cur_image = cur_frame.texture_img;
		var myx = this.x;
		var myy = this.y;
		var w = this.width;
		var h = this.height;
		if (this.angle === 0 && w >= 0 && h >= 0)
		{
			myx -= this.hotspotX * w;
			myy -= this.hotspotY * h;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 myx, myy, w, h);
			}
			else
			{
				ctx.drawImage(cur_image, myx, myy, w, h);
			}
		}
		else
		{
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			var widthfactor = w > 0 ? 1 : -1;
			var heightfactor = h > 0 ? 1 : -1;
			ctx.translate(myx, myy);
			if (widthfactor !== 1 || heightfactor !== 1)
				ctx.scale(widthfactor, heightfactor);
			ctx.rotate(this.angle * widthfactor * heightfactor);
			var drawx = 0 - (this.hotspotX * cr.abs(w))
			var drawy = 0 - (this.hotspotY * cr.abs(h));
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 drawx, drawy, cr.abs(w), cr.abs(h));
			}
			else
			{
				ctx.drawImage(cur_image, drawx, drawy, cr.abs(w), cr.abs(h));
			}
			ctx.restore();
		}
		/*
		ctx.strokeStyle = "#f00";
		ctx.lineWidth = 3;
		ctx.beginPath();
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		var i, len, ax, ay, bx, by;
		for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
		{
			ax = this.collision_poly.pts_cache[i*2] + this.x;
			ay = this.collision_poly.pts_cache[i*2+1] + this.y;
			bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
			by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
			ctx.moveTo(ax, ay);
			ctx.lineTo(bx, by);
		}
		ctx.stroke();
		ctx.closePath();
		*/
		/*
		if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
		{
			this.behavior_insts[0].draw(ctx);
		}
		*/
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.curWebGLTexture);
		glw.setOpacity(this.opacity);
		var cur_frame = this.curFrame;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, cur_frame.sheetTex);
			else
				glw.quad(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy);
		}
		else
		{
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, cur_frame.sheetTex);
			else
				glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		}
	};
	instanceProto.getImagePointIndexByName = function(name_)
	{
		var cur_frame = this.curFrame;
		var i, len;
		for (i = 0, len = cur_frame.image_points.length; i < len; i++)
		{
			if (cr.equals_nocase(name_, cur_frame.image_points[i][0]))
				return i;
		}
		return -1;
	};
	instanceProto.getImagePoint = function(imgpt, getX)
	{
		var cur_frame = this.curFrame;
		var image_points = cur_frame.image_points;
		var index;
		if (cr.is_string(imgpt))
			index = this.getImagePointIndexByName(imgpt);
		else
			index = imgpt - 1;	// 0 is origin
		index = cr.floor(index);
		if (index < 0 || index >= image_points.length)
			return getX ? this.x : this.y;	// return origin
		var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
		var y = image_points[index][2];
		y = (y - cur_frame.hotspotY) * this.height;
		var cosa = Math.cos(this.angle);
		var sina = Math.sin(this.angle);
		var x_temp = (x * cosa) - (y * sina);
		y = (y * cosa) + (x * sina);
		x = x_temp;
		x += this.x;
		y += this.y;
		return getX ? x : y;
	};
	function Cnds() {};
	var arrCache = [];
	function allocArr()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [0, 0];
	};
	function freeArr(a)
	{
		a[0] = 0;
		a[1] = 0;
		arrCache.push(a);
	};
	function makeCollKey(a, b)
	{
		if (a < b)
			return "" + a + "," + b;
		else
			return "" + b + "," + a;
	};
	function collmemory_add(collmemory, a, b)
	{
		var a_uid = a.uid;
		var b_uid = b.uid;
		var key = makeCollKey(a_uid, b_uid);
		if (collmemory.hasOwnProperty(key))
			return;		// already added
		var arr = allocArr();
		arr[0] = a_uid;
		arr[1] = b_uid;
		collmemory[key] = arr;
	};
	function collmemory_remove(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			freeArr(collmemory[key]);
			delete collmemory[key];
		}
	};
	function collmemory_removeInstance(collmemory, inst)
	{
		var uid = inst.uid;
		var p, entry;
		for (p in collmemory)
		{
			if (collmemory.hasOwnProperty(p))
			{
				entry = collmemory[p];
				if (entry[0] === uid || entry[1] === uid)
				{
					freeArr(collmemory[p]);
					delete collmemory[p];
				}
			}
		}
	};
	function collmemory_has(collmemory, a, b)
	{
		return collmemory.hasOwnProperty(makeCollKey(a.uid, b.uid));
	};
	var candidates = [];
	Cnds.prototype.OnCollision = function (rtype)
	{
		if (!rtype)
			return false;
		var runtime = this.runtime;
		var cnd = runtime.getCurrentCondition();
		var ltype = cnd.type;
		if (!cnd.extra.collmemory)
		{
			cnd.extra.collmemory = {};
			runtime.addDestroyCallback((function (collmemory) {
				return function(inst) {
					collmemory_removeInstance(collmemory, inst);
				};
			})(cnd.extra.collmemory));
		}
		var lsol = ltype.getCurrentSol();
		var rsol = rtype.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances;
		var l, linst, r, rinst;
		var curlsol, currsol;
		var current_event = runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		for (l = 0; l < linstances.length; l++)
		{
			linst = linstances[l];
			if (rsol.select_all)
			{
				linst.update_bbox();
				this.runtime.getCollisionCandidates(linst.layer, rtype, linst.bbox, candidates);
				rinstances = candidates;
			}
			else
				rinstances = rsol.getObjects();
			for (r = 0; r < rinstances.length; r++)
			{
				rinst = rinstances[r];
				if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst))
				{
					if (!collmemory_has(cnd.extra.collmemory, linst, rinst))
					{
						collmemory_add(cnd.extra.collmemory, linst, rinst);
						runtime.pushCopySol(current_event.solModifiers);
						curlsol = ltype.getCurrentSol();
						currsol = rtype.getCurrentSol();
						curlsol.select_all = false;
						currsol.select_all = false;
						if (ltype === rtype)
						{
							curlsol.instances.length = 2;	// just use lsol, is same reference as rsol
							curlsol.instances[0] = linst;
							curlsol.instances[1] = rinst;
							ltype.applySolToContainer();
						}
						else
						{
							curlsol.instances.length = 1;
							currsol.instances.length = 1;
							curlsol.instances[0] = linst;
							currsol.instances[0] = rinst;
							ltype.applySolToContainer();
							rtype.applySolToContainer();
						}
						current_event.retrigger();
						runtime.popSol(current_event.solModifiers);
					}
				}
				else
				{
					collmemory_remove(cnd.extra.collmemory, linst, rinst);
				}
			}
			candidates.length = 0;
		}
		return false;
	};
	var rpicktype = null;
	var rtopick = new cr.ObjectSet();
	var needscollisionfinish = false;
	function DoOverlapCondition(rtype, offx, offy)
	{
		if (!rtype)
			return false;
		var do_offset = (offx !== 0 || offy !== 0);
		var oldx, oldy, ret = false, r, lenr, rinst;
		var cnd = this.runtime.getCurrentCondition();
		var ltype = cnd.type;
		var inverted = cnd.inverted;
		var rsol = rtype.getCurrentSol();
		var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
		var rinstances;
		if (rsol.select_all)
		{
			this.update_bbox();
			this.runtime.getCollisionCandidates(this.layer, rtype, this.bbox, candidates);
			rinstances = candidates;
		}
		else if (orblock)
			rinstances = rsol.else_instances;
		else
			rinstances = rsol.instances;
		rpicktype = rtype;
		needscollisionfinish = (ltype !== rtype && !inverted);
		if (do_offset)
		{
			oldx = this.x;
			oldy = this.y;
			this.x += offx;
			this.y += offy;
			this.set_bbox_changed();
		}
		for (r = 0, lenr = rinstances.length; r < lenr; r++)
		{
			rinst = rinstances[r];
			if (this.runtime.testOverlap(this, rinst))
			{
				ret = true;
				if (inverted)
					break;
				if (ltype !== rtype)
					rtopick.add(rinst);
			}
		}
		if (do_offset)
		{
			this.x = oldx;
			this.y = oldy;
			this.set_bbox_changed();
		}
		candidates.length = 0;
		return ret;
	};
	typeProto.finish = function (do_pick)
	{
		if (!needscollisionfinish)
			return;
		if (do_pick)
		{
			var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
			var sol = rpicktype.getCurrentSol();
			var topick = rtopick.valuesRef();
			var i, len, inst;
			if (sol.select_all)
			{
				sol.select_all = false;
				sol.instances.length = topick.length;
				for (i = 0, len = topick.length; i < len; i++)
				{
					sol.instances[i] = topick[i];
				}
				if (orblock)
				{
					sol.else_instances.length = 0;
					for (i = 0, len = rpicktype.instances.length; i < len; i++)
					{
						inst = rpicktype.instances[i];
						if (!rtopick.contains(inst))
							sol.else_instances.push(inst);
					}
				}
			}
			else
			{
				if (orblock)
				{
					var initsize = sol.instances.length;
					sol.instances.length = initsize + topick.length;
					for (i = 0, len = topick.length; i < len; i++)
					{
						sol.instances[initsize + i] = topick[i];
						cr.arrayFindRemove(sol.else_instances, topick[i]);
					}
				}
				else
				{
					cr.shallowAssignArray(sol.instances, topick);
				}
			}
			rpicktype.applySolToContainer();
		}
		rtopick.clear();
		needscollisionfinish = false;
	};
	Cnds.prototype.IsOverlapping = function (rtype)
	{
		return DoOverlapCondition.call(this, rtype, 0, 0);
	};
	Cnds.prototype.IsOverlappingOffset = function (rtype, offx, offy)
	{
		return DoOverlapCondition.call(this, rtype, offx, offy);
	};
	Cnds.prototype.IsAnimPlaying = function (animname)
	{
		if (this.changeAnimName.length)
			return cr.equals_nocase(this.changeAnimName, animname);
		else
			return cr.equals_nocase(this.cur_animation.name, animname);
	};
	Cnds.prototype.CompareFrame = function (cmp, framenum)
	{
		return cr.do_cmp(this.cur_frame, cmp, framenum);
	};
	Cnds.prototype.OnAnimFinished = function (animname)
	{
		return cr.equals_nocase(this.animTriggerName, animname);
	};
	Cnds.prototype.OnAnyAnimFinished = function ()
	{
		return true;
	};
	Cnds.prototype.OnFrameChanged = function ()
	{
		return true;
	};
	Cnds.prototype.IsMirrored = function ()
	{
		return this.width < 0;
	};
	Cnds.prototype.IsFlipped = function ()
	{
		return this.height < 0;
	};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	Cnds.prototype.IsCollisionEnabled = function ()
	{
		return this.collisionsEnabled;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Spawn = function (obj, layer, imgpt)
	{
		if (!obj || !layer)
			return;
		var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
		if (!inst)
			return;
		if (typeof inst.angle !== "undefined")
		{
			inst.angle = this.angle;
			inst.set_bbox_changed();
		}
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
		var cur_act = this.runtime.getCurrentAction();
		var reset_sol = false;
		if (cr.is_undefined(cur_act.extra.Spawn_LastExec) || cur_act.extra.Spawn_LastExec < this.runtime.execcount)
		{
			reset_sol = true;
			cur_act.extra.Spawn_LastExec = this.runtime.execcount;
		}
		var sol;
		if (obj != this.type)
		{
			sol = obj.getCurrentSol();
			sol.select_all = false;
			if (reset_sol)
			{
				sol.instances.length = 1;
				sol.instances[0] = inst;
			}
			else
				sol.instances.push(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					s = inst.siblings[i];
					sol = s.type.getCurrentSol();
					sol.select_all = false;
					if (reset_sol)
					{
						sol.instances.length = 1;
						sol.instances[0] = s;
					}
					else
						sol.instances.push(s);
				}
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.StopAnim = function ()
	{
		this.animPlaying = false;
	};
	Acts.prototype.StartAnim = function (from)
	{
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		if (from === 1 && this.cur_frame !== 0)
		{
			this.changeAnimFrame = 0;
			if (!this.inAnimTrigger)
				this.doChangeAnimFrame();
		}
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetAnim = function (animname, from)
	{
		this.changeAnimName = animname;
		this.changeAnimFrom = from;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnim();
	};
	Acts.prototype.SetAnimFrame = function (framenumber)
	{
		this.changeAnimFrame = framenumber;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnimFrame();
	};
	Acts.prototype.SetAnimSpeed = function (s)
	{
		this.cur_anim_speed = cr.abs(s);
		this.animForwards = (s >= 0);
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetMirrored = function (m)
	{
		var neww = cr.abs(this.width) * (m === 0 ? -1 : 1);
		if (this.width === neww)
			return;
		this.width = neww;
		this.set_bbox_changed();
	};
	Acts.prototype.SetFlipped = function (f)
	{
		var newh = cr.abs(this.height) * (f === 0 ? -1 : 1);
		if (this.height === newh)
			return;
		this.height = newh;
		this.set_bbox_changed();
	};
	Acts.prototype.SetScale = function (s)
	{
		var cur_frame = this.curFrame;
		var mirror_factor = (this.width < 0 ? -1 : 1);
		var flip_factor = (this.height < 0 ? -1 : 1);
		var new_width = cur_frame.width * s * mirror_factor;
		var new_height = cur_frame.height * s * flip_factor;
		if (this.width !== new_width || this.height !== new_height)
		{
			this.width = new_width;
			this.height = new_height;
			this.set_bbox_changed();
		}
	};
	Acts.prototype.LoadURL = function (url_, resize_)
	{
		var img = new Image();
		var self = this;
		var curFrame_ = this.curFrame;
		img.onload = function ()
		{
			if (curFrame_.texture_img.src === img.src)
			{
				if (self.runtime.glwrap && self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.runtime.redraw = true;
				self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
				return;
			}
			curFrame_.texture_img = img;
			curFrame_.offx = 0;
			curFrame_.offy = 0;
			curFrame_.width = img.width;
			curFrame_.height = img.height;
			curFrame_.spritesheeted = false;
			curFrame_.datauri = "";
			if (self.runtime.glwrap)
			{
				if (curFrame_.webGL_texture)
					self.runtime.glwrap.deleteTexture(curFrame_.webGL_texture);
				curFrame_.webGL_texture = self.runtime.glwrap.loadTexture(img, false, self.runtime.linearSampling);
				if (self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.type.updateAllCurrentTexture();
			}
			if (resize_ === 0)		// resize to image size
			{
				self.width = img.width;
				self.height = img.height;
				self.set_bbox_changed();
			}
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	Acts.prototype.SetCollisions = function (set_)
	{
		if (this.collisionsEnabled === (set_ !== 0))
			return;		// no change
		this.collisionsEnabled = (set_ !== 0);
		if (this.collisionsEnabled)
			this.set_bbox_changed();		// needs to be added back to cells
		else
		{
			if (this.collcells.right >= this.collcells.left)
				this.type.collision_grid.update(this, this.collcells, null);
			this.collcells.set(0, 0, -1, -1);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.AnimationFrame = function (ret)
	{
		ret.set_int(this.cur_frame);
	};
	Exps.prototype.AnimationFrameCount = function (ret)
	{
		ret.set_int(this.cur_animation.frames.length);
	};
	Exps.prototype.AnimationName = function (ret)
	{
		ret.set_string(this.cur_animation.name);
	};
	Exps.prototype.AnimationSpeed = function (ret)
	{
		ret.set_float(this.cur_anim_speed);
	};
	Exps.prototype.ImagePointX = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, true));
	};
	Exps.prototype.ImagePointY = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, false));
	};
	Exps.prototype.ImagePointCount = function (ret)
	{
		ret.set_int(this.curFrame.image_points.length);
	};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.curFrame.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.curFrame.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Text = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Text.prototype;
	pluginProto.onCreate = function ()
	{
		pluginProto.acts.SetWidth = function (w)
		{
			if (this.width !== w)
			{
				this.width = w;
				this.text_changed = true;	// also recalculate text wrapping
				this.set_bbox_changed();
			}
		};
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.mycanvas = null;
			inst.myctx = null;
			inst.mytex = null;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		if (this.recycled)
			this.lines.length = 0;
		else
			this.lines = [];		// for word wrapping
		this.text_changed = true;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var requestedWebFonts = {};		// already requested web fonts have an entry here
	instanceProto.onCreate = function()
	{
		this.text = this.properties[0];
		this.visible = (this.properties[1] === 0);		// 0=visible, 1=invisible
		this.font = this.properties[2];
		this.color = this.properties[3];
		this.halign = this.properties[4];				// 0=left, 1=center, 2=right
		this.valign = this.properties[5];				// 0=top, 1=center, 2=bottom
		this.wrapbyword = (this.properties[7] === 0);	// 0=word, 1=character
		this.lastwidth = this.width;
		this.lastwrapwidth = this.width;
		this.lastheight = this.height;
		this.line_height_offset = this.properties[8];
		this.facename = "";
		this.fontstyle = "";
		this.ptSize = 0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.parseFont();
		this.mycanvas = null;
		this.myctx = null;
		this.mytex = null;
		this.need_text_redraw = false;
		this.last_render_tick = this.runtime.tickcount;
		if (this.recycled)
			this.rcTex.set(0, 0, 1, 1);
		else
			this.rcTex = new cr.rect(0, 0, 1, 1);
		if (this.runtime.glwrap)
			this.runtime.tickMe(this);
;
	};
	instanceProto.parseFont = function ()
	{
		var arr = this.font.split(" ");
		var i;
		for (i = 0; i < arr.length; i++)
		{
			if (arr[i].substr(arr[i].length - 2, 2) === "pt")
			{
				this.ptSize = parseInt(arr[i].substr(0, arr[i].length - 2));
				this.pxHeight = Math.ceil((this.ptSize / 72.0) * 96.0) + 4;	// assume 96dpi...
				if (i > 0)
					this.fontstyle = arr[i - 1];
				this.facename = arr[i + 1];
				for (i = i + 2; i < arr.length; i++)
					this.facename += " " + arr[i];
				break;
			}
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"t": this.text,
			"f": this.font,
			"c": this.color,
			"ha": this.halign,
			"va": this.valign,
			"wr": this.wrapbyword,
			"lho": this.line_height_offset,
			"fn": this.facename,
			"fs": this.fontstyle,
			"ps": this.ptSize,
			"pxh": this.pxHeight,
			"tw": this.textWidth,
			"th": this.textHeight,
			"lrt": this.last_render_tick
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.text = o["t"];
		this.font = o["f"];
		this.color = o["c"];
		this.halign = o["ha"];
		this.valign = o["va"];
		this.wrapbyword = o["wr"];
		this.line_height_offset = o["lho"];
		this.facename = o["fn"];
		this.fontstyle = o["fs"];
		this.ptSize = o["ps"];
		this.pxHeight = o["pxh"];
		this.textWidth = o["tw"];
		this.textHeight = o["th"];
		this.last_render_tick = o["lrt"];
		this.text_changed = true;
		this.lastwidth = this.width;
		this.lastwrapwidth = this.width;
		this.lastheight = this.height;
	};
	instanceProto.tick = function ()
	{
		if (this.runtime.glwrap && this.mytex && (this.runtime.tickcount - this.last_render_tick >= 300))
		{
			var layer = this.layer;
            this.update_bbox();
            var bbox = this.bbox;
            if (bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom)
			{
				this.runtime.glwrap.deleteTexture(this.mytex);
				this.mytex = null;
				this.myctx = null;
				this.mycanvas = null;
			}
		}
	};
	instanceProto.onDestroy = function ()
	{
		this.myctx = null;
		this.mycanvas = null;
		if (this.runtime.glwrap && this.mytex)
			this.runtime.glwrap.deleteTexture(this.mytex);
		this.mytex = null;
	};
	instanceProto.updateFont = function ()
	{
		this.font = this.fontstyle + " " + this.ptSize.toString() + "pt " + this.facename;
		this.text_changed = true;
		this.runtime.redraw = true;
	};
	instanceProto.draw = function(ctx, glmode)
	{
		ctx.font = this.font;
		ctx.textBaseline = "top";
		ctx.fillStyle = this.color;
		ctx.globalAlpha = glmode ? 1 : this.opacity;
		var myscale = 1;
		if (glmode)
		{
			myscale = this.layer.getScale();
			ctx.save();
			ctx.scale(myscale, myscale);
		}
		if (this.text_changed || this.width !== this.lastwrapwidth)
		{
			this.type.plugin.WordWrap(this.text, this.lines, ctx, this.width, this.wrapbyword);
			this.text_changed = false;
			this.lastwrapwidth = this.width;
		}
		this.update_bbox();
		var penX = glmode ? 0 : this.bquad.tlx;
		var penY = glmode ? 0 : this.bquad.tly;
		if (this.runtime.pixel_rounding)
		{
			penX = (penX + 0.5) | 0;
			penY = (penY + 0.5) | 0;
		}
		if (this.angle !== 0 && !glmode)
		{
			ctx.save();
			ctx.translate(penX, penY);
			ctx.rotate(this.angle);
			penX = 0;
			penY = 0;
		}
		var endY = penY + this.height;
		var line_height = this.pxHeight;
		line_height += this.line_height_offset;
		var drawX;
		var i;
		if (this.valign === 1)		// center
			penY += Math.max(this.height / 2 - (this.lines.length * line_height) / 2, 0);
		else if (this.valign === 2)	// bottom
			penY += Math.max(this.height - (this.lines.length * line_height) - 2, 0);
		for (i = 0; i < this.lines.length; i++)
		{
			drawX = penX;
			if (this.halign === 1)		// center
				drawX = penX + (this.width - this.lines[i].width) / 2;
			else if (this.halign === 2)	// right
				drawX = penX + (this.width - this.lines[i].width);
			ctx.fillText(this.lines[i].text, drawX, penY);
			penY += line_height;
			if (penY >= endY - line_height)
				break;
		}
		if (this.angle !== 0 || glmode)
			ctx.restore();
		this.last_render_tick = this.runtime.tickcount;
	};
	instanceProto.drawGL = function(glw)
	{
		if (this.width < 1 || this.height < 1)
			return;
		var need_redraw = this.text_changed || this.need_text_redraw;
		this.need_text_redraw = false;
		var layer_scale = this.layer.getScale();
		var layer_angle = this.layer.getAngle();
		var rcTex = this.rcTex;
		var floatscaledwidth = layer_scale * this.width;
		var floatscaledheight = layer_scale * this.height;
		var scaledwidth = Math.ceil(floatscaledwidth);
		var scaledheight = Math.ceil(floatscaledheight);
		var halfw = this.runtime.draw_width / 2;
		var halfh = this.runtime.draw_height / 2;
		if (!this.myctx)
		{
			this.mycanvas = document.createElement("canvas");
			this.mycanvas.width = scaledwidth;
			this.mycanvas.height = scaledheight;
			this.lastwidth = scaledwidth;
			this.lastheight = scaledheight;
			need_redraw = true;
			this.myctx = this.mycanvas.getContext("2d");
		}
		if (scaledwidth !== this.lastwidth || scaledheight !== this.lastheight)
		{
			this.mycanvas.width = scaledwidth;
			this.mycanvas.height = scaledheight;
			if (this.mytex)
			{
				glw.deleteTexture(this.mytex);
				this.mytex = null;
			}
			need_redraw = true;
		}
		if (need_redraw)
		{
			this.myctx.clearRect(0, 0, scaledwidth, scaledheight);
			this.draw(this.myctx, true);
			if (!this.mytex)
				this.mytex = glw.createEmptyTexture(scaledwidth, scaledheight, this.runtime.linearSampling, this.runtime.isMobile);
			glw.videoToTexture(this.mycanvas, this.mytex, this.runtime.isMobile);
		}
		this.lastwidth = scaledwidth;
		this.lastheight = scaledheight;
		glw.setTexture(this.mytex);
		glw.setOpacity(this.opacity);
		glw.resetModelView();
		glw.translate(-halfw, -halfh);
		glw.updateModelView();
		var q = this.bquad;
		var old_dpr = this.runtime.devicePixelRatio;
		this.runtime.devicePixelRatio = 1;
		var tlx = this.layer.layerToCanvas(q.tlx, q.tly, true, true);
		var tly = this.layer.layerToCanvas(q.tlx, q.tly, false, true);
		var trx = this.layer.layerToCanvas(q.trx, q.try_, true, true);
		var try_ = this.layer.layerToCanvas(q.trx, q.try_, false, true);
		var brx = this.layer.layerToCanvas(q.brx, q.bry, true, true);
		var bry = this.layer.layerToCanvas(q.brx, q.bry, false, true);
		var blx = this.layer.layerToCanvas(q.blx, q.bly, true, true);
		var bly = this.layer.layerToCanvas(q.blx, q.bly, false, true);
		this.runtime.devicePixelRatio = old_dpr;
		if (this.runtime.pixel_rounding || (this.angle === 0 && layer_angle === 0))
		{
			var ox = ((tlx + 0.5) | 0) - tlx;
			var oy = ((tly + 0.5) | 0) - tly
			tlx += ox;
			tly += oy;
			trx += ox;
			try_ += oy;
			brx += ox;
			bry += oy;
			blx += ox;
			bly += oy;
		}
		if (this.angle === 0 && layer_angle === 0)
		{
			trx = tlx + scaledwidth;
			try_ = tly;
			brx = trx;
			bry = tly + scaledheight;
			blx = tlx;
			bly = bry;
			rcTex.right = 1;
			rcTex.bottom = 1;
		}
		else
		{
			rcTex.right = floatscaledwidth / scaledwidth;
			rcTex.bottom = floatscaledheight / scaledheight;
		}
		glw.quadTex(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex);
		glw.resetModelView();
		glw.scale(layer_scale, layer_scale);
		glw.rotateZ(-this.layer.getAngle());
		glw.translate((this.layer.viewLeft + this.layer.viewRight) / -2, (this.layer.viewTop + this.layer.viewBottom) / -2);
		glw.updateModelView();
		this.last_render_tick = this.runtime.tickcount;
	};
	var wordsCache = [];
	pluginProto.TokeniseWords = function (text)
	{
		wordsCache.length = 0;
		var cur_word = "";
		var ch;
		var i = 0;
		while (i < text.length)
		{
			ch = text.charAt(i);
			if (ch === "\n")
			{
				if (cur_word.length)
				{
					wordsCache.push(cur_word);
					cur_word = "";
				}
				wordsCache.push("\n");
				++i;
			}
			else if (ch === " " || ch === "\t" || ch === "-")
			{
				do {
					cur_word += text.charAt(i);
					i++;
				}
				while (i < text.length && (text.charAt(i) === " " || text.charAt(i) === "\t"));
				wordsCache.push(cur_word);
				cur_word = "";
			}
			else if (i < text.length)
			{
				cur_word += ch;
				i++;
			}
		}
		if (cur_word.length)
			wordsCache.push(cur_word);
	};
	var linesCache = [];
	function allocLine()
	{
		if (linesCache.length)
			return linesCache.pop();
		else
			return {};
	};
	function freeLine(l)
	{
		linesCache.push(l);
	};
	function freeAllLines(arr)
	{
		var i, len;
		for (i = 0, len = arr.length; i < len; i++)
		{
			freeLine(arr[i]);
		}
		arr.length = 0;
	};
	pluginProto.WordWrap = function (text, lines, ctx, width, wrapbyword)
	{
		if (!text || !text.length)
		{
			freeAllLines(lines);
			return;
		}
		if (width <= 2.0)
		{
			freeAllLines(lines);
			return;
		}
		if (text.length <= 100 && text.indexOf("\n") === -1)
		{
			var all_width = ctx.measureText(text).width;
			if (all_width <= width)
			{
				freeAllLines(lines);
				lines.push(allocLine());
				lines[0].text = text;
				lines[0].width = all_width;
				return;
			}
		}
		this.WrapText(text, lines, ctx, width, wrapbyword);
	};
	pluginProto.WrapText = function (text, lines, ctx, width, wrapbyword)
	{
		var wordArray;
		if (wrapbyword)
		{
			this.TokeniseWords(text);	// writes to wordsCache
			wordArray = wordsCache;
		}
		else
			wordArray = text;
		var cur_line = "";
		var prev_line;
		var line_width;
		var i;
		var lineIndex = 0;
		var line;
		for (i = 0; i < wordArray.length; i++)
		{
			if (wordArray[i] === "\n")
			{
				if (lineIndex >= lines.length)
					lines.push(allocLine());
				line = lines[lineIndex];
				line.text = cur_line;
				line.width = ctx.measureText(cur_line).width;
				lineIndex++;
				cur_line = "";
				continue;
			}
			prev_line = cur_line;
			cur_line += wordArray[i];
			line_width = ctx.measureText(cur_line).width;
			if (line_width >= width)
			{
				if (lineIndex >= lines.length)
					lines.push(allocLine());
				line = lines[lineIndex];
				line.text = prev_line;
				line.width = ctx.measureText(prev_line).width;
				lineIndex++;
				cur_line = wordArray[i];
				if (!wrapbyword && cur_line === " ")
					cur_line = "";
			}
		}
		if (cur_line.length)
		{
			if (lineIndex >= lines.length)
				lines.push(allocLine());
			line = lines[lineIndex];
			line.text = cur_line;
			line.width = ctx.measureText(cur_line).width;
			lineIndex++;
		}
		for (i = lineIndex; i < lines.length; i++)
			freeLine(lines[i]);
		lines.length = lineIndex;
	};
	function Cnds() {};
	Cnds.prototype.CompareText = function(text_to_compare, case_sensitive)
	{
		if (case_sensitive)
			return this.text == text_to_compare;
		else
			return cr.equals_nocase(this.text, text_to_compare);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetText = function(param)
	{
		if (cr.is_number(param) && param < 1e9)
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_set = param.toString();
		if (this.text !== text_to_set)
		{
			this.text = text_to_set;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.AppendText = function(param)
	{
		if (cr.is_number(param))
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_append = param.toString();
		if (text_to_append)	// not empty
		{
			this.text += text_to_append;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetFontFace = function (face_, style_)
	{
		var newstyle = "";
		switch (style_) {
		case 1: newstyle = "bold"; break;
		case 2: newstyle = "italic"; break;
		case 3: newstyle = "bold italic"; break;
		}
		if (face_ === this.facename && newstyle === this.fontstyle)
			return;		// no change
		this.facename = face_;
		this.fontstyle = newstyle;
		this.updateFont();
	};
	Acts.prototype.SetFontSize = function (size_)
	{
		if (this.ptSize === size_)
			return;
		this.ptSize = size_;
		this.pxHeight = Math.ceil((this.ptSize / 72.0) * 96.0) + 4;	// assume 96dpi...
		this.updateFont();
	};
	Acts.prototype.SetFontColor = function (rgb)
	{
		var newcolor = "rgb(" + cr.GetRValue(rgb).toString() + "," + cr.GetGValue(rgb).toString() + "," + cr.GetBValue(rgb).toString() + ")";
		if (newcolor === this.color)
			return;
		this.color = newcolor;
		this.need_text_redraw = true;
		this.runtime.redraw = true;
	};
	Acts.prototype.SetWebFont = function (familyname_, cssurl_)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Text plugin: 'Set web font' not supported on this platform - the action has been ignored");
			return;		// DC todo
		}
		var self = this;
		var refreshFunc = (function () {
							self.runtime.redraw = true;
							self.text_changed = true;
						});
		if (requestedWebFonts.hasOwnProperty(cssurl_))
		{
			var newfacename = "'" + familyname_ + "'";
			if (this.facename === newfacename)
				return;	// no change
			this.facename = newfacename;
			this.updateFont();
			for (var i = 1; i < 10; i++)
			{
				setTimeout(refreshFunc, i * 100);
				setTimeout(refreshFunc, i * 1000);
			}
			return;
		}
		var wf = document.createElement("link");
		wf.href = cssurl_;
		wf.rel = "stylesheet";
		wf.type = "text/css";
		wf.onload = refreshFunc;
		document.getElementsByTagName('head')[0].appendChild(wf);
		requestedWebFonts[cssurl_] = true;
		this.facename = "'" + familyname_ + "'";
		this.updateFont();
		for (var i = 1; i < 10; i++)
		{
			setTimeout(refreshFunc, i * 100);
			setTimeout(refreshFunc, i * 1000);
		}
;
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.text);
	};
	Exps.prototype.FaceName = function (ret)
	{
		ret.set_string(this.facename);
	};
	Exps.prototype.FaceSize = function (ret)
	{
		ret.set_int(this.ptSize);
	};
	Exps.prototype.TextWidth = function (ret)
	{
		var w = 0;
		var i, len, x;
		for (i = 0, len = this.lines.length; i < len; i++)
		{
			x = this.lines[i].width;
			if (w < x)
				w = x;
		}
		ret.set_int(w);
	};
	Exps.prototype.TextHeight = function (ret)
	{
		ret.set_int(this.lines.length * (this.pxHeight + this.line_height_offset) - this.line_height_offset);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.TiledBg = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TiledBg.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.wait_for_textures.push(this.texture_img);
		this.pattern = null;
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);							// 0=visible, 1=invisible
		this.rcTex = new cr.rect(0, 0, 0, 0);
		this.has_own_texture = false;										// true if a texture loaded in from URL
		this.texture_img = this.type.texture_img;
		if (this.runtime.glwrap)
		{
			this.type.loadTextures();
			this.webGL_texture = this.type.webGL_texture;
		}
		else
		{
			if (!this.type.pattern)
				this.type.pattern = this.runtime.ctx.createPattern(this.type.texture_img, "repeat");
			this.pattern = this.type.pattern;
		}
	};
	instanceProto.afterLoad = function ()
	{
		this.has_own_texture = false;
		this.texture_img = this.type.texture_img;
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.glwrap && this.has_own_texture && this.webGL_texture)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.webGL_texture = null;
		}
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.save();
		ctx.fillStyle = this.pattern;
		var myx = this.x;
		var myy = this.y;
		if (this.runtime.pixel_rounding)
		{
			myx = (myx + 0.5) | 0;
			myy = (myy + 0.5) | 0;
		}
		var drawX = -(this.hotspotX * this.width);
		var drawY = -(this.hotspotY * this.height);
		var offX = drawX % this.texture_img.width;
		var offY = drawY % this.texture_img.height;
		if (offX < 0)
			offX += this.texture_img.width;
		if (offY < 0)
			offY += this.texture_img.height;
		ctx.translate(myx, myy);
		ctx.rotate(this.angle);
		ctx.translate(offX, offY);
		ctx.fillRect(drawX - offX,
					 drawY - offY,
					 this.width,
					 this.height);
		ctx.restore();
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		var rcTex = this.rcTex;
		rcTex.right = this.width / this.texture_img.width;
		rcTex.bottom = this.height / this.texture_img.height;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, rcTex);
		}
		else
			glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, rcTex);
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.LoadURL = function (url_)
	{
		var img = new Image();
		var self = this;
		img.onload = function ()
		{
			self.texture_img = img;
			if (self.runtime.glwrap)
			{
				if (self.has_own_texture && self.webGL_texture)
					self.runtime.glwrap.deleteTexture(self.webGL_texture);
				self.webGL_texture = self.runtime.glwrap.loadTexture(img, true, self.runtime.linearSampling);
			}
			else
			{
				self.pattern = self.runtime.ctx.createPattern(img, "repeat");
			}
			self.has_own_texture = true;
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.TiledBg.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.texture_img.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.texture_img.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Touch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Touch.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.touches = [];
		this.mouseDown = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var dummyoffset = {left: 0, top: 0};
	instanceProto.findTouch = function (id)
	{
		var i, len;
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			if (this.touches[i]["id"] === id)
				return i;
		}
		return -1;
	};
	var appmobi_accx = 0;
	var appmobi_accy = 0;
	var appmobi_accz = 0;
	function AppMobiGetAcceleration(evt)
	{
		appmobi_accx = evt.x;
		appmobi_accy = evt.y;
		appmobi_accz = evt.z;
	};
	var pg_accx = 0;
	var pg_accy = 0;
	var pg_accz = 0;
	function PhoneGapGetAcceleration(evt)
	{
		pg_accx = evt.x;
		pg_accy = evt.y;
		pg_accz = evt.z;
	};
	var theInstance = null;
	instanceProto.onCreate = function()
	{
		theInstance = this;
		this.isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.orient_alpha = 0;
		this.orient_beta = 0;
		this.orient_gamma = 0;
		this.acc_g_x = 0;
		this.acc_g_y = 0;
		this.acc_g_z = 0;
		this.acc_x = 0;
		this.acc_y = 0;
		this.acc_z = 0;
		this.curTouchX = 0;
		this.curTouchY = 0;
		this.trigger_index = 0;
		this.trigger_id = 0;
		this.useMouseInput = (this.properties[0] !== 0);
		var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
		var elem2 = document;
		if (this.runtime.isDirectCanvas)
			elem2 = elem = window["Canvas"];
		else if (this.runtime.isCocoonJs)
			elem2 = elem = window;
		var self = this;
		if (window.navigator["pointerEnabled"])
		{
			elem.addEventListener("pointerdown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("pointermove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("pointerup",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("pointercancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				this.runtime.canvas.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else if (window.navigator["msPointerEnabled"])
		{
			elem.addEventListener("MSPointerDown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("MSPointerMove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("MSPointerUp",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("MSPointerCancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else
		{
			elem.addEventListener("touchstart",
				function(info) {
					self.onTouchStart(info);
				},
				false
			);
			elem.addEventListener("touchmove",
				function(info) {
					self.onTouchMove(info);
				},
				false
			);
			elem2.addEventListener("touchend",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
			elem2.addEventListener("touchcancel",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
		}
		if (this.isWindows8)
		{
			var win8accelerometerFn = function(e) {
					var reading = e["reading"];
					self.acc_x = reading["accelerationX"];
					self.acc_y = reading["accelerationY"];
					self.acc_z = reading["accelerationZ"];
				};
			var win8inclinometerFn = function(e) {
					var reading = e["reading"];
					self.orient_alpha = reading["yawDegrees"];
					self.orient_beta = reading["pitchDegrees"];
					self.orient_gamma = reading["rollDegrees"];
				};
			var accelerometer = Windows["Devices"]["Sensors"]["Accelerometer"]["getDefault"]();
            if (accelerometer)
			{
                accelerometer["reportInterval"] = Math.max(accelerometer["minimumReportInterval"], 16);
				accelerometer.addEventListener("readingchanged", win8accelerometerFn);
            }
			var inclinometer = Windows["Devices"]["Sensors"]["Inclinometer"]["getDefault"]();
			if (inclinometer)
			{
				inclinometer["reportInterval"] = Math.max(inclinometer["minimumReportInterval"], 16);
				inclinometer.addEventListener("readingchanged", win8inclinometerFn);
			}
			document.addEventListener("visibilitychange", function(e) {
				if (document["hidden"] || document["msHidden"])
				{
					if (accelerometer)
						accelerometer.removeEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.removeEventListener("readingchanged", win8inclinometerFn);
				}
				else
				{
					if (accelerometer)
						accelerometer.addEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.addEventListener("readingchanged", win8inclinometerFn);
				}
			}, false);
		}
		else
		{
			window.addEventListener("deviceorientation", function (eventData) {
				self.orient_alpha = eventData["alpha"] || 0;
				self.orient_beta = eventData["beta"] || 0;
				self.orient_gamma = eventData["gamma"] || 0;
			}, false);
			window.addEventListener("devicemotion", function (eventData) {
				if (eventData["accelerationIncludingGravity"])
				{
					self.acc_g_x = eventData["accelerationIncludingGravity"]["x"];
					self.acc_g_y = eventData["accelerationIncludingGravity"]["y"];
					self.acc_g_z = eventData["accelerationIncludingGravity"]["z"];
				}
				if (eventData["acceleration"])
				{
					self.acc_x = eventData["acceleration"]["x"];
					self.acc_y = eventData["acceleration"]["y"];
					self.acc_z = eventData["acceleration"]["z"];
				}
			}, false);
		}
		if (this.useMouseInput && !this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
		}
		if (this.runtime.isAppMobi && !this.runtime.isDirectCanvas)
		{
			AppMobi["accelerometer"]["watchAcceleration"](AppMobiGetAcceleration, { "frequency": 40, "adjustForRotation": true });
		}
		if (this.runtime.isPhoneGap)
		{
			navigator["accelerometer"]["watchAcceleration"](PhoneGapGetAcceleration, null, { "frequency": 40 });
		}
		this.runtime.tick2Me(this);
	};
	instanceProto.onPointerMove = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		var nowtime = cr.performance_now();
		if (i >= 0)
		{
			var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
			var t = this.touches[i];
			if (nowtime - t.time < 2)
				return;
			t.lasttime = t.time;
			t.lastx = t.x;
			t.lasty = t.y;
			t.time = nowtime;
			t.x = info.pageX - offset.left;
			t.y = info.pageY - offset.top;
		}
	};
	instanceProto.onPointerStart = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var touchx = info.pageX - offset.left;
		var touchy = info.pageY - offset.top;
		var nowtime = cr.performance_now();
		this.trigger_index = this.touches.length;
		this.trigger_id = info["pointerId"];
		this.touches.push({ time: nowtime,
							x: touchx,
							y: touchy,
							lasttime: nowtime,
							lastx: touchx,
							lasty: touchy,
							"id": info["pointerId"],
							startindex: this.trigger_index
						});
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
		this.curTouchX = touchx;
		this.curTouchY = touchy;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onPointerEnd = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		this.trigger_index = (i >= 0 ? this.touches[i].startindex : -1);
		this.trigger_id = (i >= 0 ? this.touches[i]["id"] : -1);
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
		this.runtime.isInUserInputEvent = false;
		if (i >= 0)
		{
			this.touches.splice(i, 1);
		}
	};
	instanceProto.onTouchMove = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var nowtime = cr.performance_now();
		var i, len, t, u;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			var j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
				u = this.touches[j];
				if (nowtime - u.time < 2)
					continue;
				u.lasttime = u.time;
				u.lastx = u.x;
				u.lasty = u.y;
				u.time = nowtime;
				u.x = t.pageX - offset.left;
				u.y = t.pageY - offset.top;
			}
		}
	};
	instanceProto.onTouchStart = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var nowtime = cr.performance_now();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j !== -1)
				continue;
			var touchx = t.pageX - offset.left;
			var touchy = t.pageY - offset.top;
			this.trigger_index = this.touches.length;
			this.trigger_id = t["identifier"];
			this.touches.push({ time: nowtime,
								x: touchx,
								y: touchy,
								lasttime: nowtime,
								lastx: touchx,
								lasty: touchy,
								"id": t["identifier"],
								startindex: this.trigger_index
							});
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
			this.curTouchX = touchx;
			this.curTouchY = touchy;
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchEnd = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				this.trigger_index = this.touches[j].startindex;
				this.trigger_id = this.touches[j]["id"];
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
				this.touches.splice(j, 1);
			}
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.getAlpha = function ()
	{
		if (this.runtime.isAppMobi && this.orient_alpha === 0 && appmobi_accz !== 0)
			return appmobi_accz * 90;
		else if (this.runtime.isPhoneGap  && this.orient_alpha === 0 && pg_accz !== 0)
			return pg_accz * 90;
		else
			return this.orient_alpha;
	};
	instanceProto.getBeta = function ()
	{
		if (this.runtime.isAppMobi && this.orient_beta === 0 && appmobi_accy !== 0)
			return appmobi_accy * -90;
		else if (this.runtime.isPhoneGap  && this.orient_beta === 0 && pg_accy !== 0)
			return pg_accy * -90;
		else
			return this.orient_beta;
	};
	instanceProto.getGamma = function ()
	{
		if (this.runtime.isAppMobi && this.orient_gamma === 0 && appmobi_accx !== 0)
			return appmobi_accx * 90;
		else if (this.runtime.isPhoneGap  && this.orient_gamma === 0 && pg_accx !== 0)
			return pg_accx * 90;
		else
			return this.orient_gamma;
	};
	var noop_func = function(){};
	instanceProto.onMouseDown = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click)
			info.preventDefault();
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchStart(fakeinfo);
		this.mouseDown = true;
	};
	instanceProto.onMouseMove = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click)
			info.preventDefault();
		if (!this.mouseDown)
			return;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchMove(fakeinfo);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click)
			info.preventDefault();
		this.runtime.had_a_click = true;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchEnd(fakeinfo);
		this.mouseDown = false;
	};
	instanceProto.tick2 = function()
	{
		var i, len, t;
		var nowtime = cr.performance_now();
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			t = this.touches[i];
			if (t.time <= nowtime - 50)
				t.lasttime = nowtime;
		}
	};
	function Cnds() {};
	Cnds.prototype.OnTouchStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnTouchEnd = function ()
	{
		return true;
	};
	Cnds.prototype.IsInTouch = function ()
	{
		return this.touches.length;
	};
	Cnds.prototype.OnTouchObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.IsTouchingObject = function (type)
	{
		if (!type)
			return false;
		var sol = type.getCurrentSol();
		var instances = sol.getObjects();
		var px, py;
		var touching = [];
		var i, leni, j, lenj;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			var inst = instances[i];
			inst.update_bbox();
			for (j = 0, lenj = this.touches.length; j < lenj; j++)
			{
				var touch = this.touches[j];
				px = inst.layer.canvasToLayer(touch.x, touch.y, true);
				py = inst.layer.canvasToLayer(touch.x, touch.y, false);
				if (inst.contains_pt(px, py))
				{
					touching.push(inst);
					break;
				}
			}
		}
		if (touching.length)
		{
			sol.select_all = false;
			sol.instances = touching;
			type.applySolToContainer();
			return true;
		}
		else
			return false;
	};
	Cnds.prototype.CompareTouchSpeed = function (index, cmp, s)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
			return false;
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		var speed = 0;
		if (timediff > 0)
			speed = dist / timediff;
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OrientationSupported = function ()
	{
		return typeof window["DeviceOrientationEvent"] !== "undefined";
	};
	Cnds.prototype.MotionSupported = function ()
	{
		return typeof window["DeviceMotionEvent"] !== "undefined";
	};
	Cnds.prototype.CompareOrientation = function (orientation_, cmp_, angle_)
	{
		var v = 0;
		if (orientation_ === 0)
			v = this.getAlpha();
		else if (orientation_ === 1)
			v = this.getBeta();
		else
			v = this.getGamma();
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.CompareAcceleration = function (acceleration_, cmp_, angle_)
	{
		var v = 0;
		if (acceleration_ === 0)
			v = this.acc_g_x;
		else if (acceleration_ === 1)
			v = this.acc_g_y;
		else if (acceleration_ === 2)
			v = this.acc_g_z;
		else if (acceleration_ === 3)
			v = this.acc_x;
		else if (acceleration_ === 4)
			v = this.acc_y;
		else if (acceleration_ === 5)
			v = this.acc_z;
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.OnNthTouchStart = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.OnNthTouchEnd = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.HasNthTouch = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return this.touches.length >= touch_ + 1;
	};
	pluginProto.cnds = new Cnds();
	function Exps() {};
	Exps.prototype.TouchCount = function (ret)
	{
		ret.set_int(this.touches.length);
	};
	Exps.prototype.X = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxX = layer.parallaxX;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxX = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxX = oldParallaxX;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.XAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxY = layer.parallaxY;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxY = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxY = oldParallaxY;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.YAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].x);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteXAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].x);
	};
	Exps.prototype.AbsoluteXForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.x);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].y);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteYAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].y);
	};
	Exps.prototype.AbsoluteYForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.y);
	};
	Exps.prototype.SpeedAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.SpeedForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var dist = cr.distanceTo(touch.x, touch.y, touch.lastx, touch.lasty);
		var timediff = (touch.time - touch.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.AngleAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(t.lastx, t.lasty, t.x, t.y)));
	};
	Exps.prototype.AngleForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(touch.lastx, touch.lasty, touch.x, touch.y)));
	};
	Exps.prototype.Alpha = function (ret)
	{
		ret.set_float(this.getAlpha());
	};
	Exps.prototype.Beta = function (ret)
	{
		ret.set_float(this.getBeta());
	};
	Exps.prototype.Gamma = function (ret)
	{
		ret.set_float(this.getGamma());
	};
	Exps.prototype.AccelerationXWithG = function (ret)
	{
		ret.set_float(this.acc_g_x);
	};
	Exps.prototype.AccelerationYWithG = function (ret)
	{
		ret.set_float(this.acc_g_y);
	};
	Exps.prototype.AccelerationZWithG = function (ret)
	{
		ret.set_float(this.acc_g_z);
	};
	Exps.prototype.AccelerationX = function (ret)
	{
		ret.set_float(this.acc_x);
	};
	Exps.prototype.AccelerationY = function (ret)
	{
		ret.set_float(this.acc_y);
	};
	Exps.prototype.AccelerationZ = function (ret)
	{
		ret.set_float(this.acc_z);
	};
	Exps.prototype.TouchIndex = function (ret)
	{
		ret.set_int(this.trigger_index);
	};
	Exps.prototype.TouchID = function (ret)
	{
		ret.set_float(this.trigger_id);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.WebStorage = function(runtime)
{
	this.runtime = runtime;
};
(function()
{
	var pluginProto = cr.plugins_.WebStorage.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var prefix = "";
	var is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	if (is_arcade)
		prefix = "arcade" + window["scirra_arcade_id"];
	var logged_sessionnotsupported = false;
	function LogSessionNotSupported()
	{
		if (logged_sessionnotsupported)
			return;
		cr.logexport("[Construct 2] Webstorage plugin: session storage is not supported on this platform. Try using local storage or global variables instead.");
		logged_sessionnotsupported = true;
	};
	instanceProto.onCreate = function()
	{
	};
	function Cnds() {};
	Cnds.prototype.LocalStorageEnabled = function()
	{
		return true;
	};
	Cnds.prototype.SessionStorageEnabled = function()
	{
		return true;
	};
	Cnds.prototype.LocalStorageExists = function(key)
	{
		return localStorage.getItem(prefix + key) != null;
	};
	Cnds.prototype.SessionStorageExists = function(key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return false;
		}
		return sessionStorage.getItem(prefix + key) != null;
	};
	Cnds.prototype.OnQuotaExceeded = function ()
	{
		return true;
	};
	Cnds.prototype.CompareKeyText = function (key, text_to_compare, case_sensitive)
	{
		var value = localStorage.getItem(prefix + key) || "";
		if (case_sensitive)
			return value == text_to_compare;
		else
			return cr.equals_nocase(value, text_to_compare);
	};
	Cnds.prototype.CompareKeyNumber = function (key, cmp, x)
	{
		var value = localStorage.getItem(prefix + key) || "";
		return cr.do_cmp(parseFloat(value), cmp, x);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.StoreLocal = function(key, data)
	{
		try {
			localStorage.setItem(prefix + key, data);
		}
		catch (e)
		{
			this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
		}
	};
	Acts.prototype.StoreSession = function(key,data)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		try {
			sessionStorage.setItem(prefix + key, data);
		}
		catch (e)
		{
			this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
		}
	};
	Acts.prototype.RemoveLocal = function(key)
	{
		localStorage.removeItem(prefix + key);
	};
	Acts.prototype.RemoveSession = function(key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		sessionStorage.removeItem(prefix + key);
	};
	Acts.prototype.ClearLocal = function()
	{
		if (!is_arcade)
			localStorage.clear();
	};
	Acts.prototype.ClearSession = function()
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		if (!is_arcade)
			sessionStorage.clear();
	};
	Acts.prototype.JSONLoad = function (json_, mode_)
	{
		var d;
		try {
			d = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!d["c2dictionary"])			// presumably not a c2dictionary object
			return;
		var o = d["data"];
		if (mode_ === 0 && !is_arcade)	// 'set' mode: must clear webstorage first
			localStorage.clear();
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
			{
				try {
					localStorage.setItem(prefix + p, o[p]);
				}
				catch (e)
				{
					this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
					return;
				}
			}
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LocalValue = function(ret,key)
	{
		ret.set_string(localStorage.getItem(prefix + key) || "");
	};
	Exps.prototype.SessionValue = function(ret,key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		ret.set_string(sessionStorage.getItem(prefix + key) || "");
	};
	Exps.prototype.LocalCount = function(ret)
	{
		ret.set_int(is_arcade ? 0 : localStorage.length);
	};
	Exps.prototype.SessionCount = function(ret)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_int(0);
			return;
		}
		ret.set_int(is_arcade ? 0 : sessionStorage.length);
	};
	Exps.prototype.LocalAt = function(ret,n)
	{
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(localStorage.getItem(localStorage.key(n)) || "");
	};
	Exps.prototype.SessionAt = function(ret,n)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(sessionStorage.getItem(sessionStorage.key(n)) || "");
	};
	Exps.prototype.LocalKeyAt = function(ret,n)
	{
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(localStorage.key(n) || "");
	};
	Exps.prototype.SessionKeyAt = function(ret,n)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(sessionStorage.key(n) || "");
	};
	Exps.prototype.AsJSON = function (ret)
	{
		var o = {}, i, len, k;
		for (i = 0, len = localStorage.length; i < len; i++)
		{
			k = localStorage.key(i);
			if (is_arcade)
			{
				if (k.substr(0, prefix.length) === prefix)
				{
					o[k.substr(prefix.length)] = localStorage.getItem(k);
				}
			}
			else
				o[k] = localStorage.getItem(k);
		}
		ret.set_string(JSON.stringify({
			"c2dictionary": true,
			"data": o
		}));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.gamepad = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.gamepad.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var gamepadRuntime = null;
	var gamepadInstance = null;
	var controllers = new Array(16);
	var osToken = "";
	var browserToken = "";
	var axisOffset = 16;
	var curCtrlMap = null;
	var ctrlmap = {};
	ctrlmap["windows"] = {};
	ctrlmap["windows"]["firefox"] = {};
	function doControllerMapping(index, isAxis, buttonmap, axismap)
	{
		if (isAxis)
		{
			if (index >= axismap.length)
				return -1;			// unknown axis
			if (cr.is_number(axismap[index]))
				return axismap[index] + axisOffset;
			else
			{
				return axismap[index];	// returning array
			}
		}
		else
		{
			if (index >= buttonmap.length)
				return -1;			// unknown button
			return buttonmap[index];
		}
	};
	var win_ff_xbox360_buttons = [0, 1, 2, 3, 4, 5, 8, 9, 10, 11];
	var win_ff_xbox360_axes    = [0, 1, [7, 6], 2, 3, [14, 15], [12, 13]];
	ctrlmap["windows"]["firefox"]["xbox360"] = function (index, isAxis)
	{
		return doControllerMapping(index, isAxis, win_ff_xbox360_buttons, win_ff_xbox360_axes);
	};
	var win_ff_lda_buttons = [2, 0, 1, 3, 4, 6, 5, 7, 8, 9];
	var win_ff_lda_axes    = [0, 1, 2, 3, [14, 15], [12, 13]];
	ctrlmap["windows"]["firefox"]["logitechdualaction"] = function (index, isAxis)
	{
		return doControllerMapping(index, isAxis, win_ff_lda_buttons, win_ff_lda_axes);
	};
	function defaultMap(index, isAxis)
	{
		if (isAxis)
		{
			if (index >= 4)
				return -1;		// unknown axis
			return index + axisOffset;
		}
		else
		{
			if (index >= 16)
				return -1;		// unknown button
			return index;
		}
	};
	function getMapper(id_)
	{
		if (!curCtrlMap)
			return defaultMap;
		var controllertoken = "";
		var id = id_.toLowerCase();
		if (id.indexOf("xbox 360") > -1)
			controllertoken = "xbox360";
		else if (id.indexOf("logitech dual action") > -1)
			controllertoken = "logitechdualaction";
		var curmap = curCtrlMap[controllertoken];
		return curmap || defaultMap;
	};
	function onConnected(e)
	{
		controllers[e["gamepad"]["index"]] = e["gamepad"];
		gamepadRuntime.trigger(cr.plugins_.gamepad.prototype.cnds.OnGamepadConnected, gamepadInstance);
	};
	function onDisconnected(e)
	{
		gamepadRuntime.trigger(cr.plugins_.gamepad.prototype.cnds.OnGamepadDisconnected, gamepadInstance);
		controllers[e["gamepad"]["index"]] = null;
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		gamepadRuntime = this.runtime;
		gamepadInstance = this;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.deadzone = this.properties[0];
		this.lastButton = 0;
		var userAgent = navigator.userAgent;
		osToken = "windows";
		if (/mac/i.test(userAgent))
			osToken = "mac";
		curCtrlMap = ctrlmap[osToken];
		browserToken = "chrome";
		if (/firefox/i.test(userAgent))
			browserToken = "firefox";
		if (curCtrlMap)
			curCtrlMap = curCtrlMap[browserToken];
		window.addEventListener("webkitgamepadconnected", onConnected, false);
		window.addEventListener("webkitgamepaddisconnected", onDisconnected, false);
		window.addEventListener("MozGamepadConnected", onConnected, false);
		window.addEventListener("MozGamepadDisconnected", onDisconnected, false);
		window.addEventListener("gamepadconnected", onConnected, false);
		window.addEventListener("gamepaddisconnected", onDisconnected, false);
		this.runtime.tickMe(this);
		this.activeControllers = [];
	};
	instanceProto.tick = function ()
	{
		this.activeControllers.length = 0;
		var gamepads = null;
		if (navigator["getGamepads"])
			gamepads = navigator["getGamepads"]();
		else if (navigator["webkitGetGamepads"])
			gamepads = navigator["webkitGetGamepads"]();
		else if (navigator["mozGetGamepads"])
			gamepads = navigator["mozGetGamepads"]();
		else
			gamepads = navigator["gamepads"] || navigator["webkitGamepads"] || navigator["MozGamepads"] || controllers;
		if (!gamepads)
			return;
		var i, len, j, lenj, mapfunc, index, value;
		for (i = 0, len = gamepads.length; i < len; i++)
		{
			var pad = gamepads[i];
			if (!pad)
				continue;
			if (!pad.c2state)
			{
				pad.c2state = new Array(20);
				pad.c2oldstate = new Array(20);
				for (j = 0; j < 20; j++)
					pad.c2oldstate[j] = 0;
			}
			else
			{
				for (j = 0; j < 20; j++)
					pad.c2oldstate[j] = pad.c2state[j];
			}
			mapfunc = getMapper(pad.id);
			for (j = 0, lenj = pad["buttons"].length; j < lenj; j++)
			{
				value = pad["buttons"][j];
				index = mapfunc(j, false, value);
				if (index >= 0 && index < 20)
				{
					pad.c2state[index] = value * 100;
					if (pad.c2state[index] >= 50 && pad.c2oldstate[index] < 50)
						this.lastButton = index;
				}
			}
			for (j = 0, lenj = pad["axes"].length; j < lenj; j++)
			{
				value = pad["axes"][j];
				index = mapfunc(j, true, value);
				if (cr.is_number(index))
				{
					if (index >= 0 && index < 20)
						pad.c2state[index] = value * 100;
				}
				else
				{
					pad.c2state[index[0]] = 0;
					pad.c2state[index[1]] = 0;
					if (value <= 0)
						pad.c2state[index[0]] = Math.abs(value * 100);
					else
						pad.c2state[index[1]] = Math.abs(value * 100);
				}
			}
			this.activeControllers.push(pad);
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return { "lastButton": this.lastButton };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.lastButton = o["lastButton"];
	};
	function Cnds() {};
	Cnds.prototype.OnGamepadConnected = function ()
	{
		return true;
	};
	Cnds.prototype.OnGamepadDisconnected = function ()
	{
		return true;
	};
	Cnds.prototype.IsButtonDown = function (gamepad, button)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		var ret = pad.c2state[button] >= 50;
		if (ret)
			this.lastButton = button;
		return ret;
	};
	Cnds.prototype.OnButtonDown = function (gamepad, button)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		var ret = pad.c2state[button] >= 50 && pad.c2oldstate[button] < 50;
		if (ret)
			this.lastButton = button;
		return ret;
	};
	Cnds.prototype.OnButtonUp = function (gamepad, button)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		var ret = pad.c2state[button] < 50 && pad.c2oldstate[button] >= 50;
		if (ret)
			this.lastButton = button;
		return ret;
	};
	Cnds.prototype.HasGamepads = function ()
	{
		return this.activeControllers.length > 0;
	};
	Cnds.prototype.CompareAxis = function (gamepad, axis, comparison, value)
	{
		gamepad = Math.floor(gamepad);
		axis = Math.floor(axis);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		var axisvalue = pad.c2state[axis + axisOffset];
		var othervalue = 0;
		if (axis % 2 === 0)										// is X axis
			othervalue = pad.c2state[axis + axisOffset + 1];	// get next axis (Y)
		else
			othervalue = pad.c2state[axis + axisOffset - 1];	// get previous axis (X)
		if (Math.sqrt(axisvalue * axisvalue + othervalue * othervalue) <= this.deadzone)
			axisvalue = 0;
		return cr.do_cmp(axisvalue, comparison, value);
	};
	Cnds.prototype.OnAnyButtonDown = function (gamepad)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		var i, len;
		for (i = 0, len = pad.c2state.length; i < len; i++)
		{
			if (pad.c2state[i] >= 50 && pad.c2oldstate[i] < 50)
			{
				this.lastButton = i;
				return true;
			}
		}
		return false;
	};
	Cnds.prototype.OnAnyButtonUp = function (gamepad)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		var i, len;
		for (i = 0, len = pad.c2state.length; i < len; i++)
		{
			if (pad.c2state[i] < 50 && pad.c2oldstate[i] >= 50)
			{
				this.lastButton = i;
				return true;
			}
		}
		return false;
	};
	Cnds.prototype.IsButtonIndexDown = function (gamepad, button)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		button = Math.floor(button);
		if (button < 0 || button >= pad.c2state.length)
			return false;
		var ret = pad.c2state[button] >= 50;
		if (ret)
			this.lastButton = button;
		return ret;
	};
	Cnds.prototype.OnButtonIndexDown = function (gamepad, button)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		button = Math.floor(button);
		if (button < 0 || button >= pad.c2state.length)
			return false;
		var ret = pad.c2state[button] >= 50 && pad.c2oldstate[button] < 50;
		if (ret)
			this.lastButton = button;
		return ret;
	};
	Cnds.prototype.OnButtonIndexUp = function (gamepad, button)
	{
		gamepad = Math.floor(gamepad);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
			return false;
		var pad = this.activeControllers[gamepad];
		if (!pad.c2state)
			return false;
		button = Math.floor(button);
		if (button < 0 || button >= pad.c2state.length)
			return false;
		var ret = pad.c2state[button] < 50 && pad.c2oldstate[button] >= 50;
		if (ret)
			this.lastButton = button;
		return ret;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.GamepadCount = function (ret)
	{
		ret.set_int(this.activeControllers.length);
	};
	Exps.prototype.GamepadID = function (ret, index)
	{
		if (index < 0 || index >= this.activeControllers.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(this.activeControllers[index].id);
	};
	Exps.prototype.GamepadAxes = function (ret, index)
	{
		if (index < 0 || index >= this.activeControllers.length)
		{
			ret.set_string("");
			return;
		}
		var axes = this.activeControllers[index]["axes"];
		var str = "";
		var i, len;
		for (i = 0, len = axes.length; i < len; i++)
		{
			str += "Axis " + i + ": " + Math.round(axes[i] * 100) + "\n";
		}
		ret.set_string(str);
	};
	Exps.prototype.GamepadButtons = function (ret, index)
	{
		if (index < 0 || index >= this.activeControllers.length)
		{
			ret.set_string("");
			return;
		}
		var buttons = this.activeControllers[index]["buttons"];
		var str = "";
		var i, len;
		for (i = 0, len = buttons.length; i < len; i++)
		{
			str += "Button " + i + ": " + Math.round(buttons[i] * 100) + "\n";
		}
		ret.set_string(str);
	};
	Exps.prototype.RawButton = function (ret, gamepad, index)
	{
		gamepad = Math.floor(gamepad);
		index = Math.floor(index);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
		{
			ret.set_float(0);
			return;
		}
		var state = this.activeControllers[gamepad]["buttons"];
		if (!state || index < 0 || index >= state.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(state[index]);
	};
	Exps.prototype.RawAxis = function (ret, gamepad, index)
	{
		gamepad = Math.floor(gamepad);
		index = Math.floor(index);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
		{
			ret.set_float(0);
			return;
		}
		var state = this.activeControllers[gamepad]["axes"];
		if (!state || index < 0 || index >= state.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(state[index]);
	};
	Exps.prototype.RawButtonCount = function (ret, gamepad)
	{
		gamepad = Math.floor(gamepad);
		index = Math.floor(index);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
		{
			ret.set_int(0);
			return;
		}
		ret.set_int(this.activeControllers[gamepad]["buttons"].length);
	};
	Exps.prototype.RawAxisCount = function (ret, gamepad)
	{
		gamepad = Math.floor(gamepad);
		index = Math.floor(index);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
		{
			ret.set_int(0);
			return;
		}
		ret.set_int(this.activeControllers[gamepad]["axes"].length);
	};
	Exps.prototype.Button = function (ret, gamepad, index)
	{
		gamepad = Math.floor(gamepad);
		index = Math.floor(index);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
		{
			ret.set_float(0);
			return;
		}
		var state = this.activeControllers[gamepad].c2state;
		if (!state || index < 0 || index >= axisOffset)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(state[index]);
	};
	Exps.prototype.Axis = function (ret, gamepad, index)
	{
		gamepad = Math.floor(gamepad);
		index = Math.floor(index);
		if (gamepad < 0 || gamepad >= this.activeControllers.length)
		{
			ret.set_float(0);
			return;
		}
		var state = this.activeControllers[gamepad].c2state;
		if (!state || index < 0 || index >= 4)
		{
			ret.set_float(0);
			return;
		}
		var value = state[index + axisOffset];
		var othervalue = 0;
		if (index % 2 === 0)								// is X axis
			othervalue = state[index + axisOffset + 1];		// get next axis (Y)
		else
			othervalue = state[index + axisOffset - 1];		// get previous axis (X)
		if (Math.sqrt(value * value + othervalue * othervalue) <= this.deadzone)
			value = 0;
		ret.set_float(value);
	};
	Exps.prototype.LastButton = function (ret)
	{
		ret.set_int(this.lastButton);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.behaviors.Bullet = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Bullet.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		var speed = this.properties[0];
		this.acc = this.properties[1];
		this.g = this.properties[2];
		this.bounceOffSolid = (this.properties[3] !== 0);
		this.setAngle = (this.properties[4] !== 0);
		this.dx = Math.cos(this.inst.angle) * speed;
		this.dy = Math.sin(this.inst.angle) * speed;
		this.lastx = this.inst.x;
		this.lasty = this.inst.y;
		this.lastKnownAngle = this.inst.angle;
		this.travelled = 0;
		this.enabled = (this.properties[5] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"acc": this.acc,
			"g": this.g,
			"dx": this.dx,
			"dy": this.dy,
			"lx": this.lastx,
			"ly": this.lasty,
			"lka": this.lastKnownAngle,
			"t": this.travelled,
			"e": this.enabled
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.acc = o["acc"];
		this.g = o["g"];
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.lastx = o["lx"];
		this.lasty = o["ly"];
		this.lastKnownAngle = o["lka"];
		this.travelled = o["t"];
		this.enabled = o["e"];
	};
	behinstProto.tick = function ()
	{
		if (!this.enabled)
			return;
		var dt = this.runtime.getDt(this.inst);
		var s, a;
		var bounceSolid, bounceAngle;
		if (this.inst.angle !== this.lastKnownAngle)
		{
			if (this.setAngle)
			{
				s = cr.distanceTo(0, 0, this.dx, this.dy);
				this.dx = Math.cos(this.inst.angle) * s;
				this.dy = Math.sin(this.inst.angle) * s;
			}
			this.lastKnownAngle = this.inst.angle;
		}
		if (this.acc !== 0)
		{
			s = cr.distanceTo(0, 0, this.dx, this.dy);
			if (this.dx === 0 && this.dy === 0)
				a = this.inst.angle;
			else
				a = cr.angleTo(0, 0, this.dx, this.dy);
			s += this.acc * dt;
			if (s < 0)
				s = 0;
			this.dx = Math.cos(a) * s;
			this.dy = Math.sin(a) * s;
		}
		if (this.g !== 0)
			this.dy += this.g * dt;
		this.lastx = this.inst.x;
		this.lasty = this.inst.y;
		if (this.dx !== 0 || this.dy !== 0)
		{
			this.inst.x += this.dx * dt;
			this.inst.y += this.dy * dt;
			this.travelled += cr.distanceTo(0, 0, this.dx * dt, this.dy * dt)
			if (this.setAngle)
			{
				this.inst.angle = cr.angleTo(0, 0, this.dx, this.dy);
				this.inst.set_bbox_changed();
				this.lastKnownAngle = this.inst.angle;
			}
			this.inst.set_bbox_changed();
			if (this.bounceOffSolid)
			{
				bounceSolid = this.runtime.testOverlapSolid(this.inst);
				if (bounceSolid)
				{
					this.runtime.registerCollision(this.inst, bounceSolid);
					s = cr.distanceTo(0, 0, this.dx, this.dy);
					bounceAngle = this.runtime.calculateSolidBounceAngle(this.inst, this.lastx, this.lasty);
					this.dx = Math.cos(bounceAngle) * s;
					this.dy = Math.sin(bounceAngle) * s;
					this.inst.x += this.dx * dt;			// move out for one tick since the object can't have spent a tick in the solid
					this.inst.y += this.dy * dt;
					this.inst.set_bbox_changed();
					if (this.setAngle)
					{
						this.inst.angle = bounceAngle;
						this.lastKnownAngle = bounceAngle;
						this.inst.set_bbox_changed();
					}
					if (!this.runtime.pushOutSolid(this.inst, this.dx / s, this.dy / s, Math.max(s * 2.5 * dt, 30)))
						this.runtime.pushOutSolidNearest(this.inst, 100);
				}
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		return cr.do_cmp(cr.distanceTo(0, 0, this.dx, this.dy), cmp, s);
	};
	Cnds.prototype.CompareTravelled = function (cmp, d)
	{
		return cr.do_cmp(this.travelled, cmp, d);
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpeed = function (s)
	{
		var a = cr.angleTo(0, 0, this.dx, this.dy);
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.SetAcceleration = function (a)
	{
		this.acc = a;
	};
	Acts.prototype.SetGravity = function (g)
	{
		this.g = g;
	};
	Acts.prototype.SetAngleOfMotion = function (a)
	{
		a = cr.to_radians(a);
		var s = cr.distanceTo(0, 0, this.dx, this.dy)
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.Bounce = function (objtype)
	{
		if (!objtype)
			return;
		var otherinst = objtype.getFirstPicked(this.inst);
		if (!otherinst)
			return;
		var dt = this.runtime.getDt(this.inst);
		var s = cr.distanceTo(0, 0, this.dx, this.dy);
		var bounceAngle = this.runtime.calculateSolidBounceAngle(this.inst, this.lastx, this.lasty, otherinst);
		this.dx = Math.cos(bounceAngle) * s;
		this.dy = Math.sin(bounceAngle) * s;
		this.inst.x += this.dx * dt;			// move out for one tick since the object can't have spent a tick in the solid
		this.inst.y += this.dy * dt;
		this.inst.set_bbox_changed();
		if (this.setAngle)
		{
			this.inst.angle = bounceAngle;
			this.lastKnownAngle = bounceAngle;
			this.inst.set_bbox_changed();
		}
		if (this.bounceOffSolid)
		{
			if (!this.runtime.pushOutSolid(this.inst, this.dx / s, this.dy / s, Math.max(s * 2.5 * dt, 30)))
				this.runtime.pushOutSolidNearest(this.inst, 100);
		}
		else
		{
			this.runtime.pushOut(this.inst, this.dx / s, this.dy / s, Math.max(s * 2.5 * dt, 30), otherinst)
		}
	};
	Acts.prototype.SetEnabled = function (en)
	{
		this.enabled = (en === 1);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		var s = cr.distanceTo(0, 0, this.dx, this.dy);
		s = cr.round6dp(s);
		ret.set_float(s);
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.AngleOfMotion = function (ret)
	{
		ret.set_float(cr.to_degrees(cr.angleTo(0, 0, this.dx, this.dy)));
	};
	Exps.prototype.DistanceTravelled = function (ret)
	{
		ret.set_float(this.travelled);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.EightDir = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.EightDir.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.upkey = false;
		this.downkey = false;
		this.leftkey = false;
		this.rightkey = false;
		this.ignoreInput = false;
		this.simup = false;
		this.simdown = false;
		this.simleft = false;
		this.simright = false;
		this.lastuptick = -1;
		this.lastdowntick = -1;
		this.lastlefttick = -1;
		this.lastrighttick = -1;
		this.dx = 0;
		this.dy = 0;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.maxspeed = this.properties[0];
		this.acc = this.properties[1];
		this.dec = this.properties[2];
		this.directions = this.properties[3];	// 0=Up & down, 1=Left & right, 2=4 directions, 3=8 directions"
		this.angleMode = this.properties[4];	// 0=No,1=90-degree intervals, 2=45-degree intervals, 3=360 degree (smooth)
		this.defaultControls = (this.properties[5] === 1);	// 0=no, 1=yes
		this.enabled = (this.properties[6] !== 0);
		if (this.defaultControls && !this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				(function (self) {
					return function(info) {
						self.onKeyDown(info);
					};
				})(this)
			);
			jQuery(document).keyup(
				(function (self) {
					return function(info) {
						self.onKeyUp(info);
					};
				})(this)
			);
		}
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"dx": this.dx,
			"dy": this.dy,
			"enabled": this.enabled,
			"maxspeed": this.maxspeed,
			"acc": this.acc,
			"dec": this.dec,
			"ignoreInput": this.ignoreInput
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.enabled = o["enabled"];
		this.maxspeed = o["maxspeed"];
		this.acc = o["acc"];
		this.dec = o["dec"];
		this.ignoreInput = o["ignoreInput"];
		this.upkey = false;
		this.downkey = false;
		this.leftkey = false;
		this.rightkey = false;
		this.simup = false;
		this.simdown = false;
		this.simleft = false;
		this.simright = false;
		this.lastuptick = -1;
		this.lastdowntick = -1;
		this.lastlefttick = -1;
		this.lastrighttick = -1;
	};
	behinstProto.onKeyDown = function (info)
	{
		var tickcount = this.runtime.tickcount;
		switch (info.which) {
		case 37:	// left
			info.preventDefault();
			if (this.lastlefttick < tickcount)
				this.leftkey = true;
			break;
		case 38:	// up
			info.preventDefault();
			if (this.lastuptick < tickcount)
				this.upkey = true;
			break;
		case 39:	// right
			info.preventDefault();
			if (this.lastrighttick < tickcount)
				this.rightkey = true;
			break;
		case 40:	// down
			info.preventDefault();
			if (this.lastdowntick < tickcount)
				this.downkey = true;
			break;
		}
	};
	behinstProto.onKeyUp = function (info)
	{
		var tickcount = this.runtime.tickcount;
		switch (info.which) {
		case 37:	// left
			info.preventDefault();
			this.leftkey = false;
			this.lastlefttick = tickcount;
			break;
		case 38:	// up
			info.preventDefault();
			this.upkey = false;
			this.lastuptick = tickcount;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = false;
			this.lastrighttick = tickcount;
			break;
		case 40:	// down
			info.preventDefault();
			this.downkey = false;
			this.lastdowntick = tickcount;
			break;
		}
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var left = this.leftkey || this.simleft;
		var right = this.rightkey || this.simright;
		var up = this.upkey || this.simup;
		var down = this.downkey || this.simdown;
		this.simleft = false;
		this.simright = false;
		this.simup = false;
		this.simdown = false;
		if (!this.enabled)
			return;
		var collobj = this.runtime.testOverlapSolid(this.inst);
		if (collobj)
		{
			this.runtime.registerCollision(this.inst, collobj);
			if (!this.runtime.pushOutSolidNearest(this.inst))
				return;		// must be stuck in solid
		}
		if (this.ignoreInput)
		{
			left = false;
			right = false;
			up = false;
			down = false;
		}
		if (this.directions === 0)
		{
			left = false;
			right = false;
		}
		else if (this.directions === 1)
		{
			up = false;
			down = false;
		}
		if (this.directions === 2 && (up || down))
		{
			left = false;
			right = false;
		}
		if (left == right)	// both up or both down
		{
			if (this.dx < 0)
			{
				this.dx += this.dec * dt;
				if (this.dx > 0)
					this.dx = 0;
			}
			else if (this.dx > 0)
			{
				this.dx -= this.dec * dt;
				if (this.dx < 0)
					this.dx = 0;
			}
		}
		if (up == down)
		{
			if (this.dy < 0)
			{
				this.dy += this.dec * dt;
				if (this.dy > 0)
					this.dy = 0;
			}
			else if (this.dy > 0)
			{
				this.dy -= this.dec * dt;
				if (this.dy < 0)
					this.dy = 0;
			}
		}
		if (left && !right)
		{
			if (this.dx > 0)
				this.dx -= (this.acc + this.dec) * dt;
			else
				this.dx -= this.acc * dt;
		}
		if (right && !left)
		{
			if (this.dx < 0)
				this.dx += (this.acc + this.dec) * dt;
			else
				this.dx += this.acc * dt;
		}
		if (up && !down)
		{
			if (this.dy > 0)
				this.dy -= (this.acc + this.dec) * dt;
			else
				this.dy -= this.acc * dt;
		}
		if (down && !up)
		{
			if (this.dy < 0)
				this.dy += (this.acc + this.dec) * dt;
			else
				this.dy += this.acc * dt;
		}
		var ax, ay;
		if (this.dx !== 0 || this.dy !== 0)
		{
			var speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
			if (speed > this.maxspeed)
			{
				var a = Math.atan2(this.dy, this.dx);
				this.dx = this.maxspeed * Math.cos(a);
				this.dy = this.maxspeed * Math.sin(a);
			}
			var oldx = this.inst.x;
			var oldy = this.inst.y;
			var oldangle = this.inst.angle;
			this.inst.x += this.dx * dt;
			this.inst.set_bbox_changed();
			collobj = this.runtime.testOverlapSolid(this.inst);
			if (collobj)
			{
				this.inst.x = oldx;
				this.dx = 0;
				this.inst.set_bbox_changed();
				this.runtime.registerCollision(this.inst, collobj);
			}
			this.inst.y += this.dy * dt;
			this.inst.set_bbox_changed();
			collobj = this.runtime.testOverlapSolid(this.inst);
			if (collobj)
			{
				this.inst.y = oldy;
				this.dy = 0;
				this.inst.set_bbox_changed();
				this.runtime.registerCollision(this.inst, collobj);
			}
			ax = cr.round6dp(this.dx);
			ay = cr.round6dp(this.dy);
			if (ax !== 0 || ay !== 0)
			{
				if (this.angleMode === 1)	// 90 degree intervals
					this.inst.angle = cr.to_clamped_radians(Math.round(cr.to_degrees(Math.atan2(ay, ax)) / 90.0) * 90.0);
				else if (this.angleMode === 2)	// 45 degree intervals
					this.inst.angle = cr.to_clamped_radians(Math.round(cr.to_degrees(Math.atan2(ay, ax)) / 45.0) * 45.0);
				else if (this.angleMode === 3)	// 360 degree
					this.inst.angle = Math.atan2(ay, ax);
			}
			this.inst.set_bbox_changed();
			if (this.inst.angle != oldangle)
			{
				collobj = this.runtime.testOverlapSolid(this.inst);
				if (collobj)
				{
					this.inst.angle = oldangle;
					this.inst.set_bbox_changed();
					this.runtime.registerCollision(this.inst, collobj);
				}
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.IsMoving = function ()
	{
		return this.dx !== 0 || this.dy !== 0;
	};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		var speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
		return cr.do_cmp(speed, cmp, s);
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Stop = function ()
	{
		this.dx = 0;
		this.dy = 0;
	};
	Acts.prototype.Reverse = function ()
	{
		this.dx *= -1;
		this.dy *= -1;
	};
	Acts.prototype.SetIgnoreInput = function (ignoring)
	{
		this.ignoreInput = ignoring;
	};
	Acts.prototype.SetSpeed = function (speed)
	{
		if (speed < 0)
			speed = 0;
		if (speed > this.maxspeed)
			speed = this.maxspeed;
		var a = Math.atan2(this.dy, this.dx);
		this.dx = speed * Math.cos(a);
		this.dy = speed * Math.sin(a);
	};
	Acts.prototype.SetMaxSpeed = function (maxspeed)
	{
		this.maxspeed = maxspeed;
		if (this.maxspeed < 0)
			this.maxspeed = 0;
	};
	Acts.prototype.SetAcceleration = function (acc)
	{
		this.acc = acc;
		if (this.acc < 0)
			this.acc = 0;
	};
	Acts.prototype.SetDeceleration = function (dec)
	{
		this.dec = dec;
		if (this.dec < 0)
			this.dec = 0;
	};
	Acts.prototype.SimulateControl = function (ctrl)
	{
		switch (ctrl) {
		case 0:		this.simleft = true;	break;
		case 1:		this.simright = true;	break;
		case 2:		this.simup = true;		break;
		case 3:		this.simdown = true;	break;
		}
	};
	Acts.prototype.SetEnabled = function (en)
	{
		this.enabled = (en === 1);
	};
	Acts.prototype.SetVectorX = function (x_)
	{
		this.dx = x_;
	};
	Acts.prototype.SetVectorY = function (y_)
	{
		this.dy = y_;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(Math.sqrt(this.dx * this.dx + this.dy * this.dy));
	};
	Exps.prototype.MaxSpeed = function (ret)
	{
		ret.set_float(this.maxspeed);
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Deceleration = function (ret)
	{
		ret.set_float(this.dec);
	};
	Exps.prototype.MovingAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(Math.atan2(this.dy, this.dx)));
	};
	Exps.prototype.VectorX = function (ret)
	{
		ret.set_float(this.dx);
	};
	Exps.prototype.VectorY = function (ret)
	{
		ret.set_float(this.dy);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Fade = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Fade.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		var active_at_start = this.properties[0] === 1;
		this.fadeInTime = this.properties[1];
		this.waitTime = this.properties[2];
		this.fadeOutTime = this.properties[3];
		this.destroy = this.properties[4];			// 0 = no, 1 = after fade out
		this.stage = active_at_start ? 0 : 3;		// 0 = fade in, 1 = wait, 2 = fade out, 3 = done
		if (this.recycled)
			this.stageTime.reset();
		else
			this.stageTime = new cr.KahanAdder();
		this.maxOpacity = (this.inst.opacity ? this.inst.opacity : 1.0);
		if (active_at_start)
		{
			if (this.fadeInTime === 0)
			{
				this.stage = 1;
				if (this.waitTime === 0)
					this.stage = 2;
			}
			else
			{
				this.inst.opacity = 0;
				this.runtime.redraw = true;
			}
		}
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"fit": this.fadeInTime,
			"wt": this.waitTime,
			"fot": this.fadeOutTime,
			"s": this.stage,
			"st": this.stageTime.sum,
			"mo": this.maxOpacity,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.fadeInTime = o["fit"];
		this.waitTime = o["wt"];
		this.fadeOutTime = o["fot"];
		this.stage = o["s"];
		this.stageTime.reset();
		this.stageTime.sum = o["st"];
		this.maxOpacity = o["mo"];
	};
	behinstProto.tick = function ()
	{
		this.stageTime.add(this.runtime.getDt(this.inst));
		if (this.stage === 0)
		{
			this.inst.opacity = (this.stageTime.sum / this.fadeInTime) * this.maxOpacity;
			this.runtime.redraw = true;
			if (this.inst.opacity >= this.maxOpacity)
			{
				this.inst.opacity = this.maxOpacity;
				this.stage = 1;	// wait stage
				this.stageTime.reset();
			}
		}
		if (this.stage === 1)
		{
			if (this.stageTime.sum >= this.waitTime)
			{
				this.stage = 2;	// fade out stage
				this.stageTime.reset();
			}
		}
		if (this.stage === 2)
		{
			if (this.fadeOutTime !== 0)
			{
				this.inst.opacity = this.maxOpacity - ((this.stageTime.sum / this.fadeOutTime) * this.maxOpacity);
				this.runtime.redraw = true;
				if (this.inst.opacity < 0)
				{
					this.inst.opacity = 0;
					this.stage = 3;	// done
					this.stageTime.reset();
					this.runtime.trigger(cr.behaviors.Fade.prototype.cnds.OnFadeOutEnd, this.inst);
					if (this.destroy === 1)
						this.runtime.DestroyInstance(this.inst);
				}
			}
		}
	};
	behinstProto.doStart = function ()
	{
		this.stage = 0;
		this.stageTime.reset();
		if (this.fadeInTime === 0)
		{
			this.stage = 1;
			if (this.waitTime === 0)
				this.stage = 2;
		}
		else
		{
			this.inst.opacity = 0;
			this.runtime.redraw = true;
		}
	};
	function Cnds() {};
	Cnds.prototype.OnFadeOutEnd = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.StartFade = function ()
	{
		if (this.stage === 3)
			this.doStart();
	};
	Acts.prototype.RestartFade = function ()
	{
		this.doStart();
	};
	behaviorProto.acts = new Acts();
}());
;
;
cr.behaviors.Flash = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Flash.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.ontime = 0;
		this.offtime = 0;
		this.stage = 0;			// 0 = on, 1 = off
		this.stagetimeleft = 0;
		this.timeleft = 0;
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"ontime": this.ontime,
			"offtime": this.offtime,
			"stage": this.stage,
			"stagetimeleft": this.stagetimeleft,
			"timeleft": this.timeleft
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.ontime = o["ontime"];
		this.offtime = o["offtime"];
		this.stage = o["stage"];
		this.stagetimeleft = o["stagetimeleft"];
		this.timeleft = o["timeleft"];
	};
	behinstProto.tick = function ()
	{
		if (this.timeleft <= 0)
			return;		// not flashing
		var dt = this.runtime.getDt(this.inst);
		this.timeleft -= dt;
		if (this.timeleft <= 0)
		{
			this.timeleft = 0;
			this.inst.visible = true;
			this.runtime.redraw = true;
			this.runtime.trigger(cr.behaviors.Flash.prototype.cnds.OnFlashEnded, this.inst);
			return;
		}
		this.stagetimeleft -= dt;
		if (this.stagetimeleft <= 0)
		{
			if (this.stage === 0)
			{
				this.inst.visible = false;
				this.stage = 1;
				this.stagetimeleft += this.offtime;
			}
			else
			{
				this.inst.visible = true;
				this.stage = 0;
				this.stagetimeleft += this.ontime;
			}
			this.runtime.redraw = true;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsFlashing = function ()
	{
		return this.timeleft > 0;
	};
	Cnds.prototype.OnFlashEnded = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Flash = function (on_, off_, dur_)
	{
		this.ontime = on_;
		this.offtime = off_;
		this.stage = 1;		// always start off
		this.stagetimeleft = off_;
		this.timeleft = dur_;
		this.inst.visible = false;
		this.runtime.redraw = true;
	};
	Acts.prototype.StopFlashing = function ()
	{
		this.timeleft = 0;
		this.inst.visible = true;
		this.runtime.redraw = true;
		return;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Platform = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Platform.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	var ANIMMODE_STOPPED = 0;
	var ANIMMODE_MOVING = 1;
	var ANIMMODE_JUMPING = 2;
	var ANIMMODE_FALLING = 3;
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.leftkey = false;
		this.rightkey = false;
		this.jumpkey = false;
		this.jumped = false;			// prevent bunnyhopping
		this.ignoreInput = false;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		this.lastFloorObject = null;
		this.loadFloorObject = -1;
		this.lastFloorX = 0;
		this.lastFloorY = 0;
		this.floorIsJumpthru = false;
		this.animMode = ANIMMODE_STOPPED;
		this.fallthrough = 0;			// fall through jump-thru.  >0 to disable, lasts a few ticks
		this.firstTick = true;
		this.dx = 0;
		this.dy = 0;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.updateGravity = function()
	{
		this.downx = Math.cos(this.ga);
		this.downy = Math.sin(this.ga);
		this.rightx = Math.cos(this.ga - Math.PI / 2);
		this.righty = Math.sin(this.ga - Math.PI / 2);
		this.downx = cr.round6dp(this.downx);
		this.downy = cr.round6dp(this.downy);
		this.rightx = cr.round6dp(this.rightx);
		this.righty = cr.round6dp(this.righty);
		this.g1 = this.g;
		if (this.g < 0)
		{
			this.downx *= -1;
			this.downy *= -1;
			this.g = Math.abs(this.g);
		}
	};
	behinstProto.onCreate = function()
	{
		this.maxspeed = this.properties[0];
		this.acc = this.properties[1];
		this.dec = this.properties[2];
		this.jumpStrength = this.properties[3];
		this.g = this.properties[4];
		this.g1 = this.g;
		this.maxFall = this.properties[5];
		this.defaultControls = (this.properties[6] === 1);	// 0=no, 1=yes
		this.enabled = (this.properties[7] !== 0);
		this.wasOnFloor = false;
		this.wasOverJumpthru = this.runtime.testOverlapJumpThru(this.inst);
		this.ga = cr.to_radians(90);
		this.updateGravity();
		var self = this;
		if (this.defaultControls && !this.runtime.isDomFree)
		{
			jQuery(document).keydown(function(info) {
						self.onKeyDown(info);
					});
			jQuery(document).keyup(function(info) {
						self.onKeyUp(info);
					});
		}
		if (!this.recycled)
		{
			this.myDestroyCallback = function(inst) {
										self.onInstanceDestroyed(inst);
									};
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"ii": this.ignoreInput,
			"lfx": this.lastFloorX,
			"lfy": this.lastFloorY,
			"lfo": (this.lastFloorObject ? this.lastFloorObject.uid : -1),
			"am": this.animMode,
			"en": this.enabled,
			"fall": this.fallthrough,
			"ft": this.firstTick,
			"dx": this.dx,
			"dy": this.dy,
			"ms": this.maxspeed,
			"acc": this.acc,
			"dec": this.dec,
			"js": this.jumpStrength,
			"g": this.g,
			"g1": this.g1,
			"mf": this.maxFall,
			"wof": this.wasOnFloor,
			"woj": this.wasOverJumpthru,
			"ga": this.ga
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.ignoreInput = o["ii"];
		this.lastFloorX = o["lfx"];
		this.lastFloorY = o["lfy"];
		this.loadFloorObject = o["lfo"];
		this.animMode = o["am"];
		this.enabled = o["en"];
		this.fallthrough = o["fall"];
		this.firstTick = o["ft"];
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.maxspeed = o["ms"];
		this.acc = o["acc"];
		this.dec = o["dec"];
		this.jumpStrength = o["js"];
		this.g = o["g"];
		this.g1 = o["g1"];
		this.maxFall = o["mf"];
		this.wasOnFloor = o["wof"];
		this.wasOverJumpthru = o["woj"];
		this.ga = o["ga"];
		this.leftkey = false;
		this.rightkey = false;
		this.jumpkey = false;
		this.jumped = false;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		this.updateGravity();
	};
	behinstProto.afterLoad = function ()
	{
		if (this.loadFloorObject === -1)
			this.lastFloorObject = null;
		else
			this.lastFloorObject = this.runtime.getObjectByUID(this.loadFloorObject);
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.lastFloorObject == inst)
			this.lastFloorObject = null;
	};
	behinstProto.onDestroy = function ()
	{
		this.lastFloorObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.onKeyDown = function (info)
	{
		switch (info.which) {
		case 38:	// up
			info.preventDefault();
			this.jumpkey = true;
			break;
		case 37:	// left
			info.preventDefault();
			this.leftkey = true;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = true;
			break;
		}
	};
	behinstProto.onKeyUp = function (info)
	{
		switch (info.which) {
		case 38:	// up
			info.preventDefault();
			this.jumpkey = false;
			this.jumped = false;
			break;
		case 37:	// left
			info.preventDefault();
			this.leftkey = false;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = false;
			break;
		}
	};
	behinstProto.getGDir = function ()
	{
		if (this.g < 0)
			return -1;
		else
			return 1;
	};
	behinstProto.isOnFloor = function ()
	{
		var ret = null;
		var ret2 = null;
		var i, len, j;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		if (this.lastFloorObject && this.runtime.testOverlap(this.inst, this.lastFloorObject))
		{
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			return this.lastFloorObject;
		}
		else
		{
			ret = this.runtime.testOverlapSolid(this.inst);
			if (!ret && this.fallthrough === 0)
				ret2 = this.runtime.testOverlapJumpThru(this.inst, true);
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			if (ret)		// was overlapping solid
			{
				if (this.runtime.testOverlap(this.inst, ret))
					return null;
				else
				{
					this.floorIsJumpthru = false;
					return ret;
				}
			}
			if (ret2 && ret2.length)
			{
				for (i = 0, j = 0, len = ret2.length; i < len; i++)
				{
					ret2[j] = ret2[i];
					if (!this.runtime.testOverlap(this.inst, ret2[i]))
						j++;
				}
				if (j >= 1)
				{
					this.floorIsJumpthru = true;
					return ret2[0];
				}
			}
			return null;
		}
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.posttick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var mx, my, obstacle, mag, allover, i, len, j, oldx, oldy;
		if (!this.jumpkey && !this.simjump)
			this.jumped = false;
		var left = this.leftkey || this.simleft;
		var right = this.rightkey || this.simright;
		var jump = (this.jumpkey || this.simjump) && !this.jumped;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		if (!this.enabled)
			return;
		if (this.ignoreInput)
		{
			left = false;
			right = false;
			jump = false;
		}
		var lastFloor = this.lastFloorObject;
		var floor_moved = false;
		if (this.firstTick)
		{
			if (this.runtime.testOverlapSolid(this.inst) || this.runtime.testOverlapJumpThru(this.inst))
			{
				this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, 4, true);
			}
			this.firstTick = false;
		}
		if (lastFloor && this.dy === 0 && (lastFloor.y !== this.lastFloorY || lastFloor.x !== this.lastFloorX))
		{
			mx = (lastFloor.x - this.lastFloorX);
			my = (lastFloor.y - this.lastFloorY);
			this.inst.x += mx;
			this.inst.y += my;
			this.inst.set_bbox_changed();
			this.lastFloorX = lastFloor.x;
			this.lastFloorY = lastFloor.y;
			floor_moved = true;
			if (this.runtime.testOverlapSolid(this.inst))
			{
				this.runtime.pushOutSolid(this.inst, -mx, -my, Math.sqrt(mx * mx + my * my) * 2.5);
			}
		}
		var floor_ = this.isOnFloor();
		var collobj = this.runtime.testOverlapSolid(this.inst);
		if (collobj)
		{
			if (this.runtime.pushOutSolidNearest(this.inst, Math.max(this.inst.width, this.inst.height) / 2))
				this.runtime.registerCollision(this.inst, collobj);
			else
				return;
		}
		if (floor_)
		{
			if (this.dy > 0)
			{
				if (!this.wasOnFloor)
				{
					this.runtime.pushInFractional(this.inst, -this.downx, -this.downy, floor_, 16);
					this.wasOnFloor = true;
				}
				this.dy = 0;
			}
			if (lastFloor != floor_)
			{
				this.lastFloorObject = floor_;
				this.lastFloorX = floor_.x;
				this.lastFloorY = floor_.y;
				this.runtime.registerCollision(this.inst, floor_);
			}
			else if (floor_moved)
			{
				collobj = this.runtime.testOverlapSolid(this.inst);
				if (collobj)
				{
					this.runtime.registerCollision(this.inst, collobj);
					if (mx !== 0)
					{
						if (mx > 0)
							this.runtime.pushOutSolid(this.inst, -this.rightx, -this.righty);
						else
							this.runtime.pushOutSolid(this.inst, this.rightx, this.righty);
					}
					this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy);
				}
			}
			if (jump)
			{
				oldx = this.inst.x;
				oldy = this.inst.y;
				this.inst.x -= this.downx;
				this.inst.y -= this.downy;
				this.inst.set_bbox_changed();
				if (!this.runtime.testOverlapSolid(this.inst))
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnJump, this.inst);
					this.animMode = ANIMMODE_JUMPING;
					this.dy = -this.jumpStrength;
					this.jumped = true;
				}
				else
					jump = false;
				this.inst.x = oldx;
				this.inst.y = oldy;
				this.inst.set_bbox_changed();
			}
		}
		else
		{
			this.lastFloorObject = null;
			this.dy += this.g * dt;
			if (this.dy > this.maxFall)
				this.dy = this.maxFall;
			if (jump)
				this.jumped = true;
		}
		this.wasOnFloor = !!floor_;
		if (left == right)	// both up or both down
		{
			if (this.dx < 0)
			{
				this.dx += this.dec * dt;
				if (this.dx > 0)
					this.dx = 0;
			}
			else if (this.dx > 0)
			{
				this.dx -= this.dec * dt;
				if (this.dx < 0)
					this.dx = 0;
			}
		}
		if (left && !right)
		{
			if (this.dx > 0)
				this.dx -= (this.acc + this.dec) * dt;
			else
				this.dx -= this.acc * dt;
		}
		if (right && !left)
		{
			if (this.dx < 0)
				this.dx += (this.acc + this.dec) * dt;
			else
				this.dx += this.acc * dt;
		}
		if (this.dx > this.maxspeed)
			this.dx = this.maxspeed;
		else if (this.dx < -this.maxspeed)
			this.dx = -this.maxspeed;
		var landed = false;
		if (this.dx !== 0)
		{
			oldx = this.inst.x;
			oldy = this.inst.y;
			mx = this.dx * dt * this.rightx;
			my = this.dx * dt * this.righty;
			this.inst.x += this.rightx * (this.dx > 1 ? 1 : -1) - this.downx;
			this.inst.y += this.righty * (this.dx > 1 ? 1 : -1) - this.downy;
			this.inst.set_bbox_changed();
			var is_jumpthru = false;
			var slope_too_steep = this.runtime.testOverlapSolid(this.inst);
			/*
			if (!slope_too_steep && floor_)
			{
				slope_too_steep = this.runtime.testOverlapJumpThru(this.inst);
				is_jumpthru = true;
				if (slope_too_steep)
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlap(this.inst, slope_too_steep))
					{
						slope_too_steep = null;
						is_jumpthru = false;
					}
				}
			}
			*/
			this.inst.x = oldx + mx;
			this.inst.y = oldy + my;
			this.inst.set_bbox_changed();
			obstacle = this.runtime.testOverlapSolid(this.inst);
			if (!obstacle && floor_)
			{
				obstacle = this.runtime.testOverlapJumpThru(this.inst);
				if (obstacle)
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlap(this.inst, obstacle))
					{
						obstacle = null;
						is_jumpthru = false;
					}
					else
						is_jumpthru = true;
					this.inst.x = oldx + mx;
					this.inst.y = oldy + my;
					this.inst.set_bbox_changed();
				}
			}
			if (obstacle)
			{
				var push_dist = Math.abs(this.dx * dt) + 2;
				if (slope_too_steep || !this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, push_dist, is_jumpthru, obstacle))
				{
					this.runtime.registerCollision(this.inst, obstacle);
					push_dist = Math.max(Math.abs(this.dx * dt * 2.5), 30);
					if (!this.runtime.pushOutSolid(this.inst, this.rightx * (this.dx < 0 ? 1 : -1), this.righty * (this.dx < 0 ? 1 : -1), push_dist, false))
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
					}
					else if (floor_ && !is_jumpthru && !this.floorIsJumpthru)
					{
						oldx = this.inst.x;
						oldy = this.inst.y;
						this.inst.x += this.downx;
						this.inst.y += this.downy;
						if (this.runtime.testOverlapSolid(this.inst))
						{
							if (!this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, 3, false))
							{
								this.inst.x = oldx;
								this.inst.y = oldy;
								this.inst.set_bbox_changed();
							}
						}
						else
						{
							this.inst.x = oldx;
							this.inst.y = oldy;
							this.inst.set_bbox_changed();
						}
					}
					if (!is_jumpthru)
						this.dx = 0;	// stop
				}
				else if (!slope_too_steep && Math.abs(this.dy) < 15)
				{
					this.dy = 0;
					if (!floor_)
						landed = true;
				}
			}
			else
			{
				var newfloor = this.isOnFloor();
				if (floor_ && !newfloor)
				{
					mag = Math.ceil(Math.abs(this.dx * dt)) + 2;
					oldx = this.inst.x;
					oldy = this.inst.y;
					this.inst.x += this.downx * mag;
					this.inst.y += this.downy * mag;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlapSolid(this.inst) || this.runtime.testOverlapJumpThru(this.inst))
						this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, mag + 2, true);
					else
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
					}
				}
				else if (newfloor && this.dy === 0)
				{
					this.runtime.pushInFractional(this.inst, -this.downx, -this.downy, newfloor, 16);
				}
			}
		}
		if (this.dy !== 0)
		{
			oldx = this.inst.x;
			oldy = this.inst.y;
			this.inst.x += this.dy * dt * this.downx;
			this.inst.y += this.dy * dt * this.downy;
			var newx = this.inst.x;
			var newy = this.inst.y;
			this.inst.set_bbox_changed();
			collobj = this.runtime.testOverlapSolid(this.inst);
			var fell_on_jumpthru = false;
			if (!collobj && (this.dy > 0) && !floor_)
			{
				allover = this.fallthrough > 0 ? null : this.runtime.testOverlapJumpThru(this.inst, true);
				if (allover && allover.length)
				{
					if (this.wasOverJumpthru)
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
						for (i = 0, j = 0, len = allover.length; i < len; i++)
						{
							allover[j] = allover[i];
							if (!this.runtime.testOverlap(this.inst, allover[i]))
								j++;
						}
						allover.length = j;
						this.inst.x = newx;
						this.inst.y = newy;
						this.inst.set_bbox_changed();
					}
					if (allover.length >= 1)
						collobj = allover[0];
				}
				fell_on_jumpthru = !!collobj;
			}
			if (collobj)
			{
				this.runtime.registerCollision(this.inst, collobj);
				var push_dist = (fell_on_jumpthru ? Math.abs(this.dy * dt * 2.5 + 10) : Math.max(Math.abs(this.dy * dt * 2.5 + 10), 30));
				if (!this.runtime.pushOutSolid(this.inst, this.downx * (this.dy < 0 ? 1 : -1), this.downy * (this.dy < 0 ? 1 : -1), push_dist, fell_on_jumpthru, collobj))
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					this.wasOnFloor = true;		// prevent adjustment for unexpected floor landings
					if (!fell_on_jumpthru)
						this.dy = 0;	// stop
				}
				else
				{
					this.lastFloorObject = collobj;
					this.lastFloorX = collobj.x;
					this.lastFloorY = collobj.y;
					this.floorIsJumpthru = fell_on_jumpthru;
					if (fell_on_jumpthru)
						landed = true;
					this.dy = 0;	// stop
				}
			}
		}
		if (this.animMode !== ANIMMODE_FALLING && this.dy > 0 && !floor_)
		{
			this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnFall, this.inst);
			this.animMode = ANIMMODE_FALLING;
		}
		if (floor_ || landed)
		{
			if (this.animMode === ANIMMODE_FALLING || landed || (jump && this.dy === 0))
			{
				this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnLand, this.inst);
				if (this.dx === 0 && this.dy === 0)
					this.animMode = ANIMMODE_STOPPED;
				else
					this.animMode = ANIMMODE_MOVING;
			}
			else
			{
				if (this.animMode !== ANIMMODE_STOPPED && this.dx === 0 && this.dy === 0)
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnStop, this.inst);
					this.animMode = ANIMMODE_STOPPED;
				}
				if (this.animMode !== ANIMMODE_MOVING && (this.dx !== 0 || this.dy !== 0) && !jump)
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnMove, this.inst);
					this.animMode = ANIMMODE_MOVING;
				}
			}
		}
		if (this.fallthrough > 0)
			this.fallthrough--;
		this.wasOverJumpthru = this.runtime.testOverlapJumpThru(this.inst);
	};
	function Cnds() {};
	Cnds.prototype.IsMoving = function ()
	{
		return this.dx !== 0 || this.dy !== 0;
	};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		var speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.IsOnFloor = function ()
	{
		if (this.dy !== 0)
			return false;
		var ret = null;
		var ret2 = null;
		var i, len, j;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		ret = this.runtime.testOverlapSolid(this.inst);
		if (!ret && this.fallthrough === 0)
			ret2 = this.runtime.testOverlapJumpThru(this.inst, true);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		if (ret)		// was overlapping solid
		{
			return !this.runtime.testOverlap(this.inst, ret);
		}
		if (ret2 && ret2.length)
		{
			for (i = 0, j = 0, len = ret2.length; i < len; i++)
			{
				ret2[j] = ret2[i];
				if (!this.runtime.testOverlap(this.inst, ret2[i]))
					j++;
			}
			if (j >= 1)
				return true;
		}
		return false;
	};
	Cnds.prototype.IsByWall = function (side)
	{
		var ret = false;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x -= this.downx * 3;
		this.inst.y -= this.downy * 3;
		this.inst.set_bbox_changed();
		if (this.runtime.testOverlapSolid(this.inst))
		{
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			return false;
		}
		if (side === 0)		// left
		{
			this.inst.x -= this.rightx * 2;
			this.inst.y -= this.righty * 2;
		}
		else
		{
			this.inst.x += this.rightx * 2;
			this.inst.y += this.righty * 2;
		}
		this.inst.set_bbox_changed();
		ret = this.runtime.testOverlapSolid(this.inst);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		return ret;
	};
	Cnds.prototype.IsJumping = function ()
	{
		return this.dy < 0;
	};
	Cnds.prototype.IsFalling = function ()
	{
		return this.dy > 0;
	};
	Cnds.prototype.OnJump = function ()
	{
		return true;
	};
	Cnds.prototype.OnFall = function ()
	{
		return true;
	};
	Cnds.prototype.OnStop = function ()
	{
		return true;
	};
	Cnds.prototype.OnMove = function ()
	{
		return true;
	};
	Cnds.prototype.OnLand = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetIgnoreInput = function (ignoring)
	{
		this.ignoreInput = ignoring;
	};
	Acts.prototype.SetMaxSpeed = function (maxspeed)
	{
		this.maxspeed = maxspeed;
		if (this.maxspeed < 0)
			this.maxspeed = 0;
	};
	Acts.prototype.SetAcceleration = function (acc)
	{
		this.acc = acc;
		if (this.acc < 0)
			this.acc = 0;
	};
	Acts.prototype.SetDeceleration = function (dec)
	{
		this.dec = dec;
		if (this.dec < 0)
			this.dec = 0;
	};
	Acts.prototype.SetJumpStrength = function (js)
	{
		this.jumpStrength = js;
		if (this.jumpStrength < 0)
			this.jumpStrength = 0;
	};
	Acts.prototype.SetGravity = function (grav)
	{
		if (this.g1 === grav)
			return;		// no change
		this.g = grav;
		this.updateGravity();
		if (this.runtime.testOverlapSolid(this.inst))
		{
			this.runtime.pushOutSolid(this.inst, this.downx, this.downy, 10);
			this.inst.x += this.downx * 2;
			this.inst.y += this.downy * 2;
			this.inst.set_bbox_changed();
		}
		this.lastFloorObject = null;
	};
	Acts.prototype.SetMaxFallSpeed = function (mfs)
	{
		this.maxFall = mfs;
		if (this.maxFall < 0)
			this.maxFall = 0;
	};
	Acts.prototype.SimulateControl = function (ctrl)
	{
		switch (ctrl) {
		case 0:		this.simleft = true;	break;
		case 1:		this.simright = true;	break;
		case 2:		this.simjump = true;	break;
		}
	};
	Acts.prototype.SetVectorX = function (vx)
	{
		this.dx = vx;
	};
	Acts.prototype.SetVectorY = function (vy)
	{
		this.dy = vy;
	};
	Acts.prototype.SetGravityAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.ga === a)
			return;		// no change
		this.ga = a;
		this.updateGravity();
		this.lastFloorObject = null;
	};
	Acts.prototype.SetEnabled = function (en)
	{
		if (this.enabled !== (en === 1))
		{
			this.enabled = (en === 1);
			if (!this.enabled)
				this.lastFloorObject = null;
		}
	};
	Acts.prototype.FallThrough = function ()
	{
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		var overlaps = this.runtime.testOverlapJumpThru(this.inst, false);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		if (!overlaps)
			return;
		this.fallthrough = 3;			// disable jumpthrus for 3 ticks (1 doesn't do it, 2 does, 3 to be on safe side)
		this.lastFloorObject = null;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(Math.sqrt(this.dx * this.dx + this.dy * this.dy));
	};
	Exps.prototype.MaxSpeed = function (ret)
	{
		ret.set_float(this.maxspeed);
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Deceleration = function (ret)
	{
		ret.set_float(this.dec);
	};
	Exps.prototype.JumpStrength = function (ret)
	{
		ret.set_float(this.jumpStrength);
	};
	Exps.prototype.Gravity = function (ret)
	{
		ret.set_float(this.g);
	};
	Exps.prototype.GravityAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.ga));
	};
	Exps.prototype.MaxFallSpeed = function (ret)
	{
		ret.set_float(this.maxFall);
	};
	Exps.prototype.MovingAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(Math.atan2(this.dy, this.dx)));
	};
	Exps.prototype.VectorX = function (ret)
	{
		ret.set_float(this.dx);
	};
	Exps.prototype.VectorY = function (ret)
	{
		ret.set_float(this.dy);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Rotate = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rotate.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.speed = cr.to_radians(this.properties[0]);
		this.acc = cr.to_radians(this.properties[1]);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"speed": this.speed,
			"acc": this.acc
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.speed = o["speed"];
		this.acc = o["acc"];
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (dt === 0)
			return;
		if (this.acc !== 0)
			this.speed += this.acc * dt;
		if (this.speed !== 0)
		{
			this.inst.angle = cr.clamp_angle(this.inst.angle + this.speed * dt);
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpeed = function (s)
	{
		this.speed = cr.to_radians(s);
	};
	Acts.prototype.SetAcceleration = function (a)
	{
		this.acc = cr.to_radians(a);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(cr.to_degrees(this.speed));
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(cr.to_degrees(this.acc));
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Sin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Sin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// period offset (radians)
	};
	var behinstProto = behaviorProto.Instance.prototype;
	var _2pi = 2 * Math.PI;
	var _pi_2 = Math.PI / 2;
	var _3pi_2 = (3 * Math.PI) / 2;
	behinstProto.onCreate = function()
	{
		this.active = (this.properties[0] === 1);
		this.movement = this.properties[1]; // 0=Horizontal|1=Vertical|2=Size|3=Width|4=Height|5=Angle|6=Opacity|7=Value only
		this.wave = this.properties[2];		// 0=Sine|1=Triangle|2=Sawtooth|3=Reverse sawtooth|4=Square
		this.period = this.properties[3];
		this.period += Math.random() * this.properties[4];								// period random
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i = (this.properties[5] / this.period) * _2pi;								// period offset
			this.i += ((Math.random() * this.properties[6]) / this.period) * _2pi;			// period offset random
		}
		this.mag = this.properties[7];													// magnitude
		this.mag += Math.random() * this.properties[8];									// magnitude random
		this.initialValue = 0;
		this.initialValue2 = 0;
		this.ratio = 0;
		this.init();
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"i": this.i,
			"a": this.active,
			"mv": this.movement,
			"w": this.wave,
			"p": this.period,
			"mag": this.mag,
			"iv": this.initialValue,
			"iv2": this.initialValue2,
			"r": this.ratio,
			"lkv": this.lastKnownValue,
			"lkv2": this.lastKnownValue2
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.i = o["i"];
		this.active = o["a"];
		this.movement = o["mv"];
		this.wave = o["w"];
		this.period = o["p"];
		this.mag = o["mag"];
		this.initialValue = o["iv"];
		this.initialValue2 = o["iv2"] || 0;
		this.ratio = o["r"];
		this.lastKnownValue = o["lkv"];
		this.lastKnownValue2 = o["lkv2"] || 0;
	};
	behinstProto.init = function ()
	{
		switch (this.movement) {
		case 0:		// horizontal
			this.initialValue = this.inst.x;
			break;
		case 1:		// vertical
			this.initialValue = this.inst.y;
			break;
		case 2:		// size
			this.initialValue = this.inst.width;
			this.ratio = this.inst.height / this.inst.width;
			break;
		case 3:		// width
			this.initialValue = this.inst.width;
			break;
		case 4:		// height
			this.initialValue = this.inst.height;
			break;
		case 5:		// angle
			this.initialValue = this.inst.angle;
			this.mag = cr.to_radians(this.mag);		// convert magnitude from degrees to radians
			break;
		case 6:		// opacity
			this.initialValue = this.inst.opacity;
			break;
		case 7:
			this.initialValue = 0;
			break;
		case 8:		// forwards/backwards
			this.initialValue = this.inst.x;
			this.initialValue2 = this.inst.y;
			break;
		default:
;
		}
		this.lastKnownValue = this.initialValue;
		this.lastKnownValue2 = this.initialValue2;
	};
	behinstProto.waveFunc = function (x)
	{
		x = x % _2pi;
		switch (this.wave) {
		case 0:		// sine
			return Math.sin(x);
		case 1:		// triangle
			if (x <= _pi_2)
				return x / _pi_2;
			else if (x <= _3pi_2)
				return 1 - (2 * (x - _pi_2) / Math.PI);
			else
				return (x - _3pi_2) / _pi_2 - 1;
		case 2:		// sawtooth
			return 2 * x / _2pi - 1;
		case 3:		// reverse sawtooth
			return -2 * x / _2pi + 1;
		case 4:		// square
			return x < Math.PI ? -1 : 1;
		};
		return 0;
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (!this.active || dt === 0)
			return;
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i += (dt / this.period) * _2pi;
			this.i = this.i % _2pi;
		}
		switch (this.movement) {
		case 0:		// horizontal
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			this.inst.x = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			break;
		case 1:		// vertical
			if (this.inst.y !== this.lastKnownValue)
				this.initialValue += this.inst.y - this.lastKnownValue;
			this.inst.y = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.y;
			break;
		case 2:		// size
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.inst.height = this.inst.width * this.ratio;
			break;
		case 3:		// width
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 4:		// height
			this.inst.height = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 5:		// angle
			if (this.inst.angle !== this.lastKnownValue)
				this.initialValue = cr.clamp_angle(this.initialValue + (this.inst.angle - this.lastKnownValue));
			this.inst.angle = cr.clamp_angle(this.initialValue + this.waveFunc(this.i) * this.mag);
			this.lastKnownValue = this.inst.angle;
			break;
		case 6:		// opacity
			this.inst.opacity = this.initialValue + (this.waveFunc(this.i) * this.mag) / 100;
			if (this.inst.opacity < 0)
				this.inst.opacity = 0;
			else if (this.inst.opacity > 1)
				this.inst.opacity = 1;
			break;
		case 8:		// forwards/backwards
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			if (this.inst.y !== this.lastKnownValue2)
				this.initialValue2 += this.inst.y - this.lastKnownValue2;
			this.inst.x = this.initialValue + Math.cos(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.inst.y = this.initialValue2 + Math.sin(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			this.lastKnownValue2 = this.inst.y;
			break;
		}
		this.inst.set_bbox_changed();
	};
	behinstProto.onSpriteFrameChanged = function (prev_frame, next_frame)
	{
		switch (this.movement) {
		case 2:	// size
			this.initialValue *= (next_frame.width / prev_frame.width);
			this.ratio = next_frame.height / next_frame.width;
			break;
		case 3:	// width
			this.initialValue *= (next_frame.width / prev_frame.width);
			break;
		case 4:	// height
			this.initialValue *= (next_frame.height / prev_frame.height);
			break;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsActive = function ()
	{
		return this.active;
	};
	Cnds.prototype.CompareMovement = function (m)
	{
		return this.movement === m;
	};
	Cnds.prototype.ComparePeriod = function (cmp, v)
	{
		return cr.do_cmp(this.period, cmp, v);
	};
	Cnds.prototype.CompareMagnitude = function (cmp, v)
	{
		if (this.movement === 5)
			return cr.do_cmp(this.mag, cmp, cr.to_radians(v));
		else
			return cr.do_cmp(this.mag, cmp, v);
	};
	Cnds.prototype.CompareWave = function (w)
	{
		return this.wave === w;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetActive = function (a)
	{
		this.active = (a === 1);
	};
	Acts.prototype.SetPeriod = function (x)
	{
		this.period = x;
	};
	Acts.prototype.SetMagnitude = function (x)
	{
		this.mag = x;
		if (this.movement === 5)	// angle
			this.mag = cr.to_radians(this.mag);
	};
	Acts.prototype.SetMovement = function (m)
	{
		if (this.movement === 5)
			this.mag = cr.to_degrees(this.mag);
		this.movement = m;
		this.init();
	};
	Acts.prototype.SetWave = function (w)
	{
		this.wave = w;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.CyclePosition = function (ret)
	{
		ret.set_float(this.i / _2pi);
	};
	Exps.prototype.Period = function (ret)
	{
		ret.set_float(this.period);
	};
	Exps.prototype.Magnitude = function (ret)
	{
		if (this.movement === 5)	// angle
			ret.set_float(cr.to_degrees(this.mag));
		else
			ret.set_float(this.mag);
	};
	Exps.prototype.Value = function (ret)
	{
		ret.set_float(this.waveFunc(this.i) * this.mag);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.bound = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.bound.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.mode = 0;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.mode = this.properties[0];	// 0 = origin, 1 = edge
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.tick2 = function ()
	{
		this.inst.update_bbox();
		var bbox = this.inst.bbox;
		var layout = this.inst.layer.layout;
		var changed = false;
		if (this.mode === 0)	// origin
		{
			if (this.inst.x < 0)
			{
				this.inst.x = 0;
				changed = true;
			}
			if (this.inst.y < 0)
			{
				this.inst.y = 0;
				changed = true;
			}
			if (this.inst.x > layout.width)
			{
				this.inst.x = layout.width;
				changed = true;
			}
			if (this.inst.y > layout.height)
			{
				this.inst.y = layout.height;
				changed = true;
			}
		}
		else
		{
			if (bbox.left < 0)
			{
				this.inst.x -= bbox.left;
				changed = true;
			}
			if (bbox.top < 0)
			{
				this.inst.y -= bbox.top;
				changed = true;
			}
			if (bbox.right > layout.width)
			{
				this.inst.x -= (bbox.right - layout.width);
				changed = true;
			}
			if (bbox.bottom > layout.height)
			{
				this.inst.y -= (bbox.bottom - layout.height);
				changed = true;
			}
		}
		if (changed)
			this.inst.set_bbox_changed();
	};
}());
;
;
cr.behaviors.jumpthru = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.jumpthru.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.inst.extra.jumpthruEnabled = (this.properties[0] !== 0);
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.inst.extra.jumpthruEnabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (e)
	{
		this.inst.extra.jumpthruEnabled = !!e;
	};
	behaviorProto.acts = new Acts();
}());
;
;
cr.behaviors.scrollto = function(runtime)
{
	this.runtime = runtime;
	this.shakeMag = 0;
	this.shakeStart = 0;
	this.shakeEnd = 0;
	this.shakeMode = 0;
};
(function ()
{
	var behaviorProto = cr.behaviors.scrollto.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.enabled = (this.properties[0] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"smg": this.behavior.shakeMag,
			"ss": this.behavior.shakeStart,
			"se": this.behavior.shakeEnd,
			"smd": this.behavior.shakeMode
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.behavior.shakeMag = o["smg"];
		this.behavior.shakeStart = o["ss"];
		this.behavior.shakeEnd = o["se"];
		this.behavior.shakeMode = o["smd"];
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.tick2 = function ()
	{
		if (!this.enabled)
			return;
		var all = this.behavior.my_instances.values();
		var sumx = 0, sumy = 0;
		var i, len;
		for (i = 0, len = all.length; i < len; i++)
		{
			sumx += all[i].x;
			sumy += all[i].y;
		}
		var layout = this.inst.layer.layout;
		var now = this.runtime.kahanTime.sum;
		var offx = 0, offy = 0;
		if (now >= this.behavior.shakeStart && now < this.behavior.shakeEnd)
		{
			var mag = this.behavior.shakeMag * Math.min(this.runtime.timescale, 1);
			if (this.behavior.shakeMode === 0)
				mag *= 1 - (now - this.behavior.shakeStart) / (this.behavior.shakeEnd - this.behavior.shakeStart);
			var a = Math.random() * Math.PI * 2;
			var d = Math.random() * mag;
			offx = Math.cos(a) * d;
			offy = Math.sin(a) * d;
		}
		layout.scrollToX(sumx / all.length + offx);
		layout.scrollToY(sumy / all.length + offy);
	};
	function Acts() {};
	Acts.prototype.Shake = function (mag, dur, mode)
	{
		this.behavior.shakeMag = mag;
		this.behavior.shakeStart = this.runtime.kahanTime.sum;
		this.behavior.shakeEnd = this.behavior.shakeStart + dur;
		this.behavior.shakeMode = mode;
	};
	Acts.prototype.SetEnabled = function (e)
	{
		this.enabled = (e !== 0);
	};
	behaviorProto.acts = new Acts();
}());
;
;
cr.behaviors.solid = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.solid.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.inst.extra.solidEnabled = (this.properties[0] !== 0);
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.inst.extra.solidEnabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (e)
	{
		this.inst.extra.solidEnabled = !!e;
	};
	behaviorProto.acts = new Acts();
}());
cr.getProjectModel = function() { return [
	null,
	"0main-screen",
	[
	[
		cr.plugins_.Audio,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Browser,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.WebStorage,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.gamepad,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Keyboard,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.TiledBg,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Mouse,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.NodeWebkit,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Particles,
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Sprite,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false
	]
,	[
		cr.plugins_.Touch,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Text,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false
	]
	],
	[
	[
		"t0",
		cr.plugins_.WebStorage,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1510269620771624,
		[],
		null
		,[]
	]
,	[
		"t1",
		cr.plugins_.gamepad,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		996683554706134,
		[],
		null
		,[25]
	]
,	[
		"t2",
		cr.plugins_.Keyboard,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		4436305314906168,
		[],
		null
		,[]
	]
,	[
		"t3",
		cr.plugins_.Mouse,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3506161195311074,
		[],
		null
		,[]
	]
,	[
		"t4",
		cr.plugins_.Touch,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2463496682349194,
		[],
		null
		,[1]
	]
,	[
		"t5",
		cr.plugins_.Audio,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2722091819329769,
		[],
		null
		,[0,0,1,1,600,600,10000,1,5000,1]
	]
,	[
		"t6",
		cr.plugins_.Browser,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3498868852026895,
		[],
		null
		,[]
	]
,	[
		"t7",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky.png", 4433, 1],
		null,
		[
		],
		false,
		false,
		5286668288162788,
		[],
		null
	]
,	[
		"t8",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky2.png", 109, 1],
		null,
		[
		],
		false,
		false,
		7412020016866766,
		[],
		null
	]
,	[
		"t9",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			1616424926184098,
			[
				["images/land_grass-sheet0.png", 3807, 1, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 116, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 116, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 116, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 116, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 116, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 116, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 139, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 139, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 139, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 139, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 139, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 139, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 1, 162, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 38, 162, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 75, 162, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 112, 162, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 149, 162, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_grass-sheet0.png", 3807, 186, 162, 36, 22, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			9319830839988702
		]
		],
		false,
		false,
		1653506598978722,
		[],
		null
	]
,	[
		"t10",
		cr.plugins_.Sprite,
		false,
		[],
		3,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1199565469485179,
			[
				["images/playerbox-sheet0.png", 155, 0, 0, 250, 250, 1, 0.588, 1.008,[["top", 0.74, 0.372]],[],1]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			3643405206298965
		]
,		[
			"ScrollTo",
			cr.behaviors.scrollto,
			5445885567113291
		]
,		[
			"BoundToLayout",
			cr.behaviors.bound,
			4052413589870285
		]
		],
		false,
		false,
		9540500891613144,
		[],
		null
	]
,	[
		"t11",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			7081923598044609,
			[
				["images/player-sheet0.png", 539, 1, 1, 15, 26, 1, 0.533333, 1,[],[],0]
			]
			]
,			[
			"Run",
			10,
			true,
			1,
			0,
			false,
			5563801367055779,
			[
				["images/player-sheet0.png", 539, 17, 1, 15, 26, 1, 0.533333, 1,[],[],0],
				["images/player-sheet0.png", 539, 33, 1, 15, 26, 1, 0.533333, 1,[],[],0]
			]
			]
,			[
			"Jump",
			0,
			false,
			1,
			0,
			false,
			3850134355868888,
			[
				["images/player-sheet0.png", 539, 1, 28, 15, 26, 1, 0.533333, 1,[],[],0]
			]
			]
,			[
			"abajo",
			0,
			false,
			1,
			0,
			false,
			7499558423641118,
			[
				["images/player-sheet0.png", 539, 17, 28, 15, 26, 1, 0.533333, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4174982534948339,
		[],
		null
	]
,	[
		"t12",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2048256117731347,
			[
				["images/muerte-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		9691776838292025,
		[],
		null
	]
,	[
		"t13",
		cr.plugins_.Sprite,
		false,
		[9763573323490886,6297156532166565],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2164113074558581,
			[
				["images/land_grass-sheet0.png", 3807, 38, 93, 36, 22, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			8472122190728622
		]
,		[
			"8Direction",
			cr.behaviors.EightDir,
			6642281082986897
		]
		],
		false,
		false,
		251816283012686,
		[],
		null
	]
,	[
		"t14",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8523659075621949,
			[
				["images/detector-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		6953174660153158,
		[],
		null
	]
,	[
		"t15",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky3.png", 109, 1],
		null,
		[
		],
		false,
		false,
		4304602185622547,
		[],
		null
	]
,	[
		"t16",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2268309222709481,
			[
				["images/flag-sheet0.png", 196, 0, 0, 20, 55, 1, 0.5, 1,[],[-0.05,-0.836364,0,-0.836364,0.4,-0.963636,0.4,-0.036364,0,-0.672727,0.3,-0.290909,0.3,-0.509091],0]
			]
			]
		],
		[
		],
		false,
		false,
		9276429026856903,
		[],
		null
	]
,	[
		"t17",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			20,
			false,
			1,
			0,
			false,
			6613164129194599,
			[
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		59475807027243,
		[],
		null
	]
,	[
		"t18",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			20,
			false,
			1,
			0,
			false,
			6328745858646385,
			[
				["images/in-sheet0.png", 4225, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		8668536778359741,
		[],
		null
	]
,	[
		"t19",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			7,
			true,
			1,
			0,
			false,
			7284907967762446,
			[
				["images/coin-sheet0.png", 223, 0, 0, 7, 11, 1, 0.571429, 0.545455,[],[-0.428572,-0.454545,-0.142858,-0.545455,0.285714,-0.454545,0.428571,-0.0909096,0.285714,0.363636,-0.142858,0.454545,-0.428572,0.363636,-0.571429,-0.0909096],0],
				["images/coin-sheet1.png", 151, 0, 0, 7, 11, 1, 0.571429, 0.545455,[],[-0.428572,-0.454545,-0.142858,-0.545455,0.285714,-0.454545,0.428571,-0.0909096,0.285714,0.363636,-0.142858,0.454545,-0.428572,0.363636,-0.571429,-0.0909096],0]
			]
			]
		],
		[
		],
		false,
		false,
		6236187172143957,
		[],
		null
	]
,	[
		"t20",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2454254556178091,
		[],
		null
	]
,	[
		"t21",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2809520670058638,
		[],
		null
	]
,	[
		"t22",
		cr.plugins_.Sprite,
		false,
		[4066412708201974,6386078236659938],
		1,
		0,
		null,
		[
			[
			"Default",
			10,
			true,
			1,
			0,
			false,
			3803018395454682,
			[
				["images/bird-sheet0.png", 189, 0, 0, 12, 11, 1, 0.5, 0.545455,[],[],0],
				["images/bird-sheet1.png", 190, 0, 0, 12, 11, 1, 0.5, 0.545455,[],[],0]
			]
			]
		],
		[
		[
			"8Direction",
			cr.behaviors.EightDir,
			5594256543415474
		]
		],
		false,
		false,
		3007473155557375,
		[],
		null
	]
,	[
		"t23",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/andando.png", 112, 3],
		null,
		[
		],
		false,
		false,
		2220909736911908,
		[],
		null
	]
,	[
		"t24",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			1605752846965461,
			[
				["images/landsnow-sheet0.png", 1301, 1, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 38, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 75, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 1, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 38, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 75, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 1, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 38, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 75, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 1, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 38, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 75, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 1, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 38, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet0.png", 1301, 75, 93, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 1, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 38, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 75, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 1, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 38, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 75, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 1, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 38, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 75, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 1, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 38, 70, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/landsnow-sheet1.png", 1208, 75, 70, 36, 22, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			5411225284738707
		]
		],
		false,
		false,
		82863933813769,
		[],
		null
	]
,	[
		"t25",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/andando.png", 112, 3],
		null,
		[
		],
		false,
		false,
		5413494633105976,
		[],
		null
	]
,	[
		"t26",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2328968036919169,
			[
				["images/flag-sheet0.png", 196, 0, 0, 20, 55, 1, 0.5, 1,[],[-0.05,-0.836364,0,-0.836364,0.4,-0.963636,0.4,-0.036364,0,-0.672727,0.3,-0.290909,0.3,-0.509091],0]
			]
			]
		],
		[
		],
		false,
		false,
		7933193765821645,
		[],
		null
	]
,	[
		"t27",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/tiledbackground.png", 9584, 1],
		null,
		[
		],
		false,
		false,
		1498847679596172,
		[],
		null
	]
,	[
		"t28",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky4.png", 109, 1],
		null,
		[
		],
		false,
		false,
		8488808336030362,
		[],
		null
	]
,	[
		"t29",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			2232134779375056,
			[
				["images/sprite-sheet0.png", 349, 1, 1, 13, 37, 1, 0.538462, 0.702703,[],[],0],
				["images/sprite-sheet0.png", 349, 15, 1, 13, 37, 1, 0.461538, 0.702703,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7746291129607672,
		[],
		null
	]
,	[
		"t30",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9092742803665295,
			[
				["images/solido-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			705189180112159
		]
		],
		false,
		false,
		2921360180555942,
		[],
		null
	]
,	[
		"t31",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2747433175085729,
			[
				["images/sprite2-sheet0.png", 579, 0, 0, 39, 66, 1, 0.512821, 0.5,[],[-0.435897,-0.454545,-0.0256415,-0.242424,0.0256414,-0.227273,0.0769234,0,0.487179,0.5,-0.512821,0.5,-0.512821,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		2276779636202628,
		[],
		null
	]
,	[
		"t32",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2402805303410312,
			[
				["images/detector-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		5989891157836109,
		[],
		null
	]
,	[
		"t33",
		cr.plugins_.Sprite,
		false,
		[8200819727925929,9808902148772538],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5126376355752347,
			[
				["images/landsnow-sheet1.png", 1208, 38, 70, 36, 22, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			5858673006210805
		]
,		[
			"8Direction",
			cr.behaviors.EightDir,
			6093895162113745
		]
		],
		false,
		false,
		3392156694874423,
		[],
		null
	]
,	[
		"t34",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4045055027923838,
			[
				["images/sprite3-sheet0.png", 168, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		3330683614425459,
		[],
		null
	]
,	[
		"t35",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			7,
			true,
			1,
			0,
			false,
			8399499253625774,
			[
				["images/star-sheet0.png", 154, 0, 0, 15, 15, 1, 0.6, 0.533333,[],[-0.266667,-0.2,-0.133333,-0.533333,0.066667,-0.2,0.4,-0.0666664,0.333333,0.4,-0.133333,0.333334,-0.533333,0.4,-0.6,-0.0666664],0],
				["images/star-sheet1.png", 190, 0, 0, 15, 15, 1, 0.6, 0.533333,[],[-0.266667,-0.2,-0.133333,-0.533333,0.066667,-0.2,0.4,-0.0666664,0.333333,0.4,-0.133333,0.333334,-0.533333,0.4,-0.6,-0.0666664],0]
			]
			]
		],
		[
		],
		false,
		false,
		7190585324933479,
		[],
		null
	]
,	[
		"t36",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3705425484415125,
		[],
		null
	]
,	[
		"t37",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5224638723727014,
			[
				["images/hearts-sheet0.png", 275, 1, 1, 31, 10, 1, 0.516129, 0.5,[],[],0],
				["images/hearts-sheet0.png", 275, 1, 12, 31, 10, 1, 0.516129, 0.5,[],[],0],
				["images/hearts-sheet0.png", 275, 1, 23, 31, 10, 1, 0.516129, 0.5,[],[],0],
				["images/hearts-sheet0.png", 275, 1, 34, 31, 10, 0, 0.516129, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4784285756721939,
		[],
		null
	]
,	[
		"t38",
		cr.plugins_.Sprite,
		false,
		[1908911851148948],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9463903323884171,
			[
				["images/ball_snow-sheet0.png", 372, 0, 0, 32, 32, 1, 0.5, 0.5,[],[-0.28125,-0.28125,0,-0.46875,0.28125,-0.28125,0.5,0,0.3125,0.3125,0,0.46875,-0.3125,0.3125,-0.5,0],0]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			2611090179844426
		]
,		[
			"Rotate",
			cr.behaviors.Rotate,
			7790212671399517
		]
		],
		false,
		false,
		2393771994700136,
		[],
		null
	]
,	[
		"t39",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8243630685770999,
			[
				["images/detector_enemies-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		1344562724165331,
		[],
		null
	]
,	[
		"t40",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4528236065307201,
			[
				["images/solido-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			4472340252098516
		]
		],
		false,
		false,
		4235748551022674,
		[],
		null
	]
,	[
		"t41",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			false,
			1,
			0,
			false,
			258173992727079,
			[
				["images/timer-sheet0.png", 1356, 1, 1, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet0.png", 1356, 252, 1, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet0.png", 1356, 1, 252, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet0.png", 1356, 252, 252, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet1.png", 1356, 1, 1, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet1.png", 1356, 252, 1, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet1.png", 1356, 1, 252, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet1.png", 1356, 252, 252, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet2.png", 1356, 1, 1, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet2.png", 1356, 252, 1, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet2.png", 1356, 1, 252, 250, 250, 1, 0.5, 0.5,[],[],0],
				["images/timer-sheet2.png", 1356, 252, 252, 250, 250, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8350817801528837,
		[],
		null
	]
,	[
		"t42",
		cr.plugins_.Sprite,
		false,
		[3362601611756744],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9053965454937796,
			[
				["images/enemiebox-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 0.58,[],[],1]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			9151843034028988
		]
		],
		false,
		false,
		4220097873427963,
		[],
		null
	]
,	[
		"t43",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky5.png", 109, 1],
		null,
		[
		],
		false,
		false,
		5790428971396995,
		[],
		null
	]
,	[
		"t44",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/andando_barro.png", 112, 0],
		null,
		[
		],
		false,
		false,
		2442441721241451,
		[],
		null
	]
,	[
		"t45",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			12,
			true,
			1,
			0,
			false,
			4445635751939326,
			[
				["images/agujero-sheet0.png", 152, 1, 9, 11, 6, 1, 0.545455, 1,[],[],0],
				["images/agujero-sheet0.png", 152, 1, 1, 11, 7, 1, 0.545455, 1,[],[],0],
				["images/agujero-sheet1.png", 141, 0, 0, 11, 7, 1, 0.545455, 1,[],[],0],
				["images/agujero-sheet2.png", 139, 0, 0, 11, 7, 1, 0.545455, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		498137671995271,
		[],
		null
	]
,	[
		"t46",
		cr.plugins_.Sprite,
		false,
		[9701216692069479,4559010951414924],
		2,
		0,
		null,
		[
			[
			"Default",
			12,
			true,
			1,
			0,
			false,
			6073918518844213,
			[
				["images/chorro_barro-sheet0.png", 637, 1, 1, 33, 70, 1, 0.515152, 1,[],[],0],
				["images/chorro_barro-sheet0.png", 637, 35, 1, 33, 70, 1, 0.515152, 1,[],[],0],
				["images/chorro_barro-sheet0.png", 637, 69, 1, 33, 70, 1, 0.515152, 1,[],[],0],
				["images/chorro_barro-sheet1.png", 305, 0, 0, 33, 70, 1, 0.515152, 1,[],[],0]
			]
			]
		],
		[
		[
			"8Direction",
			cr.behaviors.EightDir,
			5159775773549251
		]
,		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			3373357976702159
		]
		],
		false,
		false,
		3579862074328692,
		[],
		null
	]
,	[
		"t47",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			465335988190134,
			[
				["images/tree-sheet0.png", 327, 1, 1, 13, 37, 1, 0.538462, 1,[],[],0],
				["images/tree-sheet0.png", 327, 15, 1, 13, 37, 1, 0.538462, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8251133410391118,
		[],
		null
	]
,	[
		"t48",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			559049990287746,
			[
				["images/sprite4-sheet0.png", 633, 0, 0, 39, 63, 1, 0.512821, 0.507937,[],[-0.0769235,-0.238096,-0.0256415,-0.301588,0.487179,-0.507937,0.487179,0.492063,-0.512821,0.492063,-0.128206,-0.0158736],0]
			]
			]
		],
		[
		],
		false,
		false,
		6831201686284506,
		[],
		null
	]
,	[
		"t49",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			15,
			false,
			1,
			0,
			false,
			5624157440113613,
			[
				["images/stageclear-sheet0.png", 9204, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"loop",
			4,
			true,
			1,
			0,
			false,
			8388058923417894,
			[
				["images/stageclear-sheet0.png", 9204, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"final",
			15,
			false,
			1,
			0,
			false,
			8817893002113192,
			[
				["images/stageclear-sheet0.png", 9204, 603, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 1, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 302, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet0.png", 9204, 603, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet1.png", 2256, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet1.png", 2256, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/stageclear-sheet1.png", 2256, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		1246522822145924,
		[],
		null
	]
,	[
		"t50",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7199163261537997,
			[
				["images/shine-sheet0.png", 2358, 0, 0, 397, 397, 1, 0.501259, 0.501259,[],[-0.38539,-0.38539,-0.00251845,-0.501259,0.380353,-0.382871,0.498741,-0.00251845,0.380353,0.380353,-0.00251845,0.498741,-0.382871,0.380353,-0.501259,-0.00251845],0]
			]
			]
		],
		[
		[
			"Rotate",
			cr.behaviors.Rotate,
			7403099364340312
		]
		],
		false,
		false,
		4458287288023807,
		[],
		null
	]
,	[
		"t51",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/tiledbackground2.png", 4647, 0],
		null,
		[
		],
		false,
		false,
		5546333193867144,
		[],
		null
	]
,	[
		"t52",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/tiledbackground3.png", 4630, 0],
		null,
		[
		],
		false,
		false,
		547763530953579,
		[],
		null
	]
,	[
		"t53",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			15,
			false,
			1,
			0,
			false,
			1734246300713693,
			[
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/intro-sheet0.png", 13425, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 603, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 1, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet0.png", 13425, 302, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/intro-sheet0.png", 13425, 603, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 603, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 1, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 302, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet1.png", 56224, 603, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet2.png", 33424, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet2.png", 33424, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet2.png", 33424, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"play",
			5,
			true,
			1,
			0,
			false,
			1315726362131073,
			[
				["images/intro-sheet2.png", 33424, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet2.png", 33424, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"credits",
			5,
			true,
			1,
			0,
			false,
			9196354799716619,
			[
				["images/intro-sheet2.png", 33424, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/intro-sheet2.png", 33424, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2092241207901682,
		[],
		null
	]
,	[
		"t54",
		cr.plugins_.Sprite,
		false,
		[1493353100042436],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8172864445141043,
			[
				["images/pausescreen-sheet0.png", 507, 0, 0, 300, 200, 1, 0.5, 0.5,[],[-0.22,-0.08,0,-0.15,0.216667,-0.075,0.21,0,0.216667,0.075,0,0.09,-0.22,0.08],0]
			]
			]
		],
		[
		],
		false,
		false,
		620859170872683,
		[],
		null
	]
,	[
		"t55",
		cr.plugins_.Sprite,
		false,
		[4934079574865666],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5249310174514135,
			[
				["images/ball_grass-sheet0.png", 633, 1, 1, 32, 32, 1, 0.5, 0.5,[],[-0.28125,-0.28125,0,-0.46875,0.28125,-0.28125,0.5,0,0.3125,0.3125,0,0.46875,-0.3125,0.3125,-0.5,0],0],
				["images/ball_grass-sheet0.png", 633, 34, 1, 26, 26, 1, 0.5, 0.5,[],[],0],
				["images/sprite3-sheet0.png", 168, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],3],
				["images/ball_grass-sheet1.png", 459, 0, 0, 32, 32, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			4472861367132772
		]
,		[
			"Rotate",
			cr.behaviors.Rotate,
			1956860788219961
		]
		],
		false,
		false,
		4546180776754544,
		[],
		null
	]
,	[
		"t56",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/cave_bg.png", 7742, 1],
		null,
		[
		],
		false,
		false,
		5948543365628957,
		[],
		null
	]
,	[
		"t57",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			446239831603793,
			[
				["images/land_cave-sheet0.png", 6512, 147, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 184, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 116, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 116, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 116, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 116, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 116, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 116, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 139, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 139, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 139, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 139, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 139, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 139, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 162, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 162, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 162, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 112, 162, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 149, 162, 36, 22, 1, 0.5, 1,[],[],0],
				["images/land_cave-sheet0.png", 6512, 186, 162, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 185, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_cave-sheet0.png", 6512, 38, 185, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_cave-sheet0.png", 6512, 75, 185, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_cave-sheet0.png", 6512, 1, 1, 72, 22, 1, 0.5, 0.5,[],[],0],
				["images/land_cave-sheet0.png", 6512, 74, 1, 72, 22, 1, 0.5, 0.5,[],[0.5,0.5,-0.5,0.5,-0.5,-0.5,0.5,-0.5],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			9415363914250808
		]
,		[
			"Solid",
			cr.behaviors.solid,
			2075559181982927
		]
		],
		false,
		false,
		6192448275168804,
		[],
		null
	]
,	[
		"t58",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8786894215179292,
			[
				["images/detector_volver-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		4549655803480374,
		[],
		null
	]
,	[
		"t59",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			12,
			true,
			1,
			0,
			false,
			2789769754367994,
			[
				["images/agua-sheet0.png", 143, 1, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/agua-sheet0.png", 143, 1, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/agua-sheet1.png", 143, 1, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/agua-sheet1.png", 143, 1, 24, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/agua-sheet2.png", 136, 1, 1, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/agua-sheet2.png", 136, 1, 24, 36, 22, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7197871237382205,
		[],
		null
	]
,	[
		"t60",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5097684900836187,
			[
				["images/detector_agua-sheet0.png", 105, 0, 0, 36, 22, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		8979000934955855,
		[],
		null
	]
,	[
		"t61",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/bubble.png", 116, 0],
		null,
		[
		],
		false,
		false,
		3273256296216261,
		[],
		null
	]
,	[
		"t62",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4705999110677281,
			[
				["images/cristal2-sheet0.png", 217, 0, 0, 24, 25, 1, 0.5, 0.52,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		325681614503979,
		[],
		null
	]
,	[
		"t63",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3301362204434315,
			[
				["images/cristal1-sheet0.png", 291, 0, 0, 24, 25, 1, 0.5, 0.52,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8741953799997799,
		[],
		null
	]
,	[
		"t64",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4174886496638909,
			[
				["images/enter_cave-sheet0.png", 619, 0, 0, 36, 60, 1, 0.5, 0.5,[],[-0.5,-0.5,0,-0.333333,0.111111,-0.266667,0.305556,0,0.5,0.5,-0.5,0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		6855697401578428,
		[],
		null
	]
,	[
		"t65",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/particles.png", 168, 3],
		null,
		[
		],
		false,
		false,
		8922032037262108,
		[],
		null
	]
,	[
		"t66",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5227903718873609,
			[
				["images/sprite5-sheet0.png", 1998, 1, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 38, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 75, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 1, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 38, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 75, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 1, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 38, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 75, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 1, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 38, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 75, 70, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 1, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 38, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet0.png", 1998, 75, 93, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 1, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 38, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 75, 1, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 1, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 38, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 75, 24, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 1, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 38, 47, 36, 22, 1, 0.5, 1,[],[],0],
				["images/sprite5-sheet1.png", 1536, 75, 47, 36, 22, 1, 0.5, 0.5,[],[],0],
				["images/sprite5-sheet1.png", 1536, 1, 70, 36, 22, 1, 0.5, 1,[],[],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			8881249812694596
		]
		],
		false,
		false,
		9432873862374488,
		[],
		null
	]
,	[
		"t67",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8633505965493505,
			[
				["images/sprite6-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		1116991228437199,
		[],
		null
	]
,	[
		"t68",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky6.png", 109, 1],
		null,
		[
		],
		false,
		false,
		4211094635851163,
		[],
		null
	]
,	[
		"t69",
		cr.plugins_.TiledBg,
		false,
		[],
		1,
		0,
		["images/tiledbackground4.png", 3338, 1],
		null,
		[
		[
			"Bullet",
			cr.behaviors.Bullet,
			6706862568324605
		]
		],
		false,
		false,
		256425090601132,
		[],
		null
	]
,	[
		"t70",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/sky7.png", 109, 1],
		null,
		[
		],
		false,
		false,
		9636822297230565,
		[],
		null
	]
,	[
		"t71",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			9,
			true,
			1,
			0,
			false,
			4689766056598839,
			[
				["images/lava-sheet0.png", 1224, 1, 1, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 17, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 33, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 49, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 65, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 81, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 97, 128, 15, 1, 0.5, 0,[],[],0],
				["images/lava-sheet0.png", 1224, 1, 113, 128, 15, 1, 0.5, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1503180201116885,
		[],
		null
	]
,	[
		"t72",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/tiledbackground5.png", 93, 1],
		null,
		[
		],
		false,
		false,
		7963236240821032,
		[],
		null
	]
,	[
		"t73",
		cr.plugins_.Sprite,
		false,
		[3787859100885652,752851261552116],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			558364806158186,
			[
				["images/llama-sheet0.png", 173, 0, 0, 13, 17, 1, 0.538462, 0.529412,[],[-0.384616,-0.411765,-0.0769236,-0.529412,0.307692,-0.411765,0.461538,-0.0588238,0.230769,0.294117,-0.0769236,0.470588,-0.307693,0.294117,-0.538462,-0.0588238],0]
			]
			]
		],
		[
		[
			"8Direction",
			cr.behaviors.EightDir,
			2322402987598554
		]
		],
		false,
		false,
		5809771207755568,
		[],
		null
	]
,	[
		"t74",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/tiledbackground7.png", 3345, 0],
		null,
		[
		],
		false,
		false,
		2572069872794364,
		[],
		null
	]
,	[
		"t75",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			9,
			true,
			1,
			0,
			false,
			6896057811188373,
			[
				["images/sprite7-sheet0.png", 13460, 1, 1, 256, 256, 1, 0.5, 0.5,[],[],0],
				["images/sprite7-sheet0.png", 13460, 258, 1, 256, 256, 1, 0.5, 0.5,[],[],0],
				["images/sprite7-sheet0.png", 13460, 515, 1, 256, 256, 1, 0.5, 0.5,[],[],0],
				["images/sprite7-sheet0.png", 13460, 1, 258, 256, 256, 1, 0.5, 0.5,[],[],0],
				["images/sprite7-sheet0.png", 13460, 258, 258, 256, 256, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1661909803637382,
		[],
		null
	]
,	[
		"t76",
		cr.plugins_.Sprite,
		false,
		[186096184542591,2606451312392577],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4437906151954734,
			[
				["images/movingland_volcano-sheet0.png", 374, 0, 0, 36, 22, 1, 0.5, 0,[],[-0.472222,0.0454545,0.472222,0.0454545,0.472222,0.5,0.361111,0.772727,0,1,-0.388889,0.818182,-0.472222,0.5],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			3156764740330198
		]
,		[
			"Platform",
			cr.behaviors.Platform,
			7770136142201849
		]
		],
		false,
		false,
		8326073469525249,
		[],
		null
	]
,	[
		"t77",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			12,
			true,
			1,
			0,
			false,
			5223509525861535,
			[
				["images/sprite8-sheet0.png", 484, 1, 1, 27, 112, 1, 0.518519, 0.5,[],[],0],
				["images/sprite8-sheet0.png", 484, 29, 1, 27, 112, 1, 0.518519, 0.5,[],[],0],
				["images/sprite8-sheet0.png", 484, 57, 1, 27, 112, 1, 0.518519, 0.5,[],[],0],
				["images/sprite8-sheet0.png", 484, 85, 1, 27, 112, 1, 0.518519, 0.5,[],[],0],
				["images/sprite8-sheet1.png", 311, 0, 0, 27, 112, 1, 0.518519, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5723956671289225,
		[],
		null
	]
,	[
		"t78",
		cr.plugins_.Sprite,
		false,
		[3388180302626049,741623508507828],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9154606631398019,
			[
				["images/ball_volcano-sheet0.png", 459, 0, 0, 32, 32, 1, 0.5, 0.5,[],[-0.34375,-0.34375,0,-0.5,0.34375,-0.34375,0.5,0,0.34375,0.34375,0,0.5,-0.34375,0.34375,-0.5,0],0]
			]
			]
		],
		[
		[
			"8Direction",
			cr.behaviors.EightDir,
			7585851839008881
		]
,		[
			"Rotate",
			cr.behaviors.Rotate,
			5998034093797374
		]
		],
		false,
		false,
		9961235569340248,
		[],
		null
	]
,	[
		"t79",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/destellos.png", 119, 0],
		null,
		[
		],
		false,
		false,
		4388841638695498,
		[],
		null
	]
,	[
		"t80",
		cr.plugins_.Sprite,
		false,
		[9836137274899065],
		3,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1109136343115132,
			[
				["images/moving_volcano-sheet0.png", 707, 0, 0, 72, 44, 1, 0.5, 0,[],[-0.458333,0.0681818,0,0,0.486111,0.0227273,0.472222,0.5,0.5,1,0,1,-0.458333,0.931818],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			9299255863654958
		]
,		[
			"Sine",
			cr.behaviors.Sin,
			6447110645887278
		]
,		[
			"8Direction",
			cr.behaviors.EightDir,
			2187630999651274
		]
		],
		false,
		false,
		8763566532509332,
		[],
		null
	]
,	[
		"t81",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			12,
			true,
			1,
			0,
			false,
			3023275806122974,
			[
				["images/chorro_lava-sheet0.png", 637, 1, 1, 33, 70, 1, 0.515152, 1,[],[],0],
				["images/chorro_lava-sheet0.png", 637, 35, 1, 33, 70, 1, 0.515152, 1,[],[],0],
				["images/chorro_lava-sheet0.png", 637, 69, 1, 33, 70, 1, 0.515152, 1,[],[],0],
				["images/chorro_lava-sheet1.png", 305, 0, 0, 33, 70, 1, 0.515152, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5005459210665609,
		[],
		null
	]
,	[
		"t82",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			true,
			1,
			0,
			false,
			1990145905533144,
			[
				["images/life-sheet0.png", 162, 0, 0, 13, 12, 1, 0.538462, 0.5,[],[],0],
				["images/life-sheet1.png", 163, 0, 0, 13, 12, 1, 0.538462, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3240213177481935,
		[],
		null
	]
,	[
		"t83",
		cr.plugins_.Sprite,
		false,
		[9865427861881215],
		1,
		0,
		null,
		[
			[
			"Default",
			10,
			true,
			1,
			0,
			false,
			5622737432416683,
			[
				["images/fire2-sheet0.png", 164, 0, 0, 17, 13, 1, 0.529412, 0.538462,[],[-0.411765,0.307692,-0.529412,4.17233e-007,-0.411765,-0.384616,-0.0588238,-0.538462,0.294117,-0.307693,0.470588,4.17233e-007,0.294117,0.230769,-0.0588238,0.461538],0]
			]
			]
		],
		[
		[
			"8Direction",
			cr.behaviors.EightDir,
			7292680227840298
		]
		],
		false,
		false,
		1528038610699506,
		[],
		null
	]
,	[
		"t84",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5844085523406975,
			[
				["images/resplandor-sheet0.png", 610, 0, 0, 36, 60, 1, 0.5, 0.5,[],[-0.111111,-0.266667,0,-0.35,0.5,-0.5,0.5,0.5,-0.5,0.5,-0.305556,0],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			1530881085466154
		]
		],
		false,
		false,
		4233528955681671,
		[],
		null
	]
,	[
		"t85",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4750484560384398,
			[
				["images/sprite10-sheet0.png", 1040, 0, 0, 36, 141, 1, 0.5, 0.503546,[],[-0.277778,-0.446809,0,-0.503546,0.222222,-0.432624,0.5,0.496454,-0.5,0.496454],0]
			]
			]
		],
		[
		],
		false,
		false,
		426844779847569,
		[],
		null
	]
,	[
		"t86",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"intro",
			12,
			false,
			1,
			0,
			false,
			6531517479972553,
			[
				["images/in-sheet0.png", 4225, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/credits-sheet0.png", 52871, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"outro",
			12,
			false,
			1,
			0,
			false,
			9949975176538269,
			[
				["images/credits-sheet0.png", 52871, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 603, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 1, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 302, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet0.png", 52871, 603, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet1.png", 9194, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet1.png", 9194, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet1.png", 9194, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/credits-sheet1.png", 9194, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/in-sheet0.png", 4225, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		4702042053984499,
		[],
		null
	]
,	[
		"t87",
		cr.plugins_.Sprite,
		false,
		[6353786660145624],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			1114752046687965,
			[
				["images/credit_letters-sheet0.png", 1464, 0, 0, 175, 258, 1, 0.502857, 0.5,[],[-0.0685712,-0.205426,-0.00571415,-0.488372,0.0685719,-0.209302,0.394286,0.430233,-0.00571415,0.492248,-0.4,0.430233],0]
			]
			]
		],
		[
		[
			"8Direction",
			cr.behaviors.EightDir,
			2162077024387517
		]
		],
		false,
		false,
		4712071820906285,
		[],
		null
	]
,	[
		"t88",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5526898169079779,
			[
				["images/oncredits-sheet0.png", 3035, 0, 0, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6151056187127825,
		[],
		null
	]
,	[
		"t89",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			1688475220021716,
			[
				["images/boss_bg-sheet0.png", 20203, 0, 0, 299, 200, 1, 0.501672, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		1164577806232829,
		[],
		null
	]
,	[
		"t90",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			14,
			false,
			1,
			0,
			false,
			5539070360798302,
			[
				["images/boss-sheet0.png", 5264, 1, 129, 38, 38, 1, 0.5, 1,[],[],0],
				["images/boss-sheet0.png", 5264, 158, 169, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 40, 87, 38, 40, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 87, 44, 38, 41, 1, 0.5, 1,[["center", 0.5, 0.512195]],[],0],
				["images/boss-sheet0.png", 5264, 197, 169, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 40, 1, 38, 37, 1, 0.5, 1,[["center", 0.5, 0.513514]],[],0],
				["images/boss-sheet1.png", 2803, 1, 40, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 41, 77, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 79, 1, 38, 37, 1, 0.5, 1,[["center", 0.5, 0.513514]],[],0],
				["images/boss-sheet0.png", 5264, 81, 207, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 126, 127, 38, 40, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 126, 85, 38, 41, 1, 0.5, 1,[["center", 0.5, 0.512195]],[],0],
				["images/boss-sheet0.png", 5264, 1, 208, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 118, 1, 38, 37, 1, 0.5, 1,[["center", 0.5, 0.513514]],[],0],
				["images/boss-sheet1.png", 2803, 80, 77, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 119, 77, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 157, 1, 38, 37, 1, 0.5, 1,[["center", 0.5, 0.513514]],[],0],
				["images/boss-sheet0.png", 5264, 40, 208, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 40, 128, 38, 40, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 87, 86, 38, 41, 1, 0.5, 1,[["center", 0.5, 0.512195]],[],0],
				["images/boss-sheet0.png", 5264, 120, 208, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 196, 1, 38, 37, 1, 0.5, 1,[["center", 0.5, 0.513514]],[],0],
				["images/boss-sheet1.png", 2803, 41, 112, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 80, 112, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0]
			]
			]
,			[
			"transform",
			12,
			false,
			1,
			0,
			false,
			2156625201209157,
			[
				["images/boss-sheet1.png", 2803, 40, 39, 38, 37, 1, 0.5, 0.513514,[],[],0],
				["images/boss-sheet1.png", 2803, 196, 39, 39, 36, 1, 0.512821, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 1, 1, 45, 42, 1, 0.511111, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 139, 1, 45, 41, 1, 0.511111, 0.512195,[],[],0],
				["images/boss-sheet0.png", 5264, 185, 43, 42, 42, 1, 0.5, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 118, 168, 39, 38, 1, 0.512821, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 81, 169, 34, 34, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"notransform",
			12,
			false,
			1,
			0,
			false,
			7234743135934145,
			[
				["images/boss-sheet1.png", 2803, 158, 77, 34, 34, 1, 0.5, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 1, 169, 39, 38, 1, 0.512821, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 1, 44, 42, 42, 1, 0.5, 0.5,[],[],0],
				["images/boss-sheet0.png", 5264, 185, 1, 45, 41, 1, 0.511111, 0.512195,[],[],0],
				["images/boss-sheet0.png", 5264, 47, 1, 45, 42, 1, 0.511111, 0.5,[],[],0],
				["images/boss-sheet1.png", 2803, 196, 76, 39, 36, 1, 0.512821, 0.5,[],[],0],
				["images/boss-sheet1.png", 2803, 79, 39, 38, 37, 1, 0.5, 0.513514,[],[],0]
			]
			]
,			[
			"fin",
			12,
			false,
			1,
			0,
			false,
			3400893246855928,
			[
				["images/boss-sheet1.png", 2803, 118, 39, 38, 37, 1, 0.5, 1,[],[],0],
				["images/boss-sheet1.png", 2803, 1, 77, 39, 36, 1, 0.512821, 1,[],[],0],
				["images/boss-sheet0.png", 5264, 93, 1, 45, 42, 1, 0.511111, 1,[],[],0],
				["images/boss-sheet0.png", 5264, 139, 43, 45, 41, 1, 0.511111, 1,[],[],0],
				["images/boss-sheet0.png", 5264, 44, 44, 42, 42, 1, 0.5, 1,[],[],0],
				["images/boss-sheet0.png", 5264, 41, 169, 39, 38, 1, 0.512821, 1,[],[],0],
				["images/boss-sheet1.png", 2803, 197, 113, 34, 34, 1, 0.5, 1,[],[],0]
			]
			]
,			[
			"temblor",
			14,
			false,
			1,
			0,
			false,
			215232939175162,
			[
				["images/boss-sheet0.png", 5264, 159, 208, 38, 38, 1, 0.5, 1,[],[],0],
				["images/boss-sheet0.png", 5264, 198, 208, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 79, 128, 38, 40, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 165, 86, 38, 41, 1, 0.5, 1,[["center", 0.5, 0.512195]],[],0],
				["images/boss-sheet0.png", 5264, 165, 128, 38, 40, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 204, 86, 38, 41, 1, 0.5, 1,[["center", 0.5, 0.512195]],[],0],
				["images/boss-sheet0.png", 5264, 204, 128, 38, 40, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet0.png", 5264, 1, 87, 38, 41, 1, 0.5, 1,[["center", 0.5, 0.512195]],[],0],
				["images/boss-sheet1.png", 2803, 1, 1, 38, 38, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 157, 39, 38, 37, 1, 0.5, 1,[["center", 0.5, 0.513514]],[],0],
				["images/boss-sheet1.png", 2803, 119, 112, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0],
				["images/boss-sheet1.png", 2803, 158, 113, 38, 34, 1, 0.5, 1,[["center", 0.5, 0.5]],[],0]
			]
			]
		],
		[
		[
			"Rotate",
			cr.behaviors.Rotate,
			3723525460337324
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			3161177483100316
		]
		],
		false,
		false,
		98366183455863,
		[],
		null
	]
,	[
		"t91",
		cr.plugins_.Sprite,
		false,
		[8389311488031957,6189784728967478,5074469955706784,1845868129398879,4347420295065122,7303531978688984,7677512713450061,924207958246925,461446068719783],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7103745650792658,
			[
				["images/boss_box-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
,			[
			"middle",
			5,
			false,
			1,
			0,
			false,
			7760592471415367,
			[
				["images/boss_box-sheet1.png", 155, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			1987311382287962
		]
		],
		false,
		false,
		7858071092529358,
		[],
		null
	]
,	[
		"t92",
		cr.plugins_.Sprite,
		false,
		[4731498322616623],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			7081279275456751,
			[
				["images/platformal-sheet0.png", 373, 0, 0, 36, 28, 1, 0.5, 0.5,[],[-0.475694,-0.5,0,-0.5,0.472222,-0.5,0.444444,0,0.25,0.178571,0,0.464286,-0.25,0.178571,-0.361111,0],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			2676114019234782
		]
,		[
			"8Direction",
			cr.behaviors.EightDir,
			7027632721006285
		]
		],
		false,
		false,
		7468885687251801,
		[],
		null
	]
,	[
		"t93",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4846529738536937,
			[
				["images/shake-sheet0.png", 493, 0, 0, 395, 271, 1, 0.501266, 0.501845,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		9441767180797763,
		[],
		null
	]
,	[
		"t94",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5260994674370334,
			[
				["images/boss_lifes-sheet0.png", 228, 1, 1, 38, 6, 1, 0.5, 0.5,[],[],0],
				["images/boss_lifes-sheet0.png", 228, 1, 8, 38, 6, 1, 0.5, 0.5,[],[],0],
				["images/boss_lifes-sheet0.png", 228, 1, 15, 38, 6, 1, 0.5, 0.5,[],[],0],
				["images/boss_lifes-sheet0.png", 228, 1, 22, 38, 6, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4576209711597361,
		[],
		null
	]
,	[
		"t95",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			20,
			true,
			1,
			17,
			false,
			4492367809561553,
			[
				["images/tutorial-sheet0.png", 7134, 1, 1, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 1, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 1, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 610, 1, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 813, 1, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 1, 130, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 130, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 130, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 610, 130, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 813, 130, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 1, 259, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 259, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 259, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 610, 259, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 813, 259, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 1, 388, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 388, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 388, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 610, 388, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 813, 388, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 1, 517, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 517, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 517, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 610, 517, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 813, 517, 202, 128, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"close",
			20,
			false,
			1,
			0,
			false,
			7792684597157183,
			[
				["images/tutorial-sheet0.png", 7134, 1, 646, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 646, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 646, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 610, 646, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 813, 646, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 1, 775, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 204, 775, 202, 128, 1, 0.5, 0.5,[],[],0],
				["images/tutorial-sheet0.png", 7134, 407, 775, 202, 128, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9731226937943622,
		[],
		null
	]
,	[
		"t96",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			12,
			true,
			1,
			27,
			false,
			3387737257881407,
			[
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/ending-sheet0.png", 47802, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 603, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 1, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 302, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet0.png", 47802, 603, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 603, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 1, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 302, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet1.png", 49252, 603, 805, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 1, 604, 300, 200, 1, 0.5, 0.5,[],[],0],
				["images/ending-sheet2.png", 38333, 302, 604, 300, 200, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5948049954727155,
		[],
		null
	]
,	[
		"t97",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			20,
			false,
			1,
			0,
			false,
			8954252678885597,
			[
				["images/in-sheet0.png", 4225, 603, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 403, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 202, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 603, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 302, 1, 300, 200, 1, 0.5, 0.5,[],[],3],
				["images/in-sheet0.png", 4225, 1, 1, 300, 200, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		4981408260967498,
		[],
		null
	]
,	[
		"t98",
		cr.plugins_.Text,
		false,
		[],
		1,
		0,
		null,
		null,
		[
		[
			"Fade",
			cr.behaviors.Fade,
			8743368466186726
		]
		],
		false,
		false,
		1194680888090402,
		[],
		null
	]
,	[
		"t99",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			12,
			false,
			1,
			0,
			false,
			759316479570251,
			[
				["images/explosion-sheet0.png", 664, 1, 1, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet0.png", 664, 59, 1, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet0.png", 664, 1, 59, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet0.png", 664, 59, 59, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet1.png", 1273, 1, 1, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet1.png", 1273, 59, 1, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet1.png", 1273, 1, 59, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet1.png", 1273, 59, 59, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet2.png", 420, 1, 1, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet2.png", 420, 59, 1, 57, 57, 1, 0.508772, 1,[],[],0],
				["images/explosion-sheet2.png", 420, 1, 59, 57, 57, 1, 0.508772, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2396979654513596,
		[],
		null
	]
,	[
		"t100",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6658847867850129,
			[
				["images/solido-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[],[],1]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			6811436166597493
		]
		],
		false,
		false,
		8583004930611211,
		[],
		null
	]
,	[
		"t101",
		cr.plugins_.Sprite,
		false,
		[4433080114881729],
		2,
		0,
		null,
		[
			[
			"Default",
			8,
			true,
			1,
			0,
			false,
			4728095773792459,
			[
				["images/life-sheet0.png", 162, 0, 0, 13, 12, 1, 0.538462, 0.5,[],[],0],
				["images/life-sheet1.png", 163, 0, 0, 13, 12, 1, 0.538462, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Jumpthru",
			cr.behaviors.jumpthru,
			5622702431935966
		]
,		[
			"8Direction",
			cr.behaviors.EightDir,
			3794127701912415
		]
		],
		false,
		false,
		1764588467180818,
		[],
		null
	]
,	[
		"t102",
		cr.plugins_.NodeWebkit,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2251113630664438,
		[],
		null
		,[]
	]
	],
	[
	],
	[
	[
		"0main-screen",
		1280,
		1024,
		false,
		"Event sheet 2",
		4582879897407728,
		[
		[
			"Layer 0",
			0,
			8100441990183424,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				53,
				1977,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				18,
				1978,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[32, 220, 0, 116, 12, 0, 0, 1, 0, 0, 0, 0, []],
				36,
				1980,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"credits",
			1,
			4802683054031673,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				86,
				3066,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[148, 300, 0, 175, 258, 0, 0, 1, 0.502857, 0.5, 0, 0, []],
				87,
				3067,
				[
					["stop"]
				],
				[
				[
					20,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				88,
				3073,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"1level-grass",
		2250,
		800,
		false,
		"Event sheet 1",
		4650502934421703,
		[
		[
			"background",
			0,
			6199299691916345,
			true,
			[255, 255, 255],
			false,
			0.2,
			0.2,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-32, 177, 0, 2336, 638, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				26,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-24, 189, 0, 2332, -242, 0, 0, 1, 0, 0, 0, 0, []],
				8,
				8,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-20, 5.5, 0, 2328, 253, 0, 0, 1, 0, 0, 0, 0, []],
				7,
				0,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"background2",
			1,
			7384920768410494,
			true,
			[255, 255, 255],
			true,
			0.5,
			0.5,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-5, 264, 0, 2420, 242, 0, 0, 1, 0, 0, 0, 0, []],
				51,
				1973,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"platforms",
			2,
			3901779066280849,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[32, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1974,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[2232, 134, 0, 39, 63, 0, 0, 1, 0.512821, 0.507937, 0, 0, []],
				48,
				1962,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1650, 432, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1961,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2136, 165, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				98,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2120, 165, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				99,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2164, 165, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				100,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1932, 374, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				93,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1932, 352, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				94,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1932, 330, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				95,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1098, 664, 0, 2472, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				12,
				24,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1836, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1376,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[140, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				12,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[68, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1000,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[104, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1003,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[176, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1472,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1528, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1454,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[668, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1462,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[668, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1463,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[668, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1464,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[668, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1465,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1216, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1206,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1216, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1205,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1216, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1207,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1216, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1208,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1209,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1210,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1211,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1236, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1204,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1024, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1202,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[820, 583, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				46,
				32,
				[
					[0],
					["up"]
				],
				[
				[
					300,
					5000,
					500,
					0,
					0,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[556, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1085,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[548, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1047,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[556, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1086,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[556, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1084,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[368, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1048,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[512, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1045,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[408, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1044,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[404, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1040,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[368, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1024,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[368, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1026,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[368, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				14,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[368, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1025,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[336, 489, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1031,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[356, 489, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1033,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[356, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1034,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[404, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1037,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[404, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1038,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[404, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1039,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[336, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1032,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[440, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1030,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[476, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1042,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[548, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1043,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[548, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				22,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[548, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1046,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[820, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				90,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[820, 341, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				92,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 517, 0, 8, 24, 0, 0, 1, 0.588, 1.008, 0, 0, []],
				10,
				13,
				[
				],
				[
				[
					120,
					1000,
					1000,
					300,
					900,
					1000,
					1,
					1
				],
				[
					1
				],
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1932, 319, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				40,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1932, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				13,
				41,
				[
					["up"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1932, 440, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				42,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2156, 176, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				81,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2120, 176, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				82,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2198, 166, 0, 20, 55, 0, 0, 0.35, 0.5, 1, 0, 0, []],
				16,
				83,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[340, 466, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				88,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[240, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				10,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[276, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				11,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[240, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				27,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[276, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				999,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[240, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1001,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1002,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[240, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1004,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1005,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1006,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[240, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1008,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[240, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1010,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1011,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1012,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[348, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1013,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[312, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1014,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1015,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[348, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1016,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1017,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1018,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1019,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[312, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1020,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1021,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[312, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1022,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1023,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1035,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[672, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				18,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[528, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				21,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[372, 429, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1049,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[384, 429, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1050,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[396, 429, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1051,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 396, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				1053,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[420, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				17,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[496, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				20,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[420, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1036,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[420, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1054,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[420, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1055,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[420, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1056,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[420, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1057,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[384, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1058,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1059,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[384, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1060,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1061,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1062,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[496, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1063,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[496, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1064,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[496, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1065,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[496, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1066,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[496, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1067,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[672, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1068,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[528, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1069,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[672, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1070,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[528, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1071,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[528, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1072,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[672, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1073,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[780, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1074,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1075,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1076,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[672, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1077,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[528, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1078,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[532, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1079,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1080,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1081,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[672, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1082,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[10, 517, 0, 20, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				32,
				1083,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[556, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				15,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[816, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1087,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[852, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1088,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[384, 363, 0, 128, 128, 0, -1.5708, 1, 0, 0.5, 0, 0, []],
				44,
				1089,
				[
				],
				[
				],
				[
					25,
					180,
					0,
					55,
					4,
					100,
					-10,
					0,
					0,
					0,
					0,
					0,
					-50,
					0,
					0,
					800,
					0,
					1,
					0.3
				]
			]
,			[
				[888, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1090,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[852, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1091,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1092,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[816, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1093,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1094,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[888, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1095,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1096,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1097,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1098,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1099,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1100,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[816, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1101,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[888, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1102,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1103,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1104,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1105,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 451, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				1107,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[816, 605, 0, 20, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				1108,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[820, 319, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				1109,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[708, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				31,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					34,
					1
				]
			]
,			[
				[820, 517, 0, 11, 6, 0, 0, 1, 0.545455, 1, 0, 0, []],
				45,
				91,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[780, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				19,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[744, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				30,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[820, 385, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				33,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[820, 407, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				97,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[820, 429, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1106,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[708, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1115,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1116,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1117,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[708, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1118,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1119,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[744, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1120,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1121,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1122,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1123,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1124,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1360, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1125,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[924, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1126,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1360, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1127,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1128,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1360, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1131,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[996, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1132,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[924, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1138,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[960, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1139,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[888, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1129,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[888, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1133,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[888, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1134,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[888, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1141,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[888, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1142,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[888, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1143,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[924, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1144,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[960, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1145,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1146,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[924, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1147,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1148,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[960, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1149,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1151,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1152,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1153,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1154,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[924, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1155,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[960, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1156,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1158,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1159,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1160,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1161,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1048, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1136,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[960, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1162,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1163,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[960, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1130,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[996, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1135,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[924, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1164,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[924, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1167,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[924, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1168,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[924, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1169,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[924, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1170,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[924, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1171,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1032, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1172,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[996, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1140,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[996, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1173,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[996, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1174,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[996, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1175,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[996, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1176,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[996, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1177,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1008, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1137,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1032, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1178,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[996, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1179,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[996, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1180,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1181,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1182,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1183,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1068, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1184,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1068, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1185,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1068, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1186,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1068, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1187,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1068, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1188,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1068, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1189,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1032, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1190,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1032, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1191,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1032, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1192,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1193,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1194,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1032, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1195,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1164, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1150,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1044, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1157,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1080, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1196,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1236, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1203,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[960, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1212,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					34,
					1
				]
			]
,			[
				[996, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1165,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1216, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1213,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1214,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1216, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1215,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[-8, 550, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				1219,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1360, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1226,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1360, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1227,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1360, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				16,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1112,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1252, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1228,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1252, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1229,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1230,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1231,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1252, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1232,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1233,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1234,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1235,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1252, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1236,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1360, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1237,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1238,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1396, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1239,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1396, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1240,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1242,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1540, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1243,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1244,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1396, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1245,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1540, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1246,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1247,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1396, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1248,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1249,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1250,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1251,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1396, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1252,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1540, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1253,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1254,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1255,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1256,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1264,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1504, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1265,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1267,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1269,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1271,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1432, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1272,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1396, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1273,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1276,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1277,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1272, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1279,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					34,
					1
				]
			]
,			[
				[1288, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1280,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1288, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1111,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[936, 341, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1281,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[920, 341, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1282,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[972, 341, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1283,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[612, 473, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1284,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[500, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1285,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[516, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1286,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[488, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1287,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[256, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1288,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[272, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1289,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[304, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1290,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1236, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1291,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1288, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1292,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1288, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1293,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1294,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1295,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1288, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1296,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1297,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1298,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1299,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1300,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1324, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1301,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1302,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1324, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1303,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1304,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1305,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1306,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1307,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1324, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1308,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1309,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1448, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1310,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1448, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1311,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1448, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1312,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1504, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1313,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1504, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1314,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1504, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1315,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1320, 429, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1316,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1336, 429, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1317,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1352, 429, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1318,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[896, 385, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1319,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1060, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1320,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1076, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1321,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[552, 429, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1322,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[564, 429, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1323,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1052, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1324,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1076, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1325,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1172, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1327,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1196, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1328,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1064, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1329,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 363, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1330,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1936, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1333,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1936, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1334,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1936, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1335,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1336,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[920, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1337,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[904, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1338,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[956, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1339,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1128, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1221,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[1116, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1222,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[1200, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1224,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1587, 517, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				46,
				1340,
				[
					[0],
					[""]
				],
				[
				[
					300,
					5000,
					500,
					0,
					0,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1684, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1341,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1342,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1343,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1344,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1345,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1720, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1346,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[1792, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1347,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1792, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1348,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1349,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1720, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1350,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1351,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1352,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1353,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1354,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1720, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1355,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1356,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1357,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1360,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					34,
					1
				]
			]
,			[
				[1587, 517, 0, 11, 6, 0, 0, 1, 0.545455, 1, 0, 0, []],
				45,
				1361,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1684, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1362,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[1612, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1363,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[1576, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1364,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1365,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1366,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1576, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1367,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1368,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1612, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1369,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1370,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1371,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1372,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1373,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1480, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1375,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1480, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1377,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1476, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1378,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1381,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1468, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1262,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1382,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1468, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1383,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1468, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1384,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1385,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1386,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1651, 517, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				46,
				1358,
				[
					[0],
					[""]
				],
				[
				[
					300,
					5000,
					500,
					0,
					0,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1651, 517, 0, 11, 6, 0, 0, 1, 0.545455, 1, 0, 0, []],
				45,
				1359,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1780, 517, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				46,
				1374,
				[
					[0],
					[""]
				],
				[
				[
					300,
					5000,
					500,
					0,
					0,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1780, 517, 0, 11, 6, 0, 0, 1, 0.545455, 1, 0, 0, []],
				45,
				1387,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1648, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1388,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[1648, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1389,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1390,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1391,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1648, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1392,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1393,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1394,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					35,
					1
				]
			]
,			[
				[1756, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1395,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1396,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1397,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1756, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1398,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1399,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1400,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1504, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1401,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1468, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1331,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1468, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1332,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1540, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1402,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1852, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1405,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1852, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1406,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1936, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1407,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1936, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1408,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1884, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1409,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1912, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1410,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1880, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1411,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1908, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1412,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1852, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1413,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1852, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1414,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1828, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1417,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1599, 432, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1415,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1792, 432, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1418,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1685, 405, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				1419,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1422,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[564, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1427,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[600, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1428,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[636, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1429,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[608, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1426,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[608, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1430,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[564, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1433,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[564, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1434,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1435,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[600, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1436,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1437,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1438,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1439,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[564, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1440,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1441,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1442,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1443,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[636, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1444,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1445,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1446,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1447,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[644, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1448,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[644, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1449,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[644, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1450,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[644, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1451,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[668, 392, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1469,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[668, 365, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1431,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[668, 344, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1432,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[668, 323, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1452,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[600, 473, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1453,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1564, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1456,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[4, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1416,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[4, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1420,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[4, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1423,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[4, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1424,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[4, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1425,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[4, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1458,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[204, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				9,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[204, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1459,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[204, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1460,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[204, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1461,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[204, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1466,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[204, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1467,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[-32, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1473,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[-32, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1474,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[-32, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1475,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1476,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1477,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1478,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1405, 413, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1241,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1405, 435, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1257,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1405, 457, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1259,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1444, 407, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1270,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1456, 407, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1404,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1476, 407, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1479,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1548, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1480,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1536, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1481,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1820, 517, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1482,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1876, 429, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1483,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1860, 429, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1484,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1904, 429, 0, 13, 37, 0, 0, 1, 0.538462, 1, 0, 0, []],
				47,
				1485,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1994, 235, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				25,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1994, 256, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				13,
				28,
				[
					["down"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1994, 356, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				29,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2056, 154, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				34,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2056, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				13,
				35,
				[
					["up"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2056, 275, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				36,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1936, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				37,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				38,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1936, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				39,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				96,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1828, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1110,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1828, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1113,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1114,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[1828, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1166,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1216,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1864, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1217,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1218,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1864, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1258,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1260,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1900, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1261,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1263,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1266,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1268,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1274,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1275,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1278,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1486,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1880, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1487,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1912, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1488,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1884, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1489,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1904, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1490,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 176, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				79,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2228, 176, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				44,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2264, 176, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				80,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2120, 198, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1491,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 220, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1492,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2120, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1493,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1494,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1495,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1496,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1497,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1498,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1499,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1500,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1501,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2120, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1502,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1503,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1504,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1505,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1506,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1507,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1508,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1509,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1510,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1511,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2228, 198, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1512,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2228, 220, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1513,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1514,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1515,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2228, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1516,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1517,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2228, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1518,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2228, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1519,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1520,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2264, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1521,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1522,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 220, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1523,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2264, 198, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1524,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1525,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1526,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1527,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1528,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2228, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1529,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1530,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1531,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2228, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1532,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1533,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2228, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1534,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2228, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1535,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1536,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2264, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1537,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1538,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 198, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1539,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2264, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1540,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1541,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1542,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1543,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1544,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1545,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2192, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1546,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1547,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 220, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1548,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1549,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1550,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1551,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2192, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1552,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1553,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1554,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1555,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1556,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1557,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 198, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1558,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1559,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1560,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1561,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1562,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2156, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1563,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1564,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1565,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1566,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1567,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1568,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1569,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1570,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1571,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 220, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1572,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1573,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1574,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1575,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1576,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1577,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2192, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1578,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1579,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1580,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1581,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1582,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1583,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1584,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1585,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1586,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1587,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1588,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1589,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1590,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1591,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1592,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1593,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1594,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1595,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[4, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1596,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[4, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1597,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[4, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1598,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[4, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1599,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[4, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1600,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[-32, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1601,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[-32, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1602,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1603,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1604,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1605,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[4, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1606,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[4, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1607,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[-32, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1608,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[-32, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1609,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[240, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1610,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[276, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1611,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[240, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1612,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1613,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[240, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1614,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1615,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1616,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[240, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1617,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[240, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1618,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1619,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1620,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1621,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[348, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1622,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1623,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1624,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1625,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[312, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1626,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1627,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[312, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1628,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1629,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[420, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1630,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[420, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1631,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[420, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1632,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[420, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1633,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[420, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1634,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[384, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1635,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1636,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[384, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1637,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1638,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[384, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1639,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[204, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1640,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[204, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1641,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[204, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1642,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[204, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1643,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[204, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1644,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[276, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1645,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[240, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1646,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[240, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1647,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[276, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1648,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[312, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1649,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1650,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[312, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1651,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[348, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1652,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[420, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1653,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[420, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1654,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[384, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1655,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[384, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1656,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[204, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1657,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[204, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1658,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[496, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1659,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[496, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1660,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[496, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1661,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[496, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1662,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[672, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1663,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[528, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1664,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[528, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1665,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[672, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1666,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[672, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1667,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[528, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1668,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[532, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1669,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[672, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1670,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1671,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1672,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[708, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1673,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1674,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1675,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1676,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1677,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1678,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1679,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1680,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[600, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1681,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1682,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1683,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1684,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[564, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1685,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1686,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1687,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1688,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1689,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1690,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[496, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1691,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[496, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1692,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[672, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1693,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[528, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1694,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[532, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1695,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[672, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1696,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1697,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1698,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1699,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1700,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1701,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1702,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1703,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1704,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1705,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[636, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1706,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[496, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1707,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[672, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1708,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[528, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1709,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[708, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1710,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[744, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1711,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[600, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1712,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[564, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1713,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[636, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1714,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1715,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1716,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[816, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1717,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1718,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1719,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1720,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[780, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1721,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1722,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1723,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1724,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1725,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1726,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1727,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[888, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1728,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1729,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1730,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1731,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1732,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[960, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1733,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1734,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1735,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1736,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[924, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1737,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1738,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1739,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1740,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1741,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1742,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1743,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1032, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1744,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1745,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1746,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1747,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1748,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1749,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[888, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1750,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1751,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1752,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1753,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[888, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1754,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[852, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1756,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[888, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1755,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[816, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1757,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[780, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1758,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1068, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1759,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1068, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1760,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1068, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1761,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1068, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1762,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1068, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1763,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1068, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1764,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1068, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1765,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[960, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1766,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1767,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1768,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[924, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1769,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[960, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1770,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1771,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[996, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1772,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[924, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1773,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[960, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1774,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1775,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1776,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1032, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1777,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1216, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1778,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1216, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1779,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1780,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1781,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1216, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1782,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1783,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1216, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1784,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1360, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1785,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1786,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1360, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1787,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1360, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1788,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1789,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1790,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1360, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1791,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1252, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1792,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1793,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1794,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1795,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1796,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1797,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1252, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1798,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1799,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1800,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1801,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1802,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1803,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1804,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1805,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1806,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1252, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1807,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1288, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1808,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1809,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1324, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1810,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1252, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1811,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1288, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1812,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1813,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1814,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1540, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1815,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1816,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1817,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1818,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1504, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1819,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1820,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1821,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1822,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1823,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1824,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1825,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1826,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1827,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1504, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1828,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1540, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1829,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1830,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1576, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1831,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1504, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1832,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1540, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1833,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1834,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1835,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1836,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1837,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1838,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1839,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1396, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1840,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1468, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1841,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1842,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1468, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1843,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1844,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1845,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1468, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1846,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1468, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1847,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1432, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1848,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1849,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1850,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1851,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1852,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1853,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1432, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1854,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1828, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1855,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1856,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1857,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1828, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1858,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1859,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1860,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1828, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1861,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1936, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1862,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1936, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1863,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1864,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1865,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1866,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1936, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1867,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1936, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1868,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1612, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1869,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1870,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1871,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1872,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1873,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1874,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1612, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1875,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1876,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1877,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1648, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1878,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1879,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1880,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1881,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1882,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1883,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1884,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1684, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1885,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1886,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1887,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1888,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1889,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1890,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1891,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1892,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1893,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1894,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1756, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1895,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1896,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1897,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1792, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1898,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1899,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1648, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1900,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1792, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1901,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1792, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1902,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1648, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1903,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1720, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1904,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1905,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1612, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1906,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1684, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1907,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1720, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1908,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1909,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1756, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1910,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1911,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1912,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1913,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1914,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1915,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1916,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1917,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1864, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1918,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1919,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1920,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1864, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1921,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1922,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1864, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1923,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1900, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1924,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2120, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1925,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1926,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1927,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1928,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2120, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1929,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2120, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1930,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2192, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1931,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2228, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1932,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1933,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1934,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2156, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1935,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1936,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2192, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1937,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1938,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1939,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1940,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1941,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1942,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1943,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1944,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1945,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1946,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1947,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1948,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1949,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1950,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2192, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1951,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1952,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1953,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1954,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2120, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1955,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2192, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1956,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2156, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1957,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2228, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1958,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2264, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1959,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2256, 231, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				1960,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1575, 432, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1966,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1716, 432, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1967,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1768, 432, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1968,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1125, 332, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				122,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1995, 228, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				1326,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[16, 495, 0, 15, 26, 0, 0, 1, 0.533333, 1, 0, 0, []],
				11,
				23,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[32, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1007,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[68, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1009,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[104, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1421,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[212, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1468,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[140, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1470,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[176, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1471,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[404, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1027,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[440, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1028,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[476, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1029,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[548, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1041,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[512, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1052,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1008, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1197,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1044, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1198,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1080, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1199,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1236, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1200,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[1164, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1201,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1116, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1220,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					28,
					1
				]
			]
,			[
				[1128, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1223,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					29,
					1
				]
			]
,			[
				[1200, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1225,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1500, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1455,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1536, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1457,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[1820, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1379,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1856, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1380,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[1800, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1403,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[404, 407, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				55,
				1981,
				[
					[0]
				],
				[
				[
					70,
					500,
					500,
					0,
					900,
					1000,
					0,
					1
				],
				[
					-200,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[408, 407, 0, 8, 33, 0, 0, 1, 0.5, 0.58, 0, 0, []],
				42,
				1982,
				[
					[0]
				],
				[
				[
					70,
					500,
					500,
					650,
					900,
					300,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[160, 396, 0, 8, 253, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				1983,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[826, 341, 0, 72, 11, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				1984,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1404, 385, 0, 128, 11, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				1985,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[668, 302, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				2836,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 497, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				102,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1716, 517, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				46,
				3135,
				[
					[0],
					[""]
				],
				[
				[
					300,
					5000,
					500,
					0,
					0,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1716, 517, 0, 11, 6, 0, 0, 1, 0.545455, 1, 0, 0, []],
				45,
				3136,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"UX",
			3,
			3932319755097298,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[29, 15, 0, 20, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				41,
				89,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[217, 22, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				20,
				101,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[217, 14, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				21,
				1963,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[16, 22, 0, 116, 12, 0, 0, 1, 0, 0, 0, 0, []],
				36,
				1964,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[30, 16, 0, 31, 10, 0, 0, 1, 0.516129, 0.5, 0, 0, []],
				37,
				1965,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[152, 99, 0, 202, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				95,
				3109,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"transitions",
			4,
			5255388933751606,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				84,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				18,
				85,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[152, 99, 0, 397, 397, 0, 0, 0, 0.501259, 0.501259, 0, 0, []],
				50,
				1970,
				[
				],
				[
				[
					80,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				49,
				1969,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				54,
				1976,
				[
					[0]
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"2level-cave",
		2250,
		800,
		false,
		"Event sheet 1",
		6591085786640754,
		[
		[
			"background",
			0,
			9159678797607781,
			true,
			[255, 255, 255],
			false,
			0.51,
			0.51,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-32, 177, 0, 2336, 638, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				1986,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-27, -20, 0, 2318, 773, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				1988,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"background2",
			1,
			1681578908534363,
			true,
			[255, 255, 255],
			true,
			0.5,
			0.5,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"platforms",
			2,
			8827336928344699,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1162, 253, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				2611,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1564, 608, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2178,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1580, 608, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2597,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1596, 608, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2598,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 608, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2599,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1936, 608, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2600,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1952, 608, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2601,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[875, 287, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2177,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[767, 287, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2594,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[803, 287, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2595,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[839, 287, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2596,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[1759, 609, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2474,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1410, 600, 0, 12, 11, 0, 0, 1, 0.5, 0.545455, 0, 0, []],
				22,
				2590,
				[
					["right"],
					[0]
				],
				[
				[
					40,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2130, 623, 0, 12, 11, 0, 0, 1, 0.5, 0.545455, 0, 0, []],
				22,
				2591,
				[
					["left"],
					[0]
				],
				[
				[
					40,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1458, 501, 0, 12, 11, 0, 0, 1, 0.5, 0.545455, 0, 0, []],
				22,
				2582,
				[
					["left"],
					[0]
				],
				[
				[
					40,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1410, 557, 0, 12, 11, 0, 0, 1, 0.5, 0.545455, 0, 0, []],
				22,
				2585,
				[
					["right"],
					[0]
				],
				[
				[
					40,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1137, 413, 0, 12, 11, 0, 0, 1, 0.5, 0.545455, 0, 0, []],
				22,
				2054,
				[
					["left"],
					[0]
				],
				[
				[
					40,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[972, 440, 0, 12, 11, 0, 0, 1, 0.5, 0.545455, 0, 0, []],
				22,
				2579,
				[
					["right"],
					[0]
				],
				[
				[
					40,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 186, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				61,
				2194,
				[
				],
				[
				],
				[
					0,
					0,
					0,
					10,
					4.4,
					100,
					0,
					12,
					0,
					5,
					0,
					0,
					0,
					-14,
					100,
					0,
					0,
					1,
					4
				]
			]
,			[
				[1162, 212, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2565,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1162, 190, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2574,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1162, 168, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2575,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2027, 507, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2564,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2028, 243, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2563,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2160, 243, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2562,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1365, 451, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2561,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1264, 402, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				62,
				2558,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1296, 402, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				63,
				2559,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1388, 404, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				62,
				2560,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[776, 224, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				62,
				2557,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[956, 227, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				62,
				2553,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[988, 223, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				63,
				2554,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 213, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2552,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2020, 528, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2520,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2135, 484, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2521,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					48,
					1
				]
			]
,			[
				[2145, 440, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2522,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					48,
					1
				]
			]
,			[
				[2013, 393, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2523,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2149, 357, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2524,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					48,
					1
				]
			]
,			[
				[2012, 312, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2525,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2025, 264, 0, 72, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2526,
				[
				],
				[
				[
					1
				],
				[
					0
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[1868, -33, 0, 136, 572, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2555,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[2144, 275, 0, 112, 429, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2551,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[2234, 227, 0, -32, 55, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				64,
				2519,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 571, 0, 136, 21, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2503,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2093, 539, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2504,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2021, 539, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2505,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2057, 539, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2506,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2129, 539, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2507,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1772, 648, 0, 748, 77, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2397,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1468, 461, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2347,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1431, 571, 0, 80, 99, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2386,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1396, 461, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2390,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1432, 461, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2391,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1288, 604, 0, 100, 132, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2310,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1340, 473, 0, 56, 330, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2389,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1384, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1993,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1181, 373, 0, 56, 154, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2341,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1452, 351, 0, 60, 22, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2334,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1472, 483, 0, 32, 77, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2332,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1194, 571, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1992,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1210, 571, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1996,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1226, 571, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				1997,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1328, 461, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2311,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1256, 461, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2312,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1292, 461, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2313,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1208, 604, 0, 60, 66, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2265,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1160, 604, 0, 36, 132, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2304,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 241, 0, 276, 132, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2161,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[648, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2458,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[628, 82, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				63,
				2459,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[524, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2460,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[544, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2461,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2462,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1430, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2457,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1412, 82, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				63,
				2456,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1308, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2446,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1328, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2447,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1256, 99, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2455,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 131, 0, 272, 110, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2443,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1492, -12, 0, 304, 209, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2442,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[708, -12, 0, 304, 209, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2034,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1132, 87, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2205,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[11, 435, 0, 32, 55, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				64,
				2080,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[216, 186, 0, 240, 99, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2089,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[456, 153, 0, 72, 110, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2245,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[400, 131, 0, 272, 110, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2246,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[545, 270, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				62,
				2234,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[570, 271, 0, 24, 25, 0, 3.14159, 1, 0.5, 0.52, 0, 0, []],
				63,
				2233,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[884, 274, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2225,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[164, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2222,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[184, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2223,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[136, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2224,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[668, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2219,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[688, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2220,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2221,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[80, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2211,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[56, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2212,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[284, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2213,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[236, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2214,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[584, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2215,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[560, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2216,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[788, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2217,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[740, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2218,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1162, 338, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2208,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1162, 316, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2209,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1162, 294, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2210,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1164, 109, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2207,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1160, 384, 0, 36, 264, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2206,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1156, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2016,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1011, 285, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2193,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[939, 285, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2183,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[975, 285, 0, 36, 22, 0, 0, 0.3, 0.5, 0.5, 0, 0, []],
				59,
				2184,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[944, 472, 0, 36, 176, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2185,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[980, 472, 0, 36, 176, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2186,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1006, 472, 0, 16, 176, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2187,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1098, 472, 0, 168, 88, 0, 0, 0.3, 0.5, 1, 0, 0, []],
				60,
				2188,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[871, 309, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2176,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					40,
					1
				]
			]
,			[
				[867, 307, 0, 60, 198, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2174,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[880, 348, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2181,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[799, 309, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2005,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					40,
					1
				]
			]
,			[
				[835, 309, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2175,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					40,
					1
				]
			]
,			[
				[728, 307, 0, 52, 44, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2166,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[217, 242, 0, 53, 77, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2167,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[220, 307, 0, 52, 44, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2139,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[488, 380, 0, 36, 16, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1989,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 472, 0, 8, 99, 0, 0, 1, 0.5, 1, 0, 0, []],
				58,
				2136,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-2, 351, 0, 280, 22, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2061,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-2, 483, 0, 720, 319, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2060,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[508, 351, 0, 212, 22, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2043,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[364, 434, 0, 52, 55, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2040,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[0, 460, 0, 8, 24, 0, 0, 1, 0.588, 1.008, 0, 0, []],
				10,
				2046,
				[
				],
				[
				[
					120,
					1000,
					1000,
					300,
					900,
					1000,
					1,
					1
				],
				[
					1
				],
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2204, 254, 0, 20, 55, 0, 0, 0.35, 0.5, 1, 0, 0, []],
				16,
				2052,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1178, 424, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2055,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[930, 418, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2056,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[112, 428, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2084,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[124, 428, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2085,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[136, 428, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2086,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[396, 351, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2087,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[12, 461, 0, 24, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				32,
				2120,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-8, 494, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				2237,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[382, 396, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2323,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[395, 396, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2324,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2256, 260, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				2982,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[416, 395, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				55,
				3013,
				[
					[0]
				],
				[
				[
					70,
					500,
					500,
					0,
					900,
					1000,
					0,
					1
				],
				[
					-200,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[420, 395, 0, 8, 33, 0, 0, 1, 0.5, 0.58, 0, 0, []],
				42,
				3014,
				[
					[0]
				],
				[
				[
					70,
					500,
					500,
					650,
					900,
					300,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[160, 340, 0, 8, 253, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				3015,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[124, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2024,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[160, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2027,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[196, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2031,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[232, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2032,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[268, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2033,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 373, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2035,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[268, 351, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2036,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[268, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2037,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[376, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2038,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[200, 428, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2062,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[212, 428, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2063,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[224, 428, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2064,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[376, 472, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2053,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[376, 439, 0, 36, 24, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2067,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[376, 461, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2065,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[412, 472, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2066,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[412, 439, 0, 36, 24, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2068,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[412, 461, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2069,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[484, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2025,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[520, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2026,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[448, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2039,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[268, 296, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2070,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[340, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2074,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[376, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2076,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[304, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2077,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[412, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2078,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[588, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2079,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[408, 396, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2020,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[88, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2007,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[52, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2008,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[16, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2009,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[592, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2022,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[628, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2023,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[556, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2041,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[700, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2042,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[664, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2082,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[868, 439, 0, 52, 55, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2018,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[736, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2075,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[772, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2090,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[808, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2091,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[844, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2092,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880, 472, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2106,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[880, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2107,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[880, 461, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2108,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[916, 472, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2109,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[916, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2110,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[916, 461, 0, 34, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2111,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[988, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2112,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1024, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2113,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[952, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2114,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1096, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2131,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1060, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2133,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[504, 351, 0, 280, 22, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2124,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[504, 483, 0, 636, 319, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2137,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1012, 10, 0, 128, 363, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2138,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-20, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2140,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[16, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2141,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[-56, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2142,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[88, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2143,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[124, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2144,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[52, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2145,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[196, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2146,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[160, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2147,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[232, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2148,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[268, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2149,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[304, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2150,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[340, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2151,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[700, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2028,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[556, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2029,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[664, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2030,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[488, 395, 0, 36, 16, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2071,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[592, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2006,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[628, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2021,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1366, 428, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2019,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[811, 285, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2044,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[823, 285, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2045,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1060, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2094,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[736, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2096,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[772, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2097,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1024, 208, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2098,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[772, 373, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2099,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1024, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2116,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[844, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2117,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[880, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2118,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[808, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2119,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[916, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2121,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[952, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2122,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[988, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2123,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1026, 373, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2125,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1024, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2126,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1026, 351, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2127,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[835, 285, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2128,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1096, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2129,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[520, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1987,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[520, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1990,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[522, 370, 0, 36, 13, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2001,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[556, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2003,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[628, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2004,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[592, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2017,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[664, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2002,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[700, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2058,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[52, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2088,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[124, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2103,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[88, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2104,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[160, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2105,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[196, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2153,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[16, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2059,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[736, 353, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2081,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[232, 353, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2101,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[232, 342, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2154,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[736, 320, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2100,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[736, 342, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2155,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[772, 351, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2057,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[232, 320, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2156,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[233, 298, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2152,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 276, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2157,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[232, 254, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2158,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[771, 320, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2160,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[772, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2162,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[880, 362, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2072,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[880, 384, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2073,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[880, 406, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2102,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[880, 426, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2159,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[880, 439, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2168,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[916, 406, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2169,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[916, 384, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2171,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[916, 428, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2172,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[916, 362, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2170,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[916, 450, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2173,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[880, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2179,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[916, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2180,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[916, 343, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2182,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[16, 439, 0, 15, 26, 0, 0, 1, 0.533333, 1, 0, 0, []],
				11,
				2988,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1024, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2189,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1024, 285, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2190,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1024, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2191,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1024, 241, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2192,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1192, 373, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2011,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1192, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2012,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1192, 351, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2013,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1192, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2015,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1192, 285, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2195,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1192, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2196,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1192, 241, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2197,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1132, 392, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2130,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1132, 373, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2198,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1132, 351, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2199,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1132, 329, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2200,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1132, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2201,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1132, 285, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2202,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1132, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2203,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1132, 241, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2204,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1132, 65, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2014,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[444, 307, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2226,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[444, 274, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2227,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[480, 285, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2228,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[516, 285, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2229,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[516, 252, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2230,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[552, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2231,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[624, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2232,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[660, 263, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2235,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[736, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2242,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[772, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2243,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[660, 241, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2115,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1192, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2083,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1132, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2247,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1192, 197, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2248,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1132, 197, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2249,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1192, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2250,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1192, 153, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2279,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1132, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2280,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1132, 153, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2281,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1132, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2283,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1132, 109, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2285,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1192, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2286,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1192, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2287,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1228, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2288,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1264, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2289,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1228, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2282,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1300, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2284,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1264, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2290,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1300, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2291,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1336, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2292,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1372, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2293,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1336, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2294,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1408, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2295,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1372, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2296,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1408, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2297,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1504, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2335,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1504, 153, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2337,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1444, 153, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2339,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1444, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2418,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[720, 197, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2427,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[660, 197, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2428,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[720, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2429,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[660, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2430,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[660, 153, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2432,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[660, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2433,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[720, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2236,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[660, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2244,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1508, 131, 0, 104, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				58,
				2434,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 65, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2435,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[1432, 74, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2436,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1468, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2437,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1504, 120, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2438,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1504, 98, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2439,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1504, 142, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2440,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[444, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2338,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[480, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2340,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[444, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2419,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[516, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2420,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2421,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[516, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2422,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[552, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2423,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[588, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2424,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[552, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2425,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[624, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2426,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[588, 131, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2431,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[624, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2441,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[720, 153, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2444,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[720, 65, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2449,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[648, 74, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2450,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[684, 76, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2451,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[720, 120, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2452,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[720, 98, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2453,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[720, 142, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2454,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1504, 197, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2298,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1444, 197, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2299,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1504, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2300,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1444, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2320,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1504, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2321,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1444, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2322,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2325,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1664, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2326,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1592, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2327,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1520, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2328,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1556, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2329,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1504, 219, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2336,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[236, -12, 0, 472, 66, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2330,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1020, -12, 0, 472, 66, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2445,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[409, 110, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2463,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[408, 63, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2464,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[408, 119, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2465,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[411, 96, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2466,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1192, 527, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2241,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1192, 505, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2251,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1132, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2132,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1132, 549, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2135,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1132, 527, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2301,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1132, 505, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2302,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1132, 571, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2303,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1192, 461, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2010,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1192, 417, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2252,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1192, 439, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2305,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1192, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2306,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1192, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2307,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1192, 549, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2134,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1228, 549, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2239,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1228, 538, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2240,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1228, 516, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2308,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1228, 472, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2309,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1228, 435, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2253,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1228, 417, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2254,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1228, 384, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2255,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[1300, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2257,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1264, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2258,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1228, 494, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2093,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1228, 450, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2095,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1132, 604, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2260,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[1132, 593, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2261,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1204, 615, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2263,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1168, 615, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2264,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1276, 615, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2269,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1240, 615, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2270,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1312, 615, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2267,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1348, 604, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2271,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[1348, 593, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2272,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1348, 560, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2273,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1348, 571, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2274,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1348, 516, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2276,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1348, 538, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2277,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1348, 505, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2278,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1348, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2275,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1668, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2047,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1688, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2048,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1640, 331, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2049,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1584, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2256,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1560, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2259,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1740, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				62,
				2262,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1728, 309, 0, 52, 44, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2268,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1704, 472, 0, 8, 99, 0, 0, 1, 0.5, 1, 0, 0, []],
				58,
				2315,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1508, 351, 0, 212, 22, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2316,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1520, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2348,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1592, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2354,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1628, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2355,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1556, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2356,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1700, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2357,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1664, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2358,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1736, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2359,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1772, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2360,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1504, 351, 0, 280, 22, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2361,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1700, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2363,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1556, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2364,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1664, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2365,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1592, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2367,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1628, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2368,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1736, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2369,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1772, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2370,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1772, 373, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2371,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1520, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2372,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1556, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2375,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1628, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2376,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1592, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2377,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1664, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2378,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1700, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2379,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1736, 353, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2380,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[1736, 320, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2381,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1736, 342, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2382,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1772, 353, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2383,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1772, 320, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2384,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1772, 331, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2385,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1448, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2163,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1484, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2164,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1348, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2165,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1520, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2000,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1484, 364, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2238,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1448, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2266,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[1448, 342, 0, 34, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2314,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1447, 320, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2317,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1321, 393, 0, 32, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2318,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1788, 450, 0, 24, 25, 0, 0, 1, 0.5, 0.52, 0, 0, []],
				63,
				2319,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1808, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2342,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1844, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2343,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1880, 472, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2344,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[1880, 461, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2345,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1880, 384, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2353,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1880, 406, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2362,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1880, 417, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2366,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1880, 439, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2373,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1503, 483, 0, 504, 88, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2331,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1384, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1998,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1419, 395, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2333,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1651, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2346,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1507, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2350,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1615, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2351,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1543, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2352,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1579, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2374,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1484, 483, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1991,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1384, 505, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1994,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1384, 527, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				1995,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1384, 637, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2050,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1384, 615, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2051,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1384, 571, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2349,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1384, 593, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2387,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1384, 549, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2388,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1486, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2392,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1484, 549, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2393,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1484, 505, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2394,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1484, 527, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2395,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1484, 561, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2396,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1385, 648, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2398,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[1457, 659, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2399,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1421, 659, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2400,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1529, 659, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2401,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1493, 659, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2402,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1565, 659, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2403,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1637, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2404,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1601, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2405,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1673, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2406,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1745, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2407,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1709, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2408,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1759, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2409,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1723, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2410,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1687, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2411,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1867, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2412,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1831, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2413,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1795, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2414,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1781, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2415,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1853, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2416,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1817, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2417,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1889, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2448,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1961, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2467,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1925, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2468,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1975, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2469,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1939, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2470,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1903, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2471,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[824, 253, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2472,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2036, 140, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2473,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2156, 561, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2475,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2156, 517, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2476,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[2156, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2477,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2156, 495, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2478,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2156, 473, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2479,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2156, 451, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2480,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2156, 429, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2481,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1996, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2482,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1996, 561, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2483,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1996, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2484,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1996, 517, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2485,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1996, 495, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2486,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1996, 473, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2487,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1996, 451, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2488,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1996, 429, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2489,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2156, 407, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2490,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1996, 407, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2491,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2156, 385, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2492,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1996, 385, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2493,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2156, 363, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2494,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2156, 341, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2495,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1996, 363, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2496,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1996, 341, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2497,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2156, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2498,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1996, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2499,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[2068, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2500,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2032, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2501,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2091, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2502,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2120, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2508,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[2156, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2509,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[2156, 638, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2510,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2156, 616, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2511,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2156, 594, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2512,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2192, 275, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2513,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2264, 275, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2514,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[2228, 275, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2515,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2156, 275, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2516,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2156, 297, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2517,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2156, 319, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2518,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1996, 319, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2527,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1996, 297, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2528,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1996, 275, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2529,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1996, 253, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2530,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1996, 231, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2531,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1996, 209, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2532,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1996, 187, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2533,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1996, 165, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2535,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2020, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2536,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1996, 22, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2537,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2056, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2538,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[2092, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2539,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2128, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2540,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2164, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2541,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[2200, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2542,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2236, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2543,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2272, 33, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2544,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[1996, 143, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2534,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1996, 121, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2545,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1996, 99, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2546,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1996, 77, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2547,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1996, 55, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				57,
				2548,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1140, 615, 0, 200, 187, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2549,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1396, 659, 0, 896, 143, 0, 0, 1, 0, 0, 0, 0, []],
				56,
				2550,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[1880, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2556,
				[
				],
				[
				[
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[2076, 506, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2566,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 473, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2567,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2568,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 407, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2569,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 374, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2570,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 341, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2571,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 308, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2572,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2076, 275, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2573,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1357, 92, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2576,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1373, 92, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2577,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1389, 92, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2578,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1178, 451, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2580,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[930, 451, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2581,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, 512, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2583,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1397, 512, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2584,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, 568, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2586,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1397, 568, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2587,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1397, 609, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2588,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1397, 635, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2589,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2143, 610, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2592,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2143, 635, 0, 12, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2593,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 726, 0, 2472, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				12,
				1999,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1508, 429, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				2666,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"UX",
			3,
			1036567539516828,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[29, 15, 0, 20, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				41,
				3018,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[217, 22, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				20,
				3019,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[217, 14, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				21,
				3020,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[16, 22, 0, 116, 12, 0, 0, 1, 0, 0, 0, 0, []],
				36,
				3021,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[30, 16, 0, 31, 10, 0, 0, 1, 0.516129, 0.5, 0, 0, []],
				37,
				3022,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[940, 77, 0, 202, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				95,
				3116,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"transitions",
			4,
			966552680641646,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				3023,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				18,
				3024,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[152, 99, 0, 397, 397, 0, 0, 0, 0.501259, 0.501259, 0, 0, []],
				50,
				3025,
				[
				],
				[
				[
					80,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				49,
				3026,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				54,
				3027,
				[
					[0]
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"3level-snow",
		2180,
		800,
		false,
		"Event sheet 1",
		9505294506625716,
		[
		[
			"background",
			0,
			9106229044396381,
			true,
			[255, 255, 255],
			false,
			0.2,
			0.2,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-8, -31.5, 0, 2188, 253, 0, 0, 1, 0, 0, 0, 0, []],
				28,
				265,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-44, 110, 0, 2192, 660, 0, 0, 1, 0, 0, 0, 0, []],
				15,
				43,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-24, 22, 0, 2208, 253, 0, 0, 1, 0, 0, 0, 0, []],
				27,
				46,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"background2",
			1,
			4175422628432452,
			true,
			[255, 255, 255],
			true,
			0.5,
			0.5,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-32, 218, 0, 2200, 253, 0, 0, 1, 0, 0, 0, 0, []],
				52,
				1975,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"platforms",
			2,
			319921895639252,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1716, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				645,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1724, 242, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				650,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1724, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				651,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1716, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				646,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1724, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				744,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1716, 286, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				745,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1724, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				746,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1716, 308, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				747,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1724, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				801,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1716, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				802,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1744, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				803,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[540, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				59,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[540, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				105,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[576, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				332,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[576, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				333,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1061, 550, 0, 2272, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				12,
				61,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[804, 484, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				64,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[352, 374, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				78,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[120, 429, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				309,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[104, 429, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				308,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[176, 352, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				310,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[160, 352, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				311,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[200, 352, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				312,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[288, 352, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				313,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[552, 308, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				329,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[508, 352, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				330,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[536, 308, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				331,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[692, 396, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				417,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[680, 396, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				418,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[648, 352, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				419,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[622, 352, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				420,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[632, 352, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				416,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[956, 231, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				620,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[940, 231, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				621,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1056, 341, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				622,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1044, 341, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				623,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1004, 253, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				624,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1728, 220, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				647,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1683, 330, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				648,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1712, 220, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				649,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2052, 143, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				980,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2036, 143, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				981,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2076, 143, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				982,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2164, 143, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				983,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[392, 220, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				38,
				994,
				[
					[0]
				],
				[
				[
					70,
					500,
					500,
					0,
					900,
					1000,
					0,
					1
				],
				[
					-200,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[20, 407, 0, 39, 66, 0, 0, 1, 0.512821, 0.5, 0, 0, []],
				31,
				316,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[976, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				72,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[16, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				47,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[52, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				49,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[88, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				50,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[124, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				52,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[196, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				55,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[196, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				56,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				58,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				106,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[196, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				107,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[160, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				133,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				134,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[124, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				135,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				136,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[88, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				137,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				138,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[52, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				139,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				140,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				141,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				142,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				143,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				144,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[124, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				145,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[160, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				146,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[16, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				147,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[52, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				148,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[88, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				149,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				150,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[160, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				151,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				152,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				153,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[124, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				154,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				155,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				156,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				157,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				158,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				159,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				160,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[16, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				161,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				162,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				163,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				164,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[124, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				165,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[160, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				166,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[16, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				167,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[52, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				168,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[88, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				169,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				170,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[160, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				171,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				172,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				173,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[124, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				174,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				175,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				176,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				177,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				178,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				179,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				180,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[16, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				181,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				182,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				183,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				184,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[124, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				185,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[160, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				186,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[16, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				187,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[52, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				188,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[88, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				189,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				190,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[160, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				191,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				192,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				193,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[124, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				194,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				195,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				196,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				197,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				198,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				199,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				200,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[196, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				201,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				202,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				203,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[196, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				204,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				205,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[196, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				206,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				207,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				208,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				209,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				210,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[52, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				211,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[16, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				212,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				213,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				214,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[124, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				215,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[88, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				216,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[16, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				217,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[52, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				218,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[196, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				219,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[160, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				220,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[160, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				221,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[160, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				222,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[160, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				223,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[160, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				54,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[196, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				224,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[232, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				225,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[196, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				227,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[232, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				228,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[232, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				229,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[196, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				226,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[232, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				230,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[232, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				231,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[232, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				232,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				233,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				234,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				235,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				236,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				237,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[232, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				238,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				239,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[232, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				240,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				241,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				242,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				243,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[232, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				244,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[232, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				245,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[268, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				247,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[304, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				249,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				250,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				251,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[304, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				252,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				253,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[304, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				254,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[304, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				255,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				256,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				257,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				258,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				259,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[304, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				260,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				261,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[304, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				262,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				263,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				264,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[268, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				266,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[268, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				267,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[268, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				269,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[340, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				270,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[268, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				248,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				268,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				271,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[268, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				272,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				273,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				274,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[268, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				275,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[268, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				276,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[268, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				277,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				278,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				279,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				280,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[268, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				281,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[304, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				282,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[304, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				283,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[304, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				284,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[268, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				285,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[340, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				286,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[268, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				246,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[232, 396, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				287,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[248, 396, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				288,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[264, 396, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				289,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[340, 308, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				290,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[340, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				291,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				292,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[340, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				293,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				294,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[340, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				295,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				296,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				297,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				298,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[340, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				299,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[340, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				300,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				301,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[340, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				302,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				303,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				304,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				305,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[340, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				306,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[340, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				307,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[340, 330, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				314,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[-8, 451, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				315,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[5, 440, 0, 16, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				32,
				318,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 440, 0, 8, 24, 0, 0, 1, 0.588, 1.008, 0, 0, []],
				10,
				51,
				[
				],
				[
				[
					120,
					400,
					200,
					300,
					900,
					1000,
					1,
					1
				],
				[
					1
				],
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[376, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				53,
				[
					["left"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[492, 374, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				317,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[504, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				319,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[504, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				320,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[504, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				321,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[540, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				322,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[540, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				323,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[393, 260, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				325,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[340, 210, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				326,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[576, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				334,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[612, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				335,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[576, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				336,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				337,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[576, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				338,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[612, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				339,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[612, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				340,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[504, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				341,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				342,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				343,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[504, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				344,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[504, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				345,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				346,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				347,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[504, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				348,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				349,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[504, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				350,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				351,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				352,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				353,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[504, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				354,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[504, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				355,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[504, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				356,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[576, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				357,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[540, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				358,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				359,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[612, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				360,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[540, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				361,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[576, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				362,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				363,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				364,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[576, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				365,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				366,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				367,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				368,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				369,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				370,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				371,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				372,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				373,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				374,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				375,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[576, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				376,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				377,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				378,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				379,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				380,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[576, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				381,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[648, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				382,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				383,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				384,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[540, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				385,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				386,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				387,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[540, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				388,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[576, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				389,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				390,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[576, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				391,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[576, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				392,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				393,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				394,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				395,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				396,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				397,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				398,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[576, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				399,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				400,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				401,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				402,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[576, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				403,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[540, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				404,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[648, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				76,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[648, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				77,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[648, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				405,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[684, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				406,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[612, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				407,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[648, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				409,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[648, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				410,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[684, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				411,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[720, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				412,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[756, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				408,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[684, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				413,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[756, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				414,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				415,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[640, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				127,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[656, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				128,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[672, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				129,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[688, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				130,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[624, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				125,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[804, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				124,
				[
					["up"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[804, 313, 0, 12, 0, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				126,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				421,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[720, 440, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				422,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[720, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				423,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[684, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				424,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				425,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[612, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				426,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[612, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				427,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				428,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				429,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[612, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				430,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				431,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[612, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				432,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				433,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				434,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				435,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				436,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[612, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				437,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				438,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[612, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				439,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[684, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				440,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[684, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				441,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				442,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				443,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[684, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				444,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				445,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				446,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[684, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				447,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				448,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				449,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[684, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				450,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				451,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[720, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				454,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				455,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				457,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				459,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[684, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				462,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				463,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				465,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				467,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[720, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				470,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				472,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[720, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				452,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[684, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				453,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[756, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				456,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[756, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				458,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				460,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				461,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				464,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[756, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				466,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[756, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				468,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				469,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				471,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				473,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				474,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[756, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				475,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[804, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				476,
				[
					["down"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[804, 154, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				477,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[684, 143, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				67,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[700, 143, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				71,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[716, 143, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				478,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[732, 143, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				479,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[940, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				483,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[868, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				484,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				485,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				486,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[868, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				487,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[868, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				488,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				489,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				490,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[868, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				491,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				492,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[868, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				493,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				494,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				495,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				496,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[868, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				497,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[868, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				498,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				499,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[940, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				500,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				501,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				502,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[940, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				503,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				504,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				505,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				506,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				507,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				508,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[940, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				509,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				510,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				511,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[940, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				512,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				513,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				514,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				515,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[904, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				521,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[904, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				522,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				523,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				524,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				525,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[904, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				526,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				527,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				528,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				529,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				530,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[904, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				531,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				532,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				533,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				534,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				535,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				536,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				537,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[904, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				538,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[868, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				539,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				540,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				541,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				542,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[904, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				543,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				544,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[940, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				545,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				546,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				547,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				548,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[940, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				549,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[940, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				550,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[904, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				553,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[904, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				554,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[904, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				557,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[868, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				551,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				552,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				555,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1012, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				69,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1012, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				70,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1048, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				520,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1048, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				559,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				560,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1048, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				561,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1048, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				562,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				563,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				564,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				565,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				566,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1048, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				567,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1048, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				568,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1048, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				569,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				570,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				571,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				572,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1048, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				573,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				574,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				575,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1048, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				576,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[976, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				577,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				578,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				579,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[976, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				580,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				581,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				582,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				583,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				584,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				586,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[976, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				587,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				588,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				589,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				590,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				591,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				592,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[976, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				593,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				594,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				595,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				596,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[976, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				597,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				598,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[976, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				599,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1012, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				600,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1012, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				601,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1012, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				603,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				604,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				605,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1012, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				606,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				607,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				608,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				609,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				610,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				611,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1012, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				612,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1012, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				613,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1048, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				614,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1012, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				556,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				558,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				602,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				615,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1012, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				616,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1012, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				617,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				618,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1012, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				619,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1024, 275, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				119,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1048, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				120,
				[
					["left"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 275, 0, 4, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				628,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1320, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				585,
				[
					["right"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 275, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				626,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1372, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				118,
				[
					["up"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1372, 209, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				625,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1372, 352, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				627,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1464, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				629,
				[
					["down"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1464, 209, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				630,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1464, 462, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				631,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1552, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				632,
				[
					["up"],
					[0]
				],
				[
				[
					1
				],
				[
					60,
					5000,
					5000,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1552, 209, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				633,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1552, 352, 0, 12, 12, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				634,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1415, 439, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				635,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1004, 253, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				636,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[988, 253, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				637,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1020, 253, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				638,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1628, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				640,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1628, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				641,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1628, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				642,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1664, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				643,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1664, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				644,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[393, 282, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				45,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[340, 232, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				324,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[392, 181, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				327,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[664, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				62,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[736, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				63,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[700, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				65,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[868, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				74,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[868, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				75,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[868, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				480,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[940, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				481,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[904, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				482,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[976, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				516,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[904, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				73,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[904, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				517,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[944, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				518,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[960, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				519,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1012, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				68,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1700, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				652,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1736, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				653,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1700, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				654,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				655,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1700, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				656,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1736, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				657,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1628, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				659,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				660,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				661,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1628, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				662,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1628, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				663,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				664,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				665,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1628, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				666,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				667,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1628, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				668,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				669,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				670,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				671,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1628, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				672,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1628, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				673,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1628, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				674,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1700, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				675,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1664, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				676,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				677,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				679,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1700, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				680,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				681,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				682,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1700, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				683,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				684,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				685,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				686,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				687,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				688,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				689,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				690,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				691,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				692,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				693,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1700, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				694,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				695,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				696,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				697,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				698,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1700, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				699,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1772, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				700,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				701,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				702,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1664, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				703,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				704,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				705,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1664, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				706,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1700, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				707,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				708,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1700, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				709,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1700, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				710,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				711,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				712,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				713,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				714,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				715,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				716,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				717,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				718,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				719,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				720,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1700, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				721,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				722,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 352, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				724,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1772, 374, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				725,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1736, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				727,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1772, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				729,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1808, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				730,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1844, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				731,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1880, 396, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				732,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1880, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				734,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				735,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1816, 374, 0, 13, 37, 0, 0, 1, 0.461538, 0.702703, 0, 0, []],
				29,
				741,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1804, 374, 0, 13, 37, 0, 0, 1, 0.538462, 0.702703, 0, 0, []],
				29,
				742,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1844, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				748,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1808, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				749,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				750,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1736, 440, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				751,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1736, 418, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				752,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				753,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				754,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1736, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				755,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				756,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1736, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				757,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				758,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				759,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				760,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				761,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1736, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				762,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				763,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				764,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1808, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				765,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1808, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				766,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				767,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				768,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1808, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				769,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				770,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				771,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1808, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				772,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				773,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				774,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				775,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				776,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1844, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				777,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				778,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				779,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				780,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1808, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				781,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				782,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				783,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				784,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1844, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				785,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				786,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				787,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1808, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				788,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1880, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				789,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1880, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				790,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 484, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				791,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				792,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 550, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				793,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1880, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				794,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1880, 572, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				795,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 594, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				796,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 638, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				797,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				798,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				799,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1880, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				800,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1628, 330, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				639,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1644, 330, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				723,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1660, 330, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				726,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1628, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				658,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1628, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				678,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1664, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				728,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1664, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				733,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				736,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1700, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				737,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1736, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				738,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1736, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				739,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[1736, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				740,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1736, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				743,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[1768, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				804,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1400, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				805,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1436, 462, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				806,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[1964, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				809,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1911, 314, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				810,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1964, 264, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				811,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1911, 213, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				812,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1964, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				813,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[2028, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				814,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2028, 187, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				815,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2028, 209, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				816,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				817,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				818,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				819,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2028, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				820,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				821,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				822,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				823,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				824,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				825,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				826,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				827,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				828,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				829,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2028, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				830,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				831,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				832,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				833,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				834,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				835,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				836,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[2028, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				837,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				838,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				839,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1880, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				840,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				841,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1880, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				842,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1880, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				843,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1772, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				844,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1772, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				845,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1772, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				846,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				847,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1772, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				848,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				849,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				850,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				851,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				852,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1808, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				853,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 770, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				854,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[1844, 792, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				855,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2028, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				856,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				857,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2028, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				858,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2028, 803, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				859,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[2064, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				121,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2100, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				123,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2136, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				860,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2172, 165, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				861,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2064, 187, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				862,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 209, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				863,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				864,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				865,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				866,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				867,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				868,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				869,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				870,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				871,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				872,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				873,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				874,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2100, 187, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				875,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 187, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				876,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 209, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				877,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2100, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				878,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				879,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				880,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2100, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				881,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				882,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				883,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2100, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				884,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				885,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				886,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				887,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 209, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				888,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2136, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				889,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				890,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				891,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				892,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				893,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				894,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				895,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				896,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2136, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				897,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				898,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				899,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2100, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				900,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				901,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				902,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				903,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				904,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				905,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				906,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				907,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				908,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				909,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				910,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				911,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				912,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				913,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				914,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				915,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				916,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2100, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				917,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2136, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				918,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				919,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				920,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				921,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				922,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2136, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				923,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				924,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				925,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				926,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				927,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				928,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				929,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				930,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				931,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				932,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				933,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				934,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				935,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				936,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2172, 231, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				937,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2172, 187, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				938,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 209, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				939,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 253, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				940,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 275, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				941,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 297, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				942,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 319, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				943,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 341, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				944,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2172, 363, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				945,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 385, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				946,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 429, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				947,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 407, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				948,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2172, 451, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				949,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 473, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				950,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 517, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				951,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2172, 495, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				952,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				953,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 561, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				954,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 583, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				955,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 605, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				956,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 627, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				957,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2172, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				958,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2172, 671, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				959,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 715, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				960,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 693, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				961,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2172, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				962,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				963,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				964,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				965,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[2100, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				966,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 737, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				967,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				968,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[2064, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				969,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 759, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				970,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				971,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				972,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 781, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				973,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2172, 803, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				974,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2064, 803, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				975,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2100, 803, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				976,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2136, 803, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				977,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[2188, 132, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				978,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1964, 341, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				979,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1912, 290, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				984,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1964, 242, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				985,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1912, 190, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				986,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1964, 141, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				987,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1720, 187, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				989,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1396, 438, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				808,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1013, 335, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				807,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[665, 142, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				988,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[392, 154, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				66,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1431, 439, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				328,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[32, 341, 0, 15, 26, 0, 0, 1, 0.533333, 1, 0, 0, []],
				11,
				60,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 352, 0, 164, 11, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				993,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[400, 220, 0, 8, 33, 0, 0, 1, 0.5, 0.58, 0, 0, []],
				42,
				992,
				[
					[0]
				],
				[
				[
					70,
					500,
					500,
					650,
					900,
					300,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 242, 0, 8, 253, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				995,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1588, 253, 0, 12, 176, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				997,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1912, 154, 0, 64, 11, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				998,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2133, 155, 0, 20, 55, 0, 0, 0.35, 0.5, 1, 0, 0, []],
				16,
				1972,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1263, 249, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				2667,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"snow",
			3,
			5050656901319643,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[308, 128, 0, 128, 128, 0, -1.5708, 1, 0, 0.5, 0, 0, []],
				23,
				48,
				[
				],
				[
				],
				[
					25,
					180,
					0,
					55,
					4,
					100,
					-10,
					0,
					0,
					0,
					0,
					0,
					-50,
					0,
					0,
					800,
					0,
					1,
					0.3
				]
			]
			],
			[			]
		]
,		[
			"nieva",
			4,
			4109424302809456,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[128, -56, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				57,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[72, -24, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				108,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[16, -8, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				109,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[292, -24, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				110,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[236, -12, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				111,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[180, -24, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				112,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[48, -64, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				113,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					35,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[100, -4, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				114,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					35,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[160, -64, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				115,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					35,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[208, -32, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				116,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					35,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
,			[
				[267, -8, 0, 20, 28, 0, 3.14159, 1, 0, 0.5, 0, 0, []],
				25,
				117,
				[
				],
				[
				],
				[
					10,
					360,
					0,
					0,
					1.7,
					35,
					0,
					20,
					0,
					50,
					0,
					0,
					0,
					15,
					100,
					0,
					0,
					1,
					8
				]
			]
			],
			[			]
		]
,		[
			"UX",
			5,
			685238117877462,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[29, 14, 0, 20, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				41,
				996,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[217, 22, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				20,
				131,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[217, 14, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				21,
				132,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[16, 22, 0, 116, 12, 0, 0, 1, 0, 0, 0, 0, []],
				36,
				990,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[30, 16, 0, 31, 10, 0, 0, 1, 0.516129, 0.5, 0, 0, []],
				37,
				991,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1004, 66, 0, 202, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				95,
				3117,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"transitions",
			6,
			4941016774946316,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150.09, 99.8782, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				86,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150.09, 99.8782, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				18,
				87,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				49,
				1971,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				54,
				1979,
				[
					[0]
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"4level-volcano",
		2780,
		800,
		false,
		"Event sheet 1",
		103263949628436,
		[
		[
			"background",
			0,
			3236514812631582,
			true,
			[255, 255, 255],
			false,
			0.2,
			0.2,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-48, -66, 0, 2852, 154, 0, 0, 1, 0, 0, 0, 0, []],
				70,
				2602,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-12, 231, 0, 2824, 583, 0, 0, 1, 0, 0, 0, 0, []],
				68,
				2684,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[-12, 13, 0, 2816, 253, 0, 0, 1, 0, 0, 0, 0, []],
				69,
				2685,
				[
				],
				[
				[
					-10,
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"background3",
			1,
			7277926114703172,
			true,
			[255, 255, 255],
			true,
			0.35,
			0.35,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-16, 284, 0, 2824, 143, 0, 0, 1, 0, 0, 0, 0, []],
				74,
				2605,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"background2",
			2,
			7022198663754928,
			true,
			[255, 255, 255],
			true,
			0.5,
			0.5,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[112, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2696,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[368, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2695,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[624, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2697,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[880, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2704,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1136, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2706,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1392, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2707,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1648, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2612,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1904, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2613,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2160, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2607,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2416, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2609,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2672, 506, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				75,
				2610,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"platforms",
			3,
			4538265800684684,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[2476, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2959,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2440, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2969,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2440, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2971,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2476, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2972,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2512, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2975,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2512, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2976,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2487, 498, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3063,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2503, 498, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3064,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2471, 498, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3065,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[82, 773, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3040,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[28, 660, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				81,
				3035,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2284, 492, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				81,
				3033,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2204, 652, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				81,
				2915,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2774, 372, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2999,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2771, 438, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3000,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[2774, 394, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3030,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2774, 416, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3031,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2490, 803, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3029,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2490, 730, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				3032,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[2766, 583, 0, 36, 286, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2769,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2754, 459, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2994,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 517, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2995,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2752, 495, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2996,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2752, 473, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2997,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2790, 459, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2665,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2766, 495, 0, 28, 55, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				84,
				2664,
				[
				],
				[
				[
					0,
					0,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2204, 715, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3016,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2284, 539, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3012,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[28, 715, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3010,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2710, 704, 0, 92, 209, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2934,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2738, 665.5, 0, 112, 286, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2989,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2744, 625, 0, 36, -55, 0, 1.56943, 0.5, 0.5, 0.5, 0, 0, []],
				84,
				2847,
				[
				],
				[
				[
					1,
					6,
					0,
					2,
					0,
					0,
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 627, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3007,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[452, 715, 0, 60, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2669,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[472, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2652,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[436, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2653,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[472, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2654,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[436, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2658,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[436, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2659,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[450.5, 723.992, 0, 36, -33, 0, 1.56943, 0.5, 0.5, 0.5, 0, 0, []],
				84,
				3006,
				[
				],
				[
				[
					0,
					6,
					0,
					2,
					0,
					0,
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2256, 715, 0, 60, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2889,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2893,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2240, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2894,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2240, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2916,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2257.5, 722.992, 0, 36, -44, 0, 1.56943, 0.5, 0.5, 0.5, 0, 0, []],
				84,
				3001,
				[
				],
				[
				[
					1,
					6,
					0,
					2,
					0,
					0,
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 627, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2891,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 671, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2917,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[2240, 649, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2918,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2292, 671, 0, 27, 112, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				3002,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2276, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2892,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2291, 731, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2895,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2274, 731, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2896,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2291, 753, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2897,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2274, 753, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2898,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2276, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2919,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[920, 737, 0, 27, 112, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2751,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[904, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2724,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[848, 775.5, 0, 136, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2649,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1308, 740, 0, 74, 44, 0, 0, 1, 0.5, 0, 0, 0, []],
				80,
				2809,
				[
					["stop"]
				],
				[
				[
					1
				],
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					5,
					0
				],
				[
					50,
					600,
					500,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2736, 649, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2879,
				[
				],
				[
				],
				[
					6,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2776, 649, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2880,
				[
				],
				[
				],
				[
					6,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2780, 599, 0, 27, 112, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2872,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2760, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2991,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[2796, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2998,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2736, 649, 0, 76, 121, 0, 0, 1, 0, 0, 0, 0, []],
				72,
				2874,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[2804, 638, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2873,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2779, 709, 0, 30, 120, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2875,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2736, 709, 0, -30, 121, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2876,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2758, 709, 0, 30, 120, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2877,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2448, 615, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2922,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2364, 615, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2923,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2532, 615, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2928,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2612, 615, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2948,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2406, 725, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2914,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2576, 726, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2929,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[580, 704, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2636,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[648, 693, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2639,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[712, 726, 0, 36, 22, 0, 0, 1, 0.5, 0, 0, 0, []],
				76,
				2640,
				[
					[""],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					1500,
					1500,
					650,
					0,
					35,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[328, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2656,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[328, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3628,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[364, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2641,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[292, 748, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2655,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[256, 728, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3626,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[292, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3627,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[400, 727, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3629,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[364, 726, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3630,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[308, 726, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2690,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[924, 661, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2750,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[1140, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2765,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[996, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2632,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[996, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2741,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[1032, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2744,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[960, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2745,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[960, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2753,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[1176, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2754,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[1032, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2757,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[1068, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2758,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[1104, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2759,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[1068, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2760,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[1104, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2761,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[1140, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2766,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[964, 682, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2776,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1048, 726, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2672,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2238, 781, 0, 200, 55, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2888,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2364, 766, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2905,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2532, 675, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2911,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2616, 631, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2949,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2724, 770, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2925,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2652, 770, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2931,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1827, 788, 0, 25, 62, 0, 0, 1, 0.515152, 1, 0, 0, []],
				81,
				2844,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1689, 759, 0, 27, 112, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2850,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[884, 709.5, 0, 60, 99, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2715,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[904, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2723,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[904, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2651,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[846, 725.5, 0, 36, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2730,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[854, 742, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2728,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[841, 740, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2729,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[904, 671, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2716,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[868, 671, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2717,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[904, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2718,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[868, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2719,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[868, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2720,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[904, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2721,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[888, 715, 0, 27, 112, 0, 0, 1, 0.518519, 0.5, 0, 0, []],
				77,
				2714,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[888, 660, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2725,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[854, 720, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2726,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[841, 720, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2727,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[868, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2735,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[924, 682, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2755,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[872, 635, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2770,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[888, 635, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2771,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[904, 635, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2772,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[460, 781, 0, 168, 55, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2683,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[136, 781, 0, 288, 55, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2677,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1178, 781, 0, 168, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2660,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 825, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2849,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1364, 781, 0, 2920, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				12,
				2615,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1432, 825, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2712,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, 825, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2784,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1608, 825, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2816,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2688, 605, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2987,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2656, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2983,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2656, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2984,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2332, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2960,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2332, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2961,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2368, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2962,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2296, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2963,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2260, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2964,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[2296, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2965,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2692, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2966,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[2368, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2967,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2404, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2968,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2404, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2970,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2688, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2973,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2264, 605, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2952,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2252, 605, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2953,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2264, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2954,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2252, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2955,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2288, 588, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2900,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2304, 588, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2901,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2264, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2927,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2252, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2956,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2264, 561, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2957,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2252, 561, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2958,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2712, 638, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2946,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2652, 748, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2930,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2688, 748, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2932,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2724, 748, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2933,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2300, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2924,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[2276, 627, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2890,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2272, 588, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2899,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2144, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2854,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 671, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				78,
				2663,
				[
					["down"],
					[0]
				],
				[
				[
					130,
					5000,
					5000,
					0,
					0,
					0,
					1
				],
				[
					180,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 572, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2848,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1608, 671, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				78,
				2608,
				[
					["down"],
					[0]
				],
				[
				[
					130,
					5000,
					5000,
					0,
					0,
					0,
					1
				],
				[
					180,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[964, 638, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2778,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1172, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2768,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1013, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2742,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1005, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2743,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1047, 638, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2698,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1073, 638, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2670,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1208, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2634,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1208, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2622,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1208, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2623,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[488, 731.5, 0, 36, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2705,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[496, 726, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2699,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[480, 726, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2700,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[496, 748, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2701,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[480, 748, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2702,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2, 737, 0, 8, 24, 0, 0, 1, 0.588, 1.008, 0, 0, []],
				10,
				2662,
				[
				],
				[
				[
					120,
					1000,
					1000,
					300,
					900,
					1000,
					1,
					1
				],
				[
					1
				],
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2714, 519, 0, 20, 55, 0, 0, 0.35, 0.5, 1, 0, 0, []],
				16,
				2668,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[649, 737, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2703,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[51, 737, 0, 108, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				32,
				2736,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-8, 759, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				2853,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[186, 715, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3075,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[202, 715, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3076,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[218, 715, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3077,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[16, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3659,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[52, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2606,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[88, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2617,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[124, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2618,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[160, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2619,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[196, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2620,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[268, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2674,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[232, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2675,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[388, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2678,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[424, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2679,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[460, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2680,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[308, 693, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2691,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[348, 693, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2693,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[532, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2637,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[496, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2638,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[796, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2645,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2646,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[437, 655, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2657,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[453, 655, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2708,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[469, 655, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2709,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1170, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2733,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1154, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2734,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1106, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2747,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1142, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2748,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1250, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2749,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1170, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2756,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1154, 737, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2767,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1009, 716, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2630,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1172, 693, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2763,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1172, 715, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2764,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1178, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2624,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1214, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2625,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1147, 702, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2773,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1163, 702, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2774,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1179, 702, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2775,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1432, 572, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2711,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, 616, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				78,
				2713,
				[
					["down"],
					[0]
				],
				[
				[
					130,
					5000,
					5000,
					0,
					0,
					0,
					1
				],
				[
					180,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, 572, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2783,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1608, 572, 0, 16, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2810,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1688, 704, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2817,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1728, 663, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2832,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1688, 583, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2833,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1447, 731, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2834,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1506, 704, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2835,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1415, 731, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2837,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1431, 731, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2838,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1538, 704, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2843,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1628, 731, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2839,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1596, 731, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2840,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1612, 731, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2841,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1828, 682, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2846,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1688, 682, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2845,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1688, 616, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2614,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1728, 638, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2616,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1522, 704, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				2852,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1884, 693, 0, 8, 253, 0, 0, 0.2, 0.5, 0.5, 0, 0, []],
				39,
				2842,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2178, 721, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				82,
				2856,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2180, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2883,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2216, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2884,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2252, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2885,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[2172, 737, 0, 17, 13, 0, 0, 1, 0.529412, 0.538462, 0, 0, []],
				83,
				103,
				[
					[""]
				],
				[
				[
					100,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2284, 704, 0, 17, 13, 0, 0, 1, 0.529412, 0.538462, 0, 0, []],
				83,
				104,
				[
					[""]
				],
				[
				[
					100,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2396, 737, 0, 17, 13, 0, 0, 1, 0.529412, 0.538462, 0, 0, []],
				83,
				2851,
				[
					[""]
				],
				[
				[
					100,
					600,
					500,
					3,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2160, 721, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2886,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2196, 721, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				2887,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2288, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2902,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[2324, 759, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2903,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2488, 474, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2904,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2364, 614, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2906,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2448, 614, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2908,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2532, 614, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2912,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2276, 671, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2920,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2276, 649, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2921,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2712, 616, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2935,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[2676, 616, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2936,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2712, 726, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2937,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2676, 726, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2938,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[2676, 704, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2939,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2676, 682, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2940,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[2676, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2941,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2712, 704, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2942,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[2712, 682, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2943,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2712, 660, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2944,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[2710, 694, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2926,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[2724, 649, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2945,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[2676, 638, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2947,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2616, 614, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2950,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2620, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2974,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2548, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2977,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2584, 528, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2978,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[2548, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2979,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2584, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2980,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2620, 506, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				2981,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[2688, 583, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2985,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[2688, 561, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2986,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[2724, 539, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2990,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[2491, 697, 0, 15, 15, 0, 0, 1, 0.6, 0.533333, 0, 0, []],
				35,
				2992,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2236, 565, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2993,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[2692, 577, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3003,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2708, 577, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3004,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2676, 577, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3005,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[16, 715, 0, 15, 26, 0, 0, 1, 0.533333, 1, 0, 0, []],
				11,
				3619,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2780, 539, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				2878,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					0
				]
			]
,			[
				[2788, 847, 0, 12, 583, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				2881,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[348, 760, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2689,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1073, 759, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2661,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2324, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2731,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[2448, 718, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				2907,
				[
					["up"],
					[0]
				],
				[
				[
					200,
					400,
					300,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2144, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2855,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[964, 825, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2782,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1009, 770, 0, 32, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				2737,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1047, 825, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2722,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1073, 825, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2671,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[308, 825, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2692,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[348, 825, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2694,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1432, 781, 0, 32, 32, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				78,
				2710,
				[
					["down"],
					[0]
				],
				[
				[
					130,
					5000,
					5000,
					0,
					0,
					0,
					1
				],
				[
					180,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1013, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2738,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[1005, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2739,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1250, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2635,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[868, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2650,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1106, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2746,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[796, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2648,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[532, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2642,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[268, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2673,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[268, 803, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2676,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[388, 781, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2681,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[388, 803, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				2682,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[12, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2740,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[64, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2785,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[120, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2786,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[172, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2787,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[224, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2788,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[276, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2789,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[328, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2790,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[380, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2791,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[436, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2792,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[488, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2793,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[540, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2794,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[592, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2795,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[642, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2626,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[694, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2627,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[746, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2628,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[798, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2629,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[852, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2621,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[904, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2631,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[956, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2633,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1008, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2777,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1056, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2779,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1108, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2780,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1160, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2781,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1212, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2803,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1260, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2804,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1312, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2805,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1364, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2806,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1425, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2807,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1492, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2818,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1544, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2819,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1596, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2820,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1648, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2821,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1700, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2822,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1756, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2823,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1824, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2811,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1876, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2812,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1928, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2813,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[1980, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2814,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2028, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2815,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2080, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2827,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2132, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2828,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2268, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2860,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2336, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2862,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2388, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2863,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2440, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2864,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2492, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2865,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2540, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2866,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2592, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2867,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2644, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2868,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2196, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2857,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2364, 836, 0, 16, 44, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2909,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2448, 836, 0, 16, 44, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2910,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2532, 836, 0, 16, 44, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2913,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2616, 836, 0, 16, 44, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				2951,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[60, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2603,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[188, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2604,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-4, 770, 0, 2824, 33, 0, 0, 1, 0, 0, 0, 0, []],
				72,
				2688,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[316, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2686,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[444, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2687,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[572, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2643,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[700, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2644,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1340, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2808,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[828, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2647,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1084, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2752,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[956, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2732,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1212, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2762,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1724, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2824,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1468, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2825,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1596, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2826,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2108, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2829,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1852, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2830,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1980, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2831,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2236, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2861,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2620, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2869,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2364, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2870,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2492, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2871,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 572, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				3008,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 704, 0, 16, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				3009,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2776, 770, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3017,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2780, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2858,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2708, 770, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				2882,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[2748, 759, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				2859,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2740, 774, 0, 76, 33, 0, 0, 1, 0, 0, 0, 0, []],
				72,
				3028,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[524, 726, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3068,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[540, 726, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3069,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2312, 721, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3070,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2328, 721, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3071,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2296, 721, 0, 7, 11, 0, 0, 1, 0.571429, 0.545455, 0, 0, []],
				19,
				3072,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 0",
			4,
			9551311549919614,
			true,
			[255, 255, 255],
			true,
			1.3,
			1.3,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[64, 860, 0, 33, 70, 0, 0, 1, 0.515152, 1, 0, 0, []],
				81,
				3011,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[64, 915, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3034,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 1012, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3036,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[152, 968, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3037,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[4, 1001, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3038,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[196, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3039,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[452, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3041,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[536, 1023, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3042,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[556, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3043,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1008, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3044,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[988, 1023, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3045,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1106, 1033, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3046,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1082, 1001, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3047,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1476, 1023, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3048,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, 1001, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3049,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1544, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3050,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1894, 1028, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3051,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1922, 1039, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3052,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1982, 1031, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3053,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2154, 1028, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3054,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2132, 1039, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3055,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2242, 1028, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3056,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2492, 1028, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3057,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2520, 1039, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3058,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2600, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3059,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2692, 1027, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3060,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2716, 1038, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3061,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2784, 1034, 0, 36, 141, 0, 0, 1, 0.5, 0.503546, 0, 0, []],
				85,
				3062,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"fuego",
			5,
			2512214260375943,
			true,
			[255, 255, 255],
			true,
			0,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[16, 804, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				2797,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[72, 804, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				2798,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[124, 804, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				2799,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[176, 804, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				2800,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[226, 804, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				2801,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[271, 803, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				2802,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
			],
			[			]
		]
,		[
			"UX",
			6,
			4250389643374274,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[29, 15, 0, 20, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				41,
				3649,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[217, 22, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				20,
				3650,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[217, 14, 0, 80, 12, 0, 0, 1, 0, 0, 0, 0, []],
				21,
				3651,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[16, 22, 0, 116, 12, 0, 0, 1, 0, 0, 0, 0, []],
				36,
				3652,
				[
				],
				[
				],
				[
					"Text",
					0,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[30, 16, 0, 31, 10, 0, 0, 1, 0.516129, 0.5, 0, 0, []],
				37,
				3653,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2424, 429, 0, 202, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				95,
				3118,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1172, -121, 0, 308.713, 205.809, 0, 0, 1, 0.501672, 0.5, 0, 0, []],
				89,
				3129,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"transitions",
			7,
			4270800316797999,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				3654,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				18,
				3655,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[152, 99, 0, 397, 397, 0, 0, 0, 0.501259, 0.501259, 0, 0, []],
				50,
				3656,
				[
				],
				[
				[
					80,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				49,
				3657,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				54,
				3658,
				[
					[0]
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"5level-boss",
		300,
		200,
		false,
		"Event sheet 1",
		1823600175463295,
		[
		[
			"background",
			0,
			2283681017967617,
			true,
			[255, 255, 255],
			false,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[154, 102, 0, 308.713, 205.809, 0, 0, 1, 0.501672, 0.5, 0, 0, []],
				89,
				3090,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"platforms",
			1,
			7119420458142776,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[166, 140, 0, 384, 33, 0, 0, 1, 0.5, 1, 0, 0, []],
				14,
				3100,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[277, 111, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3127,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[303, 111, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3082,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[123, -90, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3097,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[196, -157, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3098,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[116, -241, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3101,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[64, -165, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3104,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[240, -220, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3106,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[177, -32, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3107,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[56, -47, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3110,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[239, -88, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3112,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[20, -47, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3092,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[160, -157, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3103,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[152, -241, 0, 36, 28, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				3113,
				[
					[1]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1.97522, 212.885, 0, 102.05, 94.7697, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				3225,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[63, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3173,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[39, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3295,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[261, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3089,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[243, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3079,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[279, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3080,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[297, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3176,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					46,
					1
				]
			]
,			[
				[189, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3171,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[225, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3177,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[45, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3174,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					44,
					1
				]
			]
,			[
				[153, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3175,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[117, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3087,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[81, 146, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3088,
				[
				],
				[
				[
					0
				]
				],
				[
					0,
					"Default",
					45,
					1
				]
			]
,			[
				[207, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3081,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[99, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3170,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[135, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3172,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[210, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3178,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[112, 198, 0, 415, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				12,
				3228,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2, 153, 0, 8, 24, 0, 0, 1, 0.588, 1.008, 0, 0, []],
				10,
				3281,
				[
				],
				[
				[
					120,
					1000,
					1000,
					300,
					900,
					1000,
					1,
					1
				],
				[
					1
				],
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[14, 157, 0, 32, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				32,
				3284,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-7, 178, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				3285,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-33, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3294,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[3, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3296,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[296, 175, 0, 36, 22, 0, 0, 1, 0.5, 1, 0, 0, []],
				66,
				3297,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[307, 181, 0, 12, 275, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				3393,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[230, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3394,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[12, 182, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3417,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[64, 182, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3418,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[120, 182, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3419,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[312, 185, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3420,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[364, 185, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3421,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[276, 182, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3422,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[328, 185, 0, 20, 28, 0, 0, 1, 0, 0.5, 0, 0, []],
				79,
				3423,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[171, 164, 0, 36, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				3078,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					47,
					1
				]
			]
,			[
				[180, 44, 0, 38, 34, 0, 0, 1, 0.5, 1, 0, 0, []],
				90,
				3074,
				[
				],
				[
				[
					0,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[280, 88, 0, 34, 28, 0, 0, 1, 0.5, 1, 0, 0, []],
				91,
				3091,
				[
					[0],
					["left"],
					[0],
					[0],
					[3],
					[0],
					[0],
					[0],
					[0]
				],
				[
				[
					150,
					1500,
					1500,
					160,
					1200,
					1200,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[250, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3093,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[270, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3096,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[290, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3099,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[110, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3102,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[130, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3105,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3108,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[170, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3111,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[190, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3114,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[30, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3120,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[50, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3123,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[70, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3126,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[90, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3132,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[11, 250, 0, 13, 17, 0, 0, 1, 0.538462, 0.529412, 0, 0, []],
				73,
				3115,
				[
					[""],
					[0]
				],
				[
				[
					200,
					1500,
					1500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[16, 134, 0, 15, 26, 0, 0, 1, 0.533333, 1, 0, 0, []],
				11,
				3391,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[268, -33, 0, 57, 57, 0, 0, 1, 0.508772, 1, 0, 0, []],
				99,
				3134,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[291, 108, 0, 64, 17, 0, 0, 0.2, 0.5, 1, 0, 0, []],
				100,
				3084,
				[
				],
				[
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[40, -82, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				101,
				3130,
				[
					[0]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[118, -275, 0, 13, 12, 0, 0, 1, 0.538462, 0.5, 0, 0, []],
				101,
				3083,
				[
					[0]
				],
				[
				[
					1
				],
				[
					0,
					600,
					500,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[60, 171, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				3471,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[188, 171, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				3472,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-5, 182, 0, 332, 22, 0, 0, 1, 0, 0, 0, 0, []],
				72,
				3473,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
,			[
				[316, 170.611, 0, 128, 15, 0, 0, 1, 0.5, 0, 0, 0, []],
				71,
				3474,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"fuego",
			2,
			4633858677736185,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[16, 216, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				3533,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[72, 216, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				3534,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[124, 216, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				3535,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[271, 215, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				3538,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[178, 216, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				3085,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[228, 216, 0, 20, 28, 0, 0, 0.5, 0, 0.5, 0, 0, []],
				79,
				3086,
				[
				],
				[
				],
				[
					5,
					360,
					0,
					10,
					1.7,
					100,
					0,
					20,
					0,
					50,
					0,
					0,
					10,
					-25,
					50,
					0,
					0,
					0,
					3
				]
			]
,			[
				[150.003, 99.0434, 0, 389.021, 266.898, 0, 0, 1, 0.501266, 0.501845, 0, 0, []],
				93,
				3094,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"UX",
			3,
			1815493929880887,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[29, 15, 0, 20, 22, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				41,
				3539,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[30, 16, 0, 31, 10, 0, 0, 1, 0.516129, 0.5, 0, 0, []],
				37,
				3543,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[266, 15, 0, 38, 6, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				94,
				3095,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[440, -33, 0, 202, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				95,
				3119,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"transitions",
			4,
			1001577403076013,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				3544,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				18,
				3545,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[152, 99, 0, 397, 397, 0, 0, 0, 0.501259, 0.501259, 0, 0, []],
				50,
				3546,
				[
				],
				[
				[
					80,
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				49,
				3547,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				54,
				3548,
				[
					[0]
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"6level-theend",
		300,
		200,
		false,
		"Event sheet 1",
		992932872741421,
		[
		[
			"background",
			0,
			291881836626521,
			true,
			[255, 255, 255],
			false,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				96,
				3122,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"platforms",
			1,
			9269415318017075,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-18, 168.137, 0, 8, 24, 0, 0, 1, 0.588, 1.008, 0, 0, []],
				10,
				3153,
				[
				],
				[
				[
					120,
					1000,
					1000,
					0,
					900,
					1000,
					0,
					1
				],
				[
					1
				],
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[121.253, 172.137, 0, 286.505, 11, 0, 0, 1, 0.5, 1, 0, 0, []],
				32,
				3154,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-27, 178, 0, 12, 264, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				3155,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[334.076, 181, 0, 12, 275, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				3162,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-4, 149.137, 0, 15, 26, 0, 0, 1, 0.533333, 1, 0, 0, []],
				11,
				3207,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[151.281, 200.577, 0, 359, 25.5098, 0, 0, 1, 0.5, 1, 0, 0, []],
				30,
				3121,
				[
				],
				[
				[
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[80.5626, 100.385, 0, 141.261, 24.5363, 0, 0, 1, 0, 0, 1, 0, []],
				98,
				3128,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					"THE END",
					1,
					"14pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					2
				]
			]
,			[
				[79.4645, 87.6384, 0, 142.627, 12.1431, 0, 0, 1, 0, 0, 0, 0, []],
				98,
				3131,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					"...........................................................",
					1,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
,			[
				[79.4645, 68.4135, 0, 142.627, 12.1431, 0, 0, 1, 0, 0, 0, 0, []],
				98,
				3133,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					"...........................................................",
					1,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
,			[
				[83.7439, 80.426, 0, 134.993, 13.981, 0, 0, 1, 0, 0, 0, 0, []],
				98,
				3139,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					"Thank's for playing tag!",
					1,
					"5pt Bit Trip7 (sRB)",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"transitions",
			2,
			9157688229520954,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[519, 109, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				3223,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 100, 0, 300, 200, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				97,
				3125,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
	],
	[
	[
		"Event sheet 1",
		[
		[
			1,
			"agua",
			0,
			0,
false,false,1069738276607599,false
		]
,		[
			1,
			"gameover",
			0,
			0,
false,false,8945350400828137,false
		]
,		[
			1,
			"finalloop",
			0,
			1,
false,false,8568049204316683,false
		]
,		[
			1,
			"score",
			0,
			0,
false,false,9798520604488287,false
		]
,		[
			1,
			"stars",
			0,
			0,
false,false,6678699283889275,false
		]
,		[
			1,
			"lifes",
			0,
			3,
false,false,593459807422012,false
		]
,		[
			1,
			"boss_lifes",
			0,
			3,
false,false,7733215612001094,false
		]
,		[
			1,
			"coins",
			0,
			0,
false,false,2279010426094576,false
		]
,		[
			0,
			null,
			false,
			null,
			5827260282032697,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				6395785900937732,
				false
			]
			],
			[
			[
				20,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				522584739598842,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				21,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				8612701337307452,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				36,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				7964136997176825,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				98,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				733248344185845,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				18,
				cr.plugins_.Sprite.prototype.acts.StopAnim,
				null,
				4894758259487769,
				false
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StopAnim,
				null,
				7173037160860501,
				false
			]
,			[
				49,
				cr.plugins_.Sprite.prototype.acts.StopAnim,
				null,
				9872669705736984,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8890210616937486,
				false
				,[
				[
					11,
					"stars"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8704430618122369,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				9387158178488256,
				false
				,[
				[
					11,
					"agua"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				9856201919485606,
				[
				[
					7,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					2999605203168252,
					false
				]
				],
				[
				[
					55,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7934522329389887,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					8148081938251219,
					false
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2198311262147942,
					false
					,[
					[
						2,
						["level1_music",true]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-2
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					5846575972358415,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9697509890958727,
						false
						,[
						[
							11,
							"score"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						95,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						3601809980585182,
						false
						,[
						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2024349033624226,
				[
				[
					56,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					6978472559438336,
					false
				]
				],
				[
				[
					55,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					8112573529851895,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					5367077680481463,
					false
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					4135403456824841,
					false
					,[
					[
						2,
						["level2_music",true]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-2
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2695095102515437,
				[
				[
					27,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					7870929199386235,
					false
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					8791447870412937,
					false
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					766450707674412,
					false
					,[
					[
						2,
						["level3_music2",true]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-2
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3330463415698963,
				[
				[
					69,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					2154656590294802,
					false
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					3000358869100574,
					false
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9331590343695388,
					false
					,[
					[
						2,
						["level4_music2",true]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-3
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5449573659372766,
				[
				[
					89,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					5526725438044746,
					false
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					4643337025954286,
					false
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					8480054100086255,
					false
					,[
					[
						2,
						["level5_music",true]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5537470101209408,
				[
				[
					96,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					5115173052287849,
					false
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					6705602859960043,
					false
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9393189109099673,
					false
					,[
					[
						2,
						["pinball spring",true]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-3
						]
					]
,					[
						1,
						[
							2,
							"music"
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					7378549787831242,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8400564967330964,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			605905539325556,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				8756999145567139,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetPosToObject,
				null,
				2136852340739557,
				false
				,[
				[
					4,
					10
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				38,
				cr.plugins_.Sprite.prototype.acts.SetPosToObject,
				null,
				264570675226516,
				false
				,[
				[
					4,
					42
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.acts.SetPosToObject,
				null,
				864589107680396,
				false
				,[
				[
					4,
					42
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				23,
				cr.plugins_.Particles.prototype.acts.SetPosToObject,
				null,
				8078167057121809,
				false
				,[
				[
					4,
					10
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				44,
				cr.plugins_.Particles.prototype.acts.SetPosToObject,
				null,
				7862790802678059,
				false
				,[
				[
					4,
					10
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				61,
				cr.plugins_.Particles.prototype.acts.SetPosToObject,
				null,
				6872492445290539,
				false
				,[
				[
					4,
					10
				]
,				[
					7,
					[
						2,
						"top"
					]
				]
				]
			]
,			[
				36,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				1580572050165047,
				false
				,[
				[
					7,
					[
						10,
						[
							10,
							[
								2,
								"STARS: "
							]
							,[
								23,
								"stars"
							]
						]
						,[
							2,
							"/5"
						]
					]
				]
				]
			]
,			[
				37,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				707477543489167,
				false
				,[
				[
					0,
					[
						23,
						"lifes"
					]
				]
				]
			]
,			[
				94,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				6116268076942624,
				false
				,[
				[
					0,
					[
						23,
						"boss_lifes"
					]
				]
				]
			]
,			[
				98,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				7147294842862294,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				7135218070643795,
				[
				[
					69,
					cr.plugins_.TiledBg.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					7919396253628679,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							-524
						]
					]
					]
				]
				],
				[
				[
					69,
					cr.plugins_.TiledBg.prototype.acts.SetX,
					null,
					4601501132962329,
					false
					,[
					[
						0,
						[
							0,
							-12
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				310588879596865,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1207094216253411,
					false
					,[
					[
						11,
						"coins"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							10
						]
					]
					]
				]
				],
				[
				[
					20,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					8131932539301,
					false
					,[
					[
						7,
						[
							10,
							[
								2,
								"Coins: 00"
							]
							,[
								23,
								"coins"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8438046906874341,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3710100861093834,
					false
					,[
					[
						11,
						"coins"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							10
						]
					]
					]
				]
				],
				[
				[
					20,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					1396971470631313,
					false
					,[
					[
						7,
						[
							10,
							[
								2,
								"Coins: 0"
							]
							,[
								23,
								"coins"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5242637229911453,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9249085130020445,
					false
					,[
					[
						11,
						"score"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							100
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					8945439393422554,
					false
					,[
					[
						7,
						[
							10,
							[
								2,
								"Score: 0000"
							]
							,[
								23,
								"score"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7271805253806957,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8602767969271624,
					false
					,[
					[
						11,
						"score"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							100
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					7509046509168154,
					false
					,[
					[
						7,
						[
							10,
							[
								2,
								"Score: 00"
							]
							,[
								23,
								"score"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1756000090250387,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8610895318470836,
					false
					,[
					[
						11,
						"score"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							1000
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					4170423790113354,
					false
					,[
					[
						7,
						[
							10,
							[
								2,
								"Score: 0"
							]
							,[
								23,
								"score"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				4022339966906177,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					1513196818998948,
					false
					,[
					[
						4,
						24
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					2794700570488832,
					false
					,[
					[
						4,
						33
					]
					]
				]
				],
				[
				[
					23,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					6990338081333335,
					false
					,[
					[
						0,
						[
							0,
							20
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					3969842349730373,
					false
					,[
					[
						0,
						[
							0,
							400
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					9647777430500222,
					false
					,[
					[
						0,
						[
							0,
							150
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3232067756583271,
				[
				[
					11,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					true,
					false,
					2824034493633175,
					false
					,[
					[
						1,
						[
							2,
							"Run"
						]
					]
					]
				]
				],
				[
				[
					23,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					8665605033535202,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9258179564002401,
				[
				[
					11,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					true,
					false,
					4149147899627977,
					false
					,[
					[
						1,
						[
							2,
							"Run"
						]
					]
					]
				]
,				[
					9,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					4315948220453297,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							33
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					3684723289701905,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5572939237815021,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					8913005419962267,
					false
					,[
					[
						4,
						9
					]
					]
				]
,				[
					9,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					1373576104472506,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							0,
							33
						]
					]
					]
				]
,				[
					9,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					83807644712926,
					false
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							0,
							37
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					2466245288656344,
					false
					,[
					[
						0,
						[
							0,
							20
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					6611247021447719,
					false
					,[
					[
						0,
						[
							0,
							50
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					5963648961535938,
					false
					,[
					[
						0,
						[
							0,
							100
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8445721040374365,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					3969885182442879,
					false
					,[
					[
						4,
						9
					]
					]
				]
,				[
					9,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9963887759193137,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							33
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					3036889434547025,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					5202455170518062,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					1858925048866973,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1292061108448822,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					3110135019499499,
					false
					,[
					[
						4,
						13
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					755050970925066,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				8045028139268789,
				[
				[
					10,
					cr.behaviors.Platform.prototype.cnds.OnJump,
					"Platform",
					1,
					false,
					false,
					false,
					1656422751379955,
					false
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					2569784589078467,
					false
					,[
					[
						4,
						9
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					7389977148959623,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					1298169970108442,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2745432442740969,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9482050027231272,
					false
					,[
					[
						11,
						"stars"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetOpacity,
					null,
					8701560609715932,
					false
					,[
					[
						0,
						[
							0,
							100
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5098238940754701,
				[
				[
					42,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9094276479036449,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					7036812448646757,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4941900454191838,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8188695633354986,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetGravity,
					"Platform",
					9475721289439686,
					false
					,[
					[
						0,
						[
							0,
							900
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
					"Platform",
					6545241206768999,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					5190817249697461,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					6128910555397209,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					9482481147474544,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					8603462146558078,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					61,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					203125220255551,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					836223370573809,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					969941924104317,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					7782915775851091,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3758171059633093,
						false
						,[
						[
							11,
							"gameover"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						5,
						cr.plugins_.Audio.prototype.acts.StopAll,
						null,
						2755669217668105,
						false
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						5083517575828362,
						false
						,[
						[
							2,
							["gameover",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"gameover"
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6393688995627267,
						false
						,[
						[
							11,
							"gameover"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					7477139745709957,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8498798890187391,
						false
						,[
						[
							11,
							"agua"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						11,
						cr.plugins_.Sprite.prototype.acts.MoveToTop,
						null,
						2505320014032089,
						false
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				3154060914256586,
				[
				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8294204507570752,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9491752407142392,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					233904919986968,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					3393313425922491,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							7
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8319595117166587,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							9
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					1349565325234228,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							11
						]
					]
					]
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetOpacity,
					null,
					2069591757227916,
					false
					,[
					[
						0,
						[
							0,
							35
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				4382758607333792,
				[
				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					4050175913137128,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9488279758405914,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							4
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					5140330076574421,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							6
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					285670511364466,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							8
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8532892473200799,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							10
						]
					]
					]
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetOpacity,
					null,
					4333171060693241,
					false
					,[
					[
						0,
						[
							0,
							90
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8483448230695363,
				[
				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					7036012922120627,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetOpacity,
					null,
					6418052308788943,
					false
					,[
					[
						0,
						[
							0,
							100
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7427418143831361,
				[
				[
					80,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5772975107466885,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
				],
				[
				[
					80,
					cr.behaviors.EightDir.prototype.acts.SimulateControl,
					"8Direction",
					3161731638423457,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3261436241949394,
				[
				[
					80,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					3651746881433574,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				],
				[
				[
					80,
					cr.behaviors.EightDir.prototype.acts.SimulateControl,
					"8Direction",
					9469210492252251,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7884556904796012,
				[
				[
					83,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					260516211527767,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				],
				[
				[
					83,
					cr.behaviors.EightDir.prototype.acts.SimulateControl,
					"8Direction",
					4074705410511202,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7091128147436307,
				[
				[
					90,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					960533196312336,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
					]
				]
				],
				[
				[
					90,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					6101551884009776,
					false
					,[
					[
						0,
						[
							20,
							91,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					7940691875314474,
					false
					,[
					[
						0,
						[
							20,
							91,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9722865268680314,
				[
				[
					90,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					5582154897376228,
					false
					,[
					[
						1,
						[
							2,
							"transform"
						]
					]
					]
				]
				],
				[
				[
					90,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					5486230498941778,
					false
					,[
					[
						0,
						[
							5,
							[
								20,
								91,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								18
							]
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					1408683395898952,
					false
					,[
					[
						0,
						[
							20,
							91,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8261260916879022,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				2421860592650674,
				false
				,[
				[
					9,
					40
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7020439334703882,
				[
				[
					11,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					5890731311072548,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
					]
				]
,				[
					54,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					true,
					false,
					3092747137942398,
					false
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					true,
					false,
					8836107646107765,
					false
				]
,				[
					95,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					true,
					false,
					8517754236648672,
					false
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					3412450106149235,
					false
					,[
					[
						1,
						[
							2,
							"abajo"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.acts.SetHeight,
					null,
					4994497557383086,
					false
					,[
					[
						0,
						[
							0,
							15
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5160595330547445,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
				null,
				1,
				false,
				false,
				false,
				3973584750866184,
				false
				,[
				[
					9,
					40
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				3524431349613765,
				[
				[
					11,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					7848276586639378,
					false
					,[
					[
						1,
						[
							2,
							"abajo"
						]
					]
					]
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					773702509607153,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.acts.SetHeight,
					null,
					3138126002947086,
					false
					,[
					[
						0,
						[
							0,
							24
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1324210896895268,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				9995966631034981,
				false
				,[
				[
					9,
					37
				]
				]
			]
,			[
				54,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				1396046375769,
				false
			]
,			[
				49,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				9330390273551948,
				false
			]
,			[
				95,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				4755901562603753,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetMirrored,
				null,
				3213939504669063,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1176042250896108,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				6683413005475017,
				false
				,[
				[
					9,
					39
				]
				]
			]
,			[
				54,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				4300624610807641,
				false
			]
,			[
				49,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				6132938808857295,
				false
			]
,			[
				95,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				8748273778254124,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetMirrored,
				null,
				4409260717025039,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9889419916968054,
			[
			[
				11,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				7995025912265676,
				false
				,[
				[
					1,
					[
						2,
						"Run"
					]
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.cnds.IsTagPlaying,
				null,
				0,
				false,
				true,
				false,
				9083556225465468,
				false
				,[
				[
					1,
					[
						2,
						"step"
					]
				]
				]
			]
,			[
				54,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				5352944490052099,
				false
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				3618762885815794,
				false
				,[
				[
					2,
					["step2",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					1,
					[
						2,
						"step"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			5844943577475414,
			[
			[
				11,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				7800467385215272,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
,			[
				11,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				9312466842650259,
				false
				,[
				[
					1,
					[
						2,
						"Jump"
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Stop,
				null,
				7870380488044449,
				false
				,[
				[
					1,
					[
						2,
						"step"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7571476464085585,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				5945789796330333,
				false
				,[
				[
					9,
					38
				]
				]
			]
,			[
				11,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				true,
				false,
				1267243743940693,
				false
				,[
				[
					1,
					[
						2,
						"Jump"
					]
				]
				]
			]
,			[
				49,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				2779979521271709,
				false
			]
,			[
				54,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				3182038524911494,
				false
			]
,			[
				95,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				3591960078675528,
				false
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				3893823421695335,
				false
				,[
				[
					2,
					["jump",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						8
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9722981739886961,
			[
			[
				10,
				cr.behaviors.Platform.prototype.cnds.OnMove,
				"Platform",
				1,
				false,
				false,
				false,
				1987412577292057,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				4528818181069375,
				false
				,[
				[
					1,
					[
						2,
						"Run"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4152483298376583,
			[
			[
				10,
				cr.behaviors.Platform.prototype.cnds.OnStop,
				"Platform",
				1,
				false,
				false,
				false,
				3720137910390094,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				6753400063277411,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7285239793934307,
			[
			[
				10,
				cr.behaviors.Platform.prototype.cnds.OnJump,
				"Platform",
				1,
				false,
				false,
				false,
				3264740521824821,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				6229936912435591,
				false
				,[
				[
					1,
					[
						2,
						"Jump"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3088655191795476,
			[
			[
				10,
				cr.behaviors.Platform.prototype.cnds.OnFall,
				"Platform",
				1,
				false,
				false,
				false,
				4604350373981399,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				5368888212591405,
				false
				,[
				[
					1,
					[
						2,
						"Jump"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2005217095652077,
			[
			[
				10,
				cr.behaviors.Platform.prototype.cnds.OnLand,
				"Platform",
				1,
				false,
				false,
				false,
				9788228860577961,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8042456538406736,
				[
				[
					10,
					cr.behaviors.Platform.prototype.cnds.IsMoving,
					"Platform",
					0,
					false,
					false,
					false,
					1072022236382796,
					false
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					116674857426014,
					false
					,[
					[
						1,
						[
							2,
							"Run"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9262079969235746,
				[
				[
					10,
					cr.behaviors.Platform.prototype.cnds.IsMoving,
					"Platform",
					0,
					false,
					true,
					false,
					3240068965124589,
					false
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7586841247198973,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1270426960950905,
			[
			[
				12,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				5195779270824669,
				false
				,[
				[
					4,
					11
				]
				]
			]
			],
			[
			[
				18,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				4834249879317822,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				18,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				4202811327923053,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5342178300448774,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4548000352696435,
			[
			[
				18,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				4441600053491826,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3381017224887151,
				false
				,[
				[
					0,
					[
						0,
						2
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5035567466983244,
				false
				,[
				[
					11,
					"stars"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3294390760157051,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.RestartLayout,
				null,
				3150218323025802,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				7666506520411464,
				false
				,[
				[
					11,
					"gameover"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8074708156958836,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				4367211865772507,
				false
				,[
				[
					9,
					48
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				6696286234640196,
				false
				,[
				[
					11,
					"stars"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				427514880087147,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.RestartLayout,
				null,
				3546375197679425,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				6755898011728178,
				false
				,[
				[
					11,
					"gameover"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8146152318187228,
				false
				,[
				[
					11,
					"boss_lifes"
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				363165374776645,
				false
				,[
				[
					10,
					4
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4619116564924613,
			[
			[
				13,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				1052243369236979,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"up"
					]
				]
				]
			]
			],
			[
			[
				13,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				4079793361132459,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7833519241269829,
			[
			[
				13,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				3117448674746386,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"down"
					]
				]
				]
			]
			],
			[
			[
				13,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				3471429264225368,
				false
				,[
				[
					3,
					3
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5008332706096169,
			[
			[
				73,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				3508100811791565,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"up"
					]
				]
				]
			]
			],
			[
			[
				73,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				2137605146507805,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6293574354026319,
			[
			[
				73,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				3818106558131919,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"down"
					]
				]
				]
			]
			],
			[
			[
				73,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				4281267135920483,
				false
				,[
				[
					3,
					3
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8931141175524327,
			[
			[
				78,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2356577833890161,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"up"
					]
				]
				]
			]
			],
			[
			[
				78,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				1376469005990701,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2081011440338627,
			[
			[
				78,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				3034807196066507,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"down"
					]
				]
				]
			]
			],
			[
			[
				78,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				8957718715582373,
				false
				,[
				[
					3,
					3
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2094232238122109,
			[
			[
				46,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				6336947456606221,
				false
				,[
				[
					10,
					1
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"up"
					]
				]
				]
			]
			],
			[
			[
				46,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				2275733617296365,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4690710745726471,
			[
			[
				46,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				7256101441309055,
				false
				,[
				[
					10,
					1
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"down"
					]
				]
				]
			]
			],
			[
			[
				46,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				9419461567076212,
				false
				,[
				[
					3,
					3
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5598345199760001,
			[
			[
				33,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				7973400518187581,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"up"
					]
				]
				]
			]
			],
			[
			[
				33,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				3625436163212811,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			856213510617829,
			[
			[
				33,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2465319236238696,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"down"
					]
				]
				]
			]
			],
			[
			[
				33,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				833121543267412,
				false
				,[
				[
					3,
					3
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8415418547453109,
			[
			[
				33,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				1237316728554646,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"left"
					]
				]
				]
			]
			],
			[
			[
				33,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				1916205457631586,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4881049975693972,
			[
			[
				33,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				1560661921026271,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"right"
					]
				]
				]
			]
			],
			[
			[
				33,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				8721109090003642,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1756402058519467,
			[
			[
				22,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4341702789223595,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"left"
					]
				]
				]
			]
			],
			[
			[
				22,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				488017215323941,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8118410681209694,
			[
			[
				22,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4667388465909282,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"right"
					]
				]
				]
			]
			],
			[
			[
				22,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				1459889132605126,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7640772460896505,
			[
			[
				78,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				2433756244440499,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				1133757710769756,
				[
				[
					78,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6706005006931561,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1319768209592448,
					[
					[
						78,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						144740199744037,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
					],
					[
					[
						78,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						704643636599653,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
,					[
						78,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2011259716344777,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						true,
						null,
						9260181024009404,
						[
						[
							10,
							cr.plugins_.Sprite.prototype.cnds.CompareY,
							null,
							0,
							false,
							false,
							false,
							162599409853121,
							false
							,[
							[
								8,
								4
							]
,							[
								0,
								[
									0,
									670
								]
							]
							]
						]
,						[
							10,
							cr.plugins_.Sprite.prototype.cnds.CompareX,
							null,
							0,
							false,
							false,
							false,
							7255180792281265,
							false
							,[
							[
								8,
								4
							]
,							[
								0,
								[
									0,
									2000
								]
							]
							]
						]
						],
						[
						[
							78,
							cr.plugins_.Sprite.prototype.acts.SetOpacity,
							null,
							4980857505607702,
							false
							,[
							[
								0,
								[
									0,
									100
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2151516586308195,
				[
				[
					78,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6295153993541215,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5766135530387119,
					[
					[
						78,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6195262432393017,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
					],
					[
					[
						78,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2028592291632052,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
,					[
						78,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7618379930764336,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						78,
						cr.plugins_.Sprite.prototype.acts.SetOpacity,
						null,
						5020218233258975,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7830317178544456,
				[
				[
					78,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5638211719361293,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					78,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7281073617966817,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1870982863765103,
			[
			[
				73,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				8349025775558991,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7649227242158611,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					60205683202919,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5081007635603912,
					[
					[
						73,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2127900109636697,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
					],
					[
					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2251764378228953,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
,					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7978302627102911,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						9180829136629492,
						false
						,[
						[
							0,
							[
								1,
								0.3
							]
						]
						]
					]
,					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetFlipped,
						null,
						5068520023881683,
						false
						,[
						[
							3,
							0
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4048778059244393,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2126668120078198,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1151742936097079,
					[
					[
						73,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9621089047076645,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
					],
					[
					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						9136982752465507,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
,					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1080947017912677,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetFlipped,
						null,
						4451197316055189,
						false
						,[
						[
							3,
							1
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						3703840536087889,
						[
						[
							89,
							cr.plugins_.Sprite.prototype.cnds.IsVisible,
							null,
							0,
							false,
							false,
							false,
							2274435226779349,
							false
						]
						],
						[
						[
							73,
							cr.plugins_.Sprite.prototype.acts.SetOpacity,
							null,
							5566773400358377,
							false
							,[
							[
								0,
								[
									0,
									0
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7308704083276237,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4257971551950411,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5248185305155857,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7567847142215287,
			[
			[
				13,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				8591451068966211,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8701523289117517,
				[
				[
					13,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					8611449721114887,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1269802326486414,
					[
					[
						13,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8254450575634342,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
					],
					[
					[
						13,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2686107148377214,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
,					[
						13,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2487532650494379,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1506615771159983,
				[
				[
					13,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					7147694745692181,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5417729178927973,
					[
					[
						13,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						732528166118009,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
					],
					[
					[
						13,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2620959018804959,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
,					[
						13,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5117786477663025,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2983243342880077,
				[
				[
					13,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9884310621784993,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					13,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					611253809426134,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8392240542782935,
			[
			[
				33,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3065775904806264,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				2424710420582047,
				[
				[
					33,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5297339310476255,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1170442060194017,
					[
					[
						33,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2589410513158079,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
					],
					[
					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2784559362726763,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7749779833082435,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2253829085782066,
					[
					[
						33,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3024480936502424,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
					],
					[
					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8554430207588417,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1593551853390416,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9726231167169547,
				[
				[
					33,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					3117075312303966,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					2012837468965197,
					[
					[
						33,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9902945174996181,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
					],
					[
					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8784908483833631,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1887569647430979,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8026173824238796,
					[
					[
						33,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						5463854933919214,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
					],
					[
					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1297097739610386,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6643743264294259,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7990062186809993,
				[
				[
					33,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1751330003786804,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7078264192092873,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5404143996363857,
			[
			[
				46,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				2191519137724302,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7891335373784029,
				[
				[
					46,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					3496517503728418,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					926328635436801,
					[
					[
						46,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4828748760475371,
						false
						,[
						[
							10,
							1
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"up"
							]
						]
						]
					]
					],
					[
					[
						46,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2321684631557165,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						46,
						cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
						"8Direction",
						6872112794014304,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						2419341075860638,
						false
						,[
						[
							0,
							[
								0,
								2
							]
						]
						]
					]
,					[
						46,
						cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
						"8Direction",
						5711338171926735,
						false
						,[
						[
							0,
							[
								0,
								300
							]
						]
						]
					]
,					[
						46,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2047320813298984,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9563791268119414,
				[
				[
					46,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					7097978908126389,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1183531450273502,
					[
					[
						46,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						289421800937435,
						false
						,[
						[
							10,
							1
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"down"
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						7837087878827981,
						[
						[
							46,
							cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
							null,
							0,
							false,
							false,
							false,
							9660318156371425,
							false
						]
						],
						[
						[
							46,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							5406989970793165,
							false
							,[
							[
								10,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							46,
							cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
							"8Direction",
							6894873244205318,
							false
							,[
							[
								0,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							5099678783295385,
							false
							,[
							[
								0,
								[
									0,
									2
								]
							]
							]
						]
,						[
							5,
							cr.plugins_.Audio.prototype.acts.Play,
							null,
							7995061791937915,
							false
							,[
							[
								2,
								["pum",false]
							]
,							[
								3,
								0
							]
,							[
								0,
								[
									0,
									-5
								]
							]
,							[
								1,
								[
									2,
									"all"
								]
							]
							]
						]
,						[
							10,
							cr.behaviors.scrollto.prototype.acts.Shake,
							"ScrollTo",
							2716257560994723,
							false
							,[
							[
								0,
								[
									0,
									5
								]
							]
,							[
								0,
								[
									0,
									1
								]
							]
,							[
								3,
								0
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							5220739284459737,
							false
							,[
							[
								0,
								[
									0,
									1
								]
							]
							]
						]
,						[
							5,
							cr.plugins_.Audio.prototype.acts.Play,
							null,
							1665066778839758,
							false
							,[
							[
								2,
								["jump",false]
							]
,							[
								3,
								0
							]
,							[
								0,
								[
									0,
									0
								]
							]
,							[
								1,
								[
									2,
									"all"
								]
							]
							]
						]
,						[
							46,
							cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
							"8Direction",
							3666681595542598,
							false
							,[
							[
								0,
								[
									0,
									300
								]
							]
							]
						]
,						[
							46,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							2917606154102687,
							false
							,[
							[
								10,
								1
							]
,							[
								7,
								[
									2,
									"up"
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						3955810256807661,
						[
						[
							46,
							cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
							null,
							0,
							false,
							true,
							false,
							8572451343906438,
							false
						]
						],
						[
						[
							46,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							3560094002150459,
							false
							,[
							[
								10,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							46,
							cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
							"8Direction",
							2006899771197427,
							false
							,[
							[
								0,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							3590684678818991,
							false
							,[
							[
								0,
								[
									0,
									2
								]
							]
							]
						]
,						[
							46,
							cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
							"8Direction",
							9615180949185776,
							false
							,[
							[
								0,
								[
									0,
									300
								]
							]
							]
						]
,						[
							46,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							3209849184201936,
							false
							,[
							[
								10,
								1
							]
,							[
								7,
								[
									2,
									"up"
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4834890045678358,
				[
				[
					46,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1529779238296337,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					46,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					6289135210146838,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8927082642986788,
			[
			[
				22,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				6123489876368798,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9381082835656825,
				[
				[
					22,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1198077133728705,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					6967134240161318,
					[
					[
						22,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6910953986229964,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
					],
					[
					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3784768784843649,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
,					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8820335912500309,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetMirrored,
						null,
						7073680228595231,
						false
						,[
						[
							3,
							0
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6918652691052414,
				[
				[
					22,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					788378764211741,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					2160883751576256,
					[
					[
						22,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6857986592348956,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
					],
					[
					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3729760552943428,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
,					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						683532003545214,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetMirrored,
						null,
						1773288296437215,
						false
						,[
						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7871355381819666,
				[
				[
					22,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9453349079873381,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					22,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4381620549493033,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2516410452279278,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				1227173545832857,
				false
				,[
				[
					4,
					19
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				2141213711416661,
				false
				,[
				[
					2,
					["coin2",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-4
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				19,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				2296768849978423,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				116157800555676,
				false
				,[
				[
					11,
					"coins"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				7343452973720382,
				false
				,[
				[
					11,
					"score"
				]
,				[
					7,
					[
						0,
						100
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1191872646561262,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				7547517245271882,
				false
				,[
				[
					4,
					82
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				8881163475764962,
				false
				,[
				[
					2,
					["heart",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-6
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				82,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				3694137328340443,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				346500400788941,
				false
				,[
				[
					11,
					"score"
				]
,				[
					7,
					[
						0,
						100
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				4733716778289943,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2936143054584332,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					8517051474257045,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6300048302465403,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				7158376925728636,
				false
				,[
				[
					4,
					35
				]
				]
			]
			],
			[
			[
				35,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				3264074345700249,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				4269840831462257,
				false
				,[
				[
					11,
					"stars"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				2115535779778322,
				false
				,[
				[
					11,
					"score"
				]
,				[
					7,
					[
						0,
						500
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				8694436225423932,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2164552490714118,
					false
					,[
					[
						11,
						"stars"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					6762719631150749,
					false
					,[
					[
						2,
						["star",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							-7
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8682418657104324,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6238432163748473,
					false
					,[
					[
						11,
						"stars"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					5362590676890159,
					false
					,[
					[
						2,
						["starcomplete",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							-7
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3764224645574453,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				5542135204727847,
				false
				,[
				[
					4,
					101
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				9220288769397516,
				false
				,[
				[
					2,
					["heart",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-6
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				101,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				5220041547950633,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				2474996790058434,
				false
				,[
				[
					11,
					"score"
				]
,				[
					7,
					[
						0,
						100
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				4264150389382527,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					802565323092151,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					2274153304636166,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8674547506298623,
			[
			[
				17,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				7033114447996207,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						4
					]
				]
				]
			]
,			[
				10,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				7918028895073966,
				false
				,[
				[
					4,
					32
				]
				]
			]
			],
			[
			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				9994953352718355,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9489977226514697,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				true,
				false,
				1668607123261875,
				false
				,[
				[
					4,
					32
				]
				]
			]
			],
			[
			[
				32,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				4542318886497188,
				false
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				2855916268334846,
				[
				[
					96,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					8801143581159719,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					514709239965597,
					false
					,[
					[
						0,
						[
							1,
							0.15
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					1322257293301212,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetEnabled,
					"Platform",
					6436049969811981,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6581747653773257,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				2363506326936727,
				false
				,[
				[
					4,
					39
				]
				]
			]
,			[
				38,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				5105173122176236,
				false
			]
			],
			[
			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				1415166348206709,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				38,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				3786935125277985,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				3124379262407568,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1898793700851266,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							256
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					5144916699552956,
					false
					,[
					[
						0,
						[
							0,
							392
						]
					]
,					[
						0,
						[
							0,
							210
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5169030109667156,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8164372694551466,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							480
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					6620033076011471,
					false
					,[
					[
						0,
						[
							0,
							656
						]
					]
,					[
						0,
						[
							0,
							341
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7088116658258208,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					710825835142617,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							1588
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					6618824586494721,
					false
					,[
					[
						0,
						[
							0,
							1780
						]
					]
,					[
						0,
						[
							0,
							319
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9728282055144093,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4590492964339573,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							1912
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8728991380094577,
					false
					,[
					[
						0,
						[
							0,
							2160
						]
					]
,					[
						0,
						[
							0,
							143
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4911506309224839,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				8791210768968065,
				false
				,[
				[
					4,
					39
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				5878461127116938,
				false
			]
			],
			[
			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				1824513215873812,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				1904143950422292,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				6058215896824767,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				5158688990243677,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4699037397567541,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							160
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					5529231419471745,
					false
					,[
					[
						0,
						[
							0,
							408
						]
					]
,					[
						0,
						[
							0,
							418
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6072740169951281,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1541561902887296,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							826
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7724289618241166,
					false
					,[
					[
						0,
						[
							0,
							1004
						]
					]
,					[
						0,
						[
							0,
							319
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7922624695481521,
				[
				[
					39,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4452475719005171,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							1404
						]
					]
					]
				]
				],
				[
				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7628192854566516,
					false
					,[
					[
						0,
						[
							0,
							1404
						]
					]
,					[
						0,
						[
							0,
							209
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3483584381340953,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					9783902556752569,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4361884173733043,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3719735281422698,
				false
				,[
				[
					4,
					39
				]
				]
			]
			],
			[
			[
				83,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				240743062828216,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						2,
						"left"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2203744667066426,
			[
			[
				42,
				cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
				null,
				0,
				false,
				true,
				false,
				5184299805886977,
				false
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.cnds.CompareX,
				null,
				0,
				false,
				false,
				false,
				8799590691586445,
				false
				,[
				[
					8,
					2
				]
,				[
					0,
					[
						20,
						10,
						cr.plugins_.Sprite.prototype.exps.X,
						false,
						null
					]
				]
				]
			]
			],
			[
			[
				38,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				1925744506399883,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				3002254342503439,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				7437398622528932,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				6591819967167616,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7516505810022593,
			[
			[
				42,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				6436888282697543,
				false
				,[
				[
					4,
					30
				]
				]
			]
			],
			[
			[
				38,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				705013976728751,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				757031638236721,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				4127937096216164,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				1369031586924294,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4719168737141876,
			[
			[
				83,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				9701532481494738,
				false
				,[
				[
					4,
					30
				]
				]
			]
			],
			[
			[
				83,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				7190063419909285,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9431269824888831,
			[
			[
				38,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				9208918407170867,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				4545456072203999,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				1823734567244428,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				3877325873529722,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				659062398668631,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				3917686886478201,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				5083585195863448,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6014718663891607,
			[
			[
				55,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				9985668609650576,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				816105439208617,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				666072903113462,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				9851403689038344,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				6317590341695865,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				4847075274447204,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				1455687380690847,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6876354081363813,
			[
			[
				22,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				704279306232109,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				5358781393843784,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				680633990007821,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				725710819490985,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				7347334194586985,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				1542443466446614,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				1623814433865334,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7952434026419586,
			[
			[
				73,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				7890854158075795,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				8426177020105052,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				73,
				cr.plugins_.Sprite.prototype.cnds.CompareOpacity,
				null,
				0,
				false,
				false,
				false,
				4419315674210826,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						100
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9259206257744926,
				[
				[
					89,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					true,
					false,
					505579388533037,
					false
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					861618634100607,
					false
					,[
					[
						2,
						["damage",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							-5
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.scrollto.prototype.acts.Shake,
					"ScrollTo",
					6231556421119569,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
,					[
						0,
						[
							1,
							0.4
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SubVar,
					null,
					3867632405262039,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.acts.StartAnim,
					null,
					4132972721719881,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					8126890126356366,
					false
					,[
					[
						3,
						2
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4831595813155757,
				[
				[
					89,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					9278629249671839,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5825902356153037,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1077408871359051,
						false
						,[
						[
							10,
							4
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						6216092571140949,
						false
						,[
						[
							2,
							["damage",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-5
							]
						]
,						[
							1,
							[
								2,
								"all"
							]
						]
						]
					]
,					[
						10,
						cr.behaviors.scrollto.prototype.acts.Shake,
						"ScrollTo",
						4356182461890475,
						false
						,[
						[
							0,
							[
								0,
								5
							]
						]
,						[
							0,
							[
								1,
								0.4
							]
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SubVar,
						null,
						1084666854833723,
						false
						,[
						[
							11,
							"lifes"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.Sprite.prototype.acts.StartAnim,
						null,
						453572629230876,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						10,
						cr.behaviors.Platform.prototype.acts.SimulateControl,
						"Platform",
						5506122703326088,
						false
						,[
						[
							3,
							2
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9498673431322589,
			[
			[
				83,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3973523813181567,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				1885742881002459,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				3819985346938892,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				4143252535418416,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				7512344372308125,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				8310925687391014,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				491532214974437,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1519379921670697,
			[
			[
				78,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				7567470676958723,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				78,
				cr.plugins_.Sprite.prototype.cnds.CompareOpacity,
				null,
				0,
				false,
				false,
				false,
				8149002477796189,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				3182335928445875,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				5118128049355472,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				7274530012827303,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				7621934948874218,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				6263568124537438,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				1008948987659807,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8942120220211752,
			[
			[
				81,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				2188095065677515,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				7454381258346026,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				6362919334032671,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				4415835648517105,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				1441380298155755,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				8623868347999571,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				6660800959450091,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4291582286114082,
			[
			[
				77,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				1789427428762684,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				3451726083299314,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				5668944181043974,
				false
				,[
				[
					2,
					["damage",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				9786281287226249,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SubVar,
				null,
				4658288251625458,
				false
				,[
				[
					11,
					"lifes"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.StartAnim,
				null,
				8006255900898638,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				1896248403647564,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5093821851852116,
			[
			[
				41,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				5025953466935253,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				41,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				3570295237943839,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8966640769213813,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				7945916720865141,
				false
				,[
				[
					4,
					46
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9968330594550944,
				[
				[
					46,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					176490025277669,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							4,
							[
								20,
								45,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								10
							]
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					4996852833244238,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					2548218998146408,
					false
					,[
					[
						0,
						[
							0,
							600
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					9458022043901602,
					false
					,[
					[
						3,
						2
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5692158977368504,
				[
				[
					46,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					2555853972418593,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							4,
							[
								20,
								45,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								10
							]
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					9796527864630645,
					false
					,[
					[
						3,
						2
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					1036224593547431,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					6886838696450116,
					false
					,[
					[
						0,
						[
							0,
							200
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3851448505766235,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				8023987198054716,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				9225931642929057,
				false
				,[
				[
					11,
					"stars"
				]
,				[
					8,
					5
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
			],
			[
			[
				49,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				956305396224255,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				49,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				8594475336559242,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
				"Platform",
				3968892850224539,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.StopAll,
				null,
				8545013528865487,
				false
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				3188513673015016,
				false
				,[
				[
					2,
					["cleared",true]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-2
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1480693277885396,
			[
			[
				49,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				8807118171597997,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				49,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				4675206577570214,
				false
				,[
				[
					1,
					[
						2,
						"loop"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				3704667807288155,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				4393732812591299,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				9357295244772061,
				false
				,[
				[
					0,
					[
						1,
						0.02
					]
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				2434756140427998,
				false
				,[
				[
					0,
					[
						0,
						10
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				8522928716716129,
				false
				,[
				[
					0,
					[
						1,
						0.02
					]
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				7402758404499662,
				false
				,[
				[
					0,
					[
						0,
						15
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				8356947517056619,
				false
				,[
				[
					0,
					[
						1,
						0.02
					]
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				6190946455656302,
				false
				,[
				[
					0,
					[
						0,
						20
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				5581561872784615,
				false
				,[
				[
					0,
					[
						1,
						0.02
					]
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				5543109134488123,
				false
				,[
				[
					0,
					[
						0,
						25
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				1084364017086379,
				false
				,[
				[
					0,
					[
						1,
						0.02
					]
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				1237035078613813,
				false
				,[
				[
					0,
					[
						0,
						30
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				8663702776388865,
				false
				,[
				[
					0,
					[
						1,
						0.02
					]
				]
				]
			]
,			[
				50,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				275324447034661,
				false
				,[
				[
					0,
					[
						0,
						35
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4948834567565362,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				5541345545191472,
				false
				,[
				[
					9,
					32
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				964472584006437,
				[
				[
					7,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					8926642889546205,
					false
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					5218859087034918,
					false
					,[
					[
						1,
						[
							2,
							"loop"
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					5621978967512054,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					4395251802539286,
					false
					,[
					[
						1,
						[
							2,
							"final"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8393493083901725,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					4065800255867788,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					7974292306061268,
					false
					,[
					[
						6,
						"2level-cave"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3040674215087297,
				[
				[
					56,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					6274799345490828,
					false
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					23253937164486,
					false
					,[
					[
						1,
						[
							2,
							"loop"
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2057023524375223,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					1801398143948728,
					false
					,[
					[
						1,
						[
							2,
							"final"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2022147617970866,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					1975832264822676,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					2411837014379937,
					false
					,[
					[
						6,
						"3level-snow"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5005796925872917,
				[
				[
					27,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					1801906931940378,
					false
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					9187097429128469,
					false
					,[
					[
						1,
						[
							2,
							"loop"
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2362910211531642,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					390163034557187,
					false
					,[
					[
						1,
						[
							2,
							"final"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9432078249454621,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					9909681125495461,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					1577688677296457,
					false
					,[
					[
						6,
						"4level-volcano"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2155688283291253,
				[
				[
					69,
					cr.plugins_.TiledBg.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					62192313493133,
					false
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					2945808629424103,
					false
					,[
					[
						1,
						[
							2,
							"loop"
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					8109063273018521,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6621671750059524,
					false
					,[
					[
						1,
						[
							2,
							"final"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2568366920584515,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					2515759218532727,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					395720799670882,
					false
					,[
					[
						6,
						"5level-boss"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				312785064010533,
				[
				[
					89,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					1054138024905799,
					false
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					9586999807547954,
					false
					,[
					[
						1,
						[
							2,
							"loop"
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					316626862006702,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					4202763336819901,
					false
					,[
					[
						1,
						[
							2,
							"final"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9456356942107563,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					6120810394248675,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					8064914347774797,
					false
					,[
					[
						6,
						"6level-theend"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				736218590752265,
				[
				[
					96,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					2534615371616526,
					false
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					3920311143751027,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					97,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					1595505827602773,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					97,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					9474115773895984,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9820968867785576,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					8550969328119137,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					8209550372404856,
					false
					,[
					[
						6,
						"0main-screen"
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6056008714535332,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				500700073919005,
				false
				,[
				[
					9,
					32
				]
				]
			]
,			[
				49,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				7002579619081558,
				false
			]
,			[
				18,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				1162231035849066,
				false
			]
,			[
				17,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				9569579963881023,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						7
					]
				]
				]
			]
,			[
				95,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				5181430312738793,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8979360942497104,
				[
				[
					54,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					8306918927329891,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					9911222226289592,
					[
					[
						54,
						cr.plugins_.Sprite.prototype.cnds.IsVisible,
						null,
						0,
						false,
						true,
						false,
						1542438169563825,
						false
					]
					],
					[
					[
						54,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						1499392447597864,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						8818203931557191,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						54,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8813773630112266,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						6961544193762698,
						false
						,[
						[
							2,
							["pause",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-6
							]
						]
,						[
							1,
							[
								2,
								"pause"
							]
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.SetMuted,
						null,
						4050552344409275,
						false
						,[
						[
							1,
							[
								2,
								"all"
							]
						]
,						[
							3,
							0
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3835622952175357,
				[
				[
					54,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9793878352957104,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5797740562944798,
					[
					[
						54,
						cr.plugins_.Sprite.prototype.cnds.IsVisible,
						null,
						0,
						false,
						false,
						false,
						394663679802464,
						false
					]
					],
					[
					[
						54,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						2795790799042163,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						9313517804079418,
						false
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						54,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5956226395979097,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.SetMuted,
						null,
						9653882872509045,
						false
						,[
						[
							1,
							[
								2,
								"all"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						8498728681768265,
						false
						,[
						[
							2,
							["pause",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-6
							]
						]
,						[
							1,
							[
								2,
								"pause"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5224957444737934,
				[
				[
					54,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4977987962791415,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					54,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					6760380200611128,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4649302487037684,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				194149176336571,
				false
				,[
				[
					4,
					58
				]
				]
			]
			],
			[
			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				9163914544966054,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				5324890271133335,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				7275458322199257,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				1385198981188741,
				false
				,[
				[
					0,
					[
						0,
						408
					]
				]
,				[
					0,
					[
						0,
						418
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				4984106798726656,
				[
				[
					58,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					7917003172591942,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							704
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					7416456554433174,
					false
					,[
					[
						0,
						[
							0,
							195
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					3201862596371514,
					[
					[
						19,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						3598864603164662,
						false
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								0,
								600
							]
						]
						]
					]
					],
					[
					[
						19,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						9527837098490738,
						false
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8721920546837464,
				[
				[
					58,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4153527469342985,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							0,
							1350
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					2593409166408112,
					false
					,[
					[
						0,
						[
							0,
							698
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					9578495328691817,
					[
					[
						19,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						8363807216534494,
						false
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								0,
								600
							]
						]
						]
					]
					],
					[
					[
						19,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8350873673845798,
						false
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9091937703001701,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				860437657826406,
				false
				,[
				[
					4,
					60
				]
				]
			]
			],
			[
			[
				10,
				cr.behaviors.Platform.prototype.acts.SetGravity,
				"Platform",
				6721446843931881,
				false
				,[
				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
				"Platform",
				525754311332418,
				false
				,[
				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetJumpStrength,
				"Platform",
				7149742382288719,
				false
				,[
				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
				"Platform",
				9281484699560294,
				false
				,[
				[
					0,
					[
						0,
						50
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetAcceleration,
				"Platform",
				855204550242652,
				false
				,[
				[
					0,
					[
						0,
						5000
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetDeceleration,
				"Platform",
				4919153886053031,
				false
				,[
				[
					0,
					[
						0,
						5000
					]
				]
				]
			]
,			[
				11,
				cr.plugins_.Sprite.prototype.acts.MoveToBottom,
				null,
				6271637957703282,
				false
			]
,			[
				61,
				cr.plugins_.Particles.prototype.acts.SetRate,
				null,
				23146601873422,
				false
				,[
				[
					0,
					[
						0,
						4
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				4017476852085547,
				false
				,[
				[
					11,
					"agua"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			812726237507106,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				3934348242203574,
				false
				,[
				[
					9,
					38
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.cnds.IsOnFloor,
				"Platform",
				0,
				false,
				true,
				false,
				7131767482891267,
				false
			]
,			[
				10,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				3043434929815773,
				false
				,[
				[
					4,
					60
				]
				]
			]
			],
			[
			[
				10,
				cr.behaviors.Platform.prototype.acts.SetVectorY,
				"Platform",
				9745159613815702,
				false
				,[
				[
					0,
					[
						0,
						-90
					]
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				9302151911694618,
				false
				,[
				[
					2,
					["swim",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			648526036533548,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				5191149607660866,
				false
				,[
				[
					4,
					59
				]
				]
			]
			],
			[
			[
				10,
				cr.behaviors.Platform.prototype.acts.SetGravity,
				"Platform",
				1519680728860183,
				false
				,[
				[
					0,
					[
						0,
						900
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
				"Platform",
				5364092208034004,
				false
				,[
				[
					0,
					[
						0,
						1000
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetJumpStrength,
				"Platform",
				5333049141068166,
				false
				,[
				[
					0,
					[
						0,
						300
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
				"Platform",
				6995489699183148,
				false
				,[
				[
					0,
					[
						0,
						120
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetAcceleration,
				"Platform",
				2546287401060314,
				false
				,[
				[
					0,
					[
						0,
						1000
					]
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetDeceleration,
				"Platform",
				763694421437294,
				false
				,[
				[
					0,
					[
						0,
						1000
					]
				]
				]
			]
,			[
				11,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2218192345285936,
				false
			]
,			[
				61,
				cr.plugins_.Particles.prototype.acts.SetRate,
				null,
				8920994442916782,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				3273372444285139,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3210636228391056,
					false
					,[
					[
						11,
						"agua"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					9488996703167336,
					false
					,[
					[
						0,
						[
							0,
							-350
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					5661069474131064,
					false
					,[
					[
						2,
						["jump",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							8
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5393316423592673,
					false
					,[
					[
						11,
						"agua"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			56294469286506,
			[
			[
				56,
				cr.plugins_.TiledBg.prototype.cnds.IsVisible,
				null,
				0,
				false,
				false,
				false,
				4125312058572094,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9543349178580735,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					6784505511734905,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							1012
						]
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					1589345278552393,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							286
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetGravity,
					"Platform",
					4554239036321913,
					false
					,[
					[
						0,
						[
							0,
							900
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
					"Platform",
					7481443813760787,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					2785810841882379,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					7171605150810896,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					4500358986682104,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					3440805096293451,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					6276838656904785,
					false
				]
,				[
					61,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					1761181885725232,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					549350031076242,
					false
					,[
					[
						11,
						"agua"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3267903727429784,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					8955506128299757,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							108
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetGravity,
					"Platform",
					6561235035001327,
					false
					,[
					[
						0,
						[
							0,
							900
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
					"Platform",
					6515493421431331,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					4534904609454118,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					1740351912982251,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					5861249664146599,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					4824923451767273,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					7525863229829641,
					false
				]
,				[
					61,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					2185491883794061,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7637436816780054,
					false
					,[
					[
						11,
						"agua"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7672336102817292,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					6987879791488295,
					false
					,[
					[
						8,
						5
					]
,					[
						0,
						[
							0,
							1244
						]
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					5566257569837652,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							462
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetGravity,
					"Platform",
					4189588433978189,
					false
					,[
					[
						0,
						[
							0,
							900
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
					"Platform",
					9942875328018591,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					4813690793596877,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					3616513337979411,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					70248156756684,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					9710569841811198,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					5067914470745446,
					false
				]
,				[
					61,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					2019023253284812,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5104349093288028,
					false
					,[
					[
						11,
						"agua"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4984339162456599,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1161732768441384,
					false
					,[
					[
						8,
						5
					]
,					[
						0,
						[
							0,
							2008
						]
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					2919952178018026,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							544
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetGravity,
					"Platform",
					5085648937573795,
					false
					,[
					[
						0,
						[
							0,
							900
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
					"Platform",
					6982920017930801,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetJumpStrength,
					"Platform",
					8248611380450852,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
					"Platform",
					5498072332763924,
					false
					,[
					[
						0,
						[
							0,
							120
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetAcceleration,
					"Platform",
					3886660848041918,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetDeceleration,
					"Platform",
					2637325473304858,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					6005072539767142,
					false
				]
,				[
					61,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					5684125755906276,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9200275717080803,
					false
					,[
					[
						11,
						"agua"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1936329329881193,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				1208549905111356,
				false
				,[
				[
					4,
					76
				]
				]
			]
			],
			[
			[
				10,
				cr.behaviors.scrollto.prototype.acts.Shake,
				"ScrollTo",
				4432034295500299,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						1,
						0.4
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				3784814704554496,
				false
				,[
				[
					2,
					["pum",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-7
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				1426621349204312,
				false
				,[
				[
					0,
					[
						1,
						0.3
					]
				]
				]
			]
,			[
				76,
				cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
				"Platform",
				8270710939289267,
				false
				,[
				[
					0,
					[
						0,
						12
					]
				]
				]
			]
,			[
				76,
				cr.behaviors.Platform.prototype.acts.SetGravity,
				"Platform",
				8071399943293128,
				false
				,[
				[
					0,
					[
						0,
						500
					]
				]
				]
			]
,			[
				76,
				cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
				"Platform",
				5214863211396106,
				false
				,[
				[
					0,
					[
						0,
						35
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			6556168097089944,
			[
			[
				76,
				cr.plugins_.Sprite.prototype.cnds.CompareX,
				null,
				0,
				false,
				false,
				false,
				1074783116732468,
				false
				,[
				[
					8,
					2
				]
,				[
					0,
					[
						5,
						[
							20,
							11,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
						,[
							0,
							200
						]
					]
				]
				]
			]
,			[
				76,
				cr.plugins_.Sprite.prototype.cnds.CompareX,
				null,
				0,
				false,
				false,
				false,
				623347423781508,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						4,
						[
							20,
							11,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
						,[
							0,
							200
						]
					]
				]
				]
			]
			],
			[
			[
				76,
				cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
				"Platform",
				8892733969912127,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				76,
				cr.behaviors.Platform.prototype.acts.SetGravity,
				"Platform",
				2264411509744581,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				76,
				cr.behaviors.Platform.prototype.acts.SetMaxFallSpeed,
				"Platform",
				4845539967077248,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				9009485593491841,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8794100614855192,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							580
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					9241816396214519,
					false
					,[
					[
						0,
						[
							0,
							704
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3609781983252195,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					2054431219408716,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							648
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					4416056284729139,
					false
					,[
					[
						0,
						[
							0,
							693
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2499929500357689,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					5404240415803684,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							712
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					7884015603848915,
					false
					,[
					[
						0,
						[
							0,
							726
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				209123504050771,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8953089986252387,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2364
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					2390072943085314,
					false
					,[
					[
						0,
						[
							0,
							615
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1737795504501347,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4254233851309405,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2406
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					1569948537651586,
					false
					,[
					[
						0,
						[
							0,
							725
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3978644844365197,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					9053027699818428,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2448
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					3478326135547264,
					false
					,[
					[
						0,
						[
							0,
							615
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3072837288925038,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1138941318558502,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2492
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					7454033917332364,
					false
					,[
					[
						0,
						[
							0,
							726
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4789037655080604,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4416608509001423,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2532
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					27181522411947,
					false
					,[
					[
						0,
						[
							0,
							615
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9884012489707794,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					3809625653981981,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2576
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					7536671036051868,
					false
					,[
					[
						0,
						[
							0,
							726
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7904934486962653,
				[
				[
					76,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8978066986009297,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2612
						]
					]
					]
				]
				],
				[
				[
					76,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					5864861977336689,
					false
					,[
					[
						0,
						[
							0,
							615
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3385891377600891,
			[
			[
				10,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				9661297296840274,
				false
				,[
				[
					4,
					80
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				570907101403808,
				[
				[
					80,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4685153753108937,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							1308
						]
					]
					]
				]
,				[
					80,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4737226193621152,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"stop"
						]
					]
					]
				]
				],
				[
				[
					80,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3333122087899555,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9429826098809972,
				[
				[
					80,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					5070835116056397,
					false
					,[
					[
						8,
						5
					]
,					[
						0,
						[
							0,
							2082
						]
					]
					]
				]
,				[
					80,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9981929980296429,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"stop"
						]
					]
					]
				]
				],
				[
				[
					80,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5001825066240968,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3520830359424728,
			[
			[
				80,
				cr.plugins_.Sprite.prototype.cnds.CompareX,
				null,
				0,
				false,
				false,
				false,
				7440612442306308,
				false
				,[
				[
					8,
					5
				]
,				[
					0,
					[
						0,
						2082
					]
				]
				]
			]
,			[
				80,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9085209819656247,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"right"
					]
				]
				]
			]
			],
			[
			[
				80,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				4953047296113451,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						2,
						"stop"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6141760457432728,
			[
			[
				80,
				cr.plugins_.Sprite.prototype.cnds.CompareX,
				null,
				0,
				false,
				false,
				false,
				7212688449535054,
				false
				,[
				[
					8,
					3
				]
,				[
					0,
					[
						0,
						1308
					]
				]
				]
			]
,			[
				80,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9930734726074525,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"left"
					]
				]
				]
			]
			],
			[
			[
				80,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				304247869632251,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						2,
						"stop"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			397248822700366,
			[
			[
				90,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				254207751056653,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				633685024147808,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						9
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				7067077221610572,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						17
					]
				]
				]
			]
			],
			[
			[
				91,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				9214648763858314,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8283776088145403,
			[
			[
				90,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				6919553386343879,
				false
				,[
				[
					1,
					[
						2,
						"transform"
					]
				]
				]
			]
			],
			[
			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				8614810284317411,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5011415984909616,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				1198320987954111,
				false
			]
			],
			[
			[
				92,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				4547742247091962,
				false
				,[
				[
					3,
					3
				]
				]
			]
,			[
				101,
				cr.behaviors.EightDir.prototype.acts.SimulateControl,
				"8Direction",
				7728478165163461,
				false
				,[
				[
					3,
					3
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				5899370732706714,
				[
				[
					95,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					9787629256052073,
					false
					,[
					[
						1,
						[
							2,
							"close"
						]
					]
					]
				]
				],
				[
				[
					95,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					9276188738913673,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4545170688955776,
				[
				[
					91,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9246830247626432,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					8650265700850945,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						591931358706201,
						false
						,[
						[
							10,
							1
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
					],
					[
					[
						91,
						cr.behaviors.Platform.prototype.acts.SimulateControl,
						"Platform",
						5165767112194926,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						90,
						cr.behaviors.Rotate.prototype.acts.SetSpeed,
						"Rotate",
						2274688518809338,
						false
						,[
						[
							0,
							[
								0,
								-280
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8700531388156714,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						7465320540580847,
						false
						,[
						[
							10,
							1
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
					],
					[
					[
						91,
						cr.behaviors.Platform.prototype.acts.SimulateControl,
						"Platform",
						7738120310217052,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						90,
						cr.behaviors.Rotate.prototype.acts.SetSpeed,
						"Rotate",
						4334282285540401,
						false
						,[
						[
							0,
							[
								0,
								280
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				237168858116699,
				[
				[
					89,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					2111601055860316,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7126606023039371,
					[
					[
						10,
						cr.plugins_.Sprite.prototype.cnds.CompareY,
						null,
						0,
						false,
						false,
						false,
						3545321931736914,
						false
						,[
						[
							8,
							4
						]
,						[
							0,
							[
								0,
								153
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						411957584455206,
						false
						,[
						[
							11,
							"lifes"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						10,
						cr.plugins_.Sprite.prototype.acts.SetY,
						null,
						7548889713091237,
						false
						,[
						[
							0,
							[
								0,
								153
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3617255995566755,
			[
			[
				91,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				1277810815250755,
				false
				,[
				[
					4,
					30
				]
				]
			]
			],
			[
			[
				91,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				7885966203296927,
				false
				,[
				[
					3,
					2
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				4268752765976213,
				false
				,[
				[
					2,
					["pum",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-4
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
				null,
				9297071980698418,
				false
				,[
				[
					10,
					3
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				1954362104543489,
				[
				[
					91,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1577806300288555,
					false
					,[
					[
						10,
						2
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					6104759042035737,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1775718246976715,
						false
						,[
						[
							10,
							1
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
					],
					[
					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7589244206921615,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						9464626337588471,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8137404810347167,
				[
				[
					91,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9378891498164329,
					false
					,[
					[
						10,
						2
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7251304036072773,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9332312900705017,
						false
						,[
						[
							10,
							1
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
					],
					[
					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5358322253487084,
						false
						,[
						[
							10,
							1
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						4987232107459496,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8663982036393517,
				[
				[
					91,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					8031875381189335,
					false
					,[
					[
						10,
						2
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					91,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7586459655915602,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2301598746421771,
				[
				[
					93,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					true,
					false,
					6148386901913226,
					false
				]
				],
				[
				[
					93,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3172306183784148,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2327048799962824,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					93,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3288449142057681,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5053529730579447,
			[
			[
				91,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				5544020489060404,
				false
				,[
				[
					10,
					3
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						4
					]
				]
				]
			]
			],
			[
			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				6340322457865513,
				false
				,[
				[
					10,
					3
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				3788533455975452,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				90,
				cr.behaviors.Rotate.prototype.acts.SetSpeed,
				"Rotate",
				9408154094466807,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				2789495246744703,
				false
				,[
				[
					1,
					[
						2,
						"notransform"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				90,
				cr.plugins_.Sprite.prototype.acts.SetAngle,
				null,
				4325075158737922,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			57138866864637,
			[
			[
				90,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				7343860367740512,
				false
				,[
				[
					1,
					[
						2,
						"notransform"
					]
				]
				]
			]
			],
			[
			[
				90,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				9781800753408882,
				false
				,[
				[
					0,
					[
						0,
						23
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				3239941559373051,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				100,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				1263423822505563,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				91,
				cr.behaviors.Platform.prototype.acts.SetVectorY,
				"Platform",
				3115236244973148,
				false
				,[
				[
					0,
					[
						0,
						-400
					]
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				7056604478707691,
				false
				,[
				[
					10,
					8
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				226998777744971,
				false
				,[
				[
					11,
					"finalloop"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2381901043758024,
			[
			[
				-1,
				cr.system_object.prototype.cnds.Every,
				null,
				0,
				false,
				false,
				false,
				5684467596792004,
				false
				,[
				[
					0,
					[
						1,
						0.06
					]
				]
				]
			]
			],
			[
			[
				93,
				cr.plugins_.Sprite.prototype.acts.SetX,
				null,
				4539070431179624,
				false
				,[
				[
					0,
					[
						19,
						cr.system_object.prototype.exps.random
						,[
[
							0,
							147
						]
,[
							0,
							153
						]
						]
					]
				]
				]
			]
,			[
				93,
				cr.plugins_.Sprite.prototype.acts.SetY,
				null,
				5059716217042886,
				false
				,[
				[
					0,
					[
						19,
						cr.system_object.prototype.exps.random
						,[
[
							0,
							97
						]
,[
							0,
							103
						]
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9616374667981444,
			[
			[
				90,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				4833735192559528,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				1880492558263836,
				false
				,[
				[
					10,
					4
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8129280391127756,
				[
				[
					10,
					cr.behaviors.Platform.prototype.cnds.IsFalling,
					"Platform",
					0,
					false,
					false,
					false,
					7140293768469314,
					false
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					7344951423472891,
					false
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							20,
							90,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					8516180515505424,
					false
					,[
					[
						0,
						[
							0,
							-150
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					6009461301204145,
					[
					[
						90,
						cr.behaviors.Flash.prototype.cnds.IsFlashing,
						"Flash",
						0,
						false,
						true,
						false,
						2423451628217944,
						false
					]
,					[
						90,
						cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
						null,
						0,
						false,
						true,
						false,
						7705479936137941,
						false
						,[
						[
							1,
							[
								2,
								"transform"
							]
						]
						]
					]
,					[
						90,
						cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
						null,
						0,
						false,
						true,
						false,
						8066687766702479,
						false
						,[
						[
							1,
							[
								2,
								"notransform"
							]
						]
						]
					]
					],
					[
					[
						92,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						1985073754270724,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
						null,
						8573397603176511,
						false
						,[
						[
							10,
							4
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3481722343855581,
						false
						,[
						[
							10,
							8
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						90,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						6420696756766104,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						1564317168921657,
						false
						,[
						[
							2,
							["malo",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"all"
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SubVar,
						null,
						8689426305352829,
						false
						,[
						[
							11,
							"boss_lifes"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						10,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						9501503245403611,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						1933328037522652,
						false
						,[
						[
							0,
							[
								1,
								0.6
							]
						]
						]
					]
,					[
						10,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						9062402164781183,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						6397416197235541,
						false
						,[
						[
							0,
							[
								1,
								0.6
							]
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6234297755721236,
						false
						,[
						[
							10,
							5
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						4039472865978036,
						false
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						100,
						cr.plugins_.Sprite.prototype.acts.SetHeight,
						null,
						3094309318169752,
						false
						,[
						[
							0,
							[
								0,
								77
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					1181405016550965,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4301783045946327,
						false
						,[
						[
							10,
							4
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2668615962448864,
						false
						,[
						[
							10,
							8
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						99,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						8619760937605046,
						false
						,[
						[
							4,
							91
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						99,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						8816222117139077,
						false
						,[
						[
							1,
							[
								2,
								"Default"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6230047436678956,
						false
					]
,					[
						90,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						4339843410863924,
						false
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9198335724821469,
						false
						,[
						[
							2,
							["pum",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-4
							]
						]
,						[
							1,
							[
								2,
								"all"
							]
						]
						]
					]
,					[
						93,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						6631879568089151,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						882056695129626,
						false
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						93,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						8379573826910435,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						8217018662638924,
						false
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						49,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						9529700125330103,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						49,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						987557502047075,
						false
						,[
						[
							1,
							[
								2,
								"Default"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						10,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						8768246664446257,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.StopAll,
						null,
						3654311445438912,
						false
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						3417832026738521,
						false
						,[
						[
							2,
							["cleared",true]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-2
							]
						]
,						[
							1,
							[
								2,
								"all"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4405059663812117,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					0,
					false,
					false,
					false,
					660796919353916,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					2690553307787585,
					[
					[
						41,
						cr.plugins_.Sprite.prototype.cnds.CompareFrame,
						null,
						0,
						false,
						false,
						false,
						7304093704506111,
						false
						,[
						[
							8,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						7807793763751809,
						false
						,[
						[
							2,
							["damage",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-5
							]
						]
,						[
							1,
							[
								2,
								"all"
							]
						]
						]
					]
,					[
						10,
						cr.behaviors.scrollto.prototype.acts.Shake,
						"ScrollTo",
						2026736718772658,
						false
						,[
						[
							0,
							[
								0,
								5
							]
						]
,						[
							0,
							[
								1,
								0.4
							]
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SubVar,
						null,
						6904981213096959,
						false
						,[
						[
							11,
							"lifes"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.Sprite.prototype.acts.StartAnim,
						null,
						5429388679017271,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						10,
						cr.behaviors.Platform.prototype.acts.SimulateControl,
						"Platform",
						9844698969623346,
						false
						,[
						[
							3,
							2
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7063326292262646,
			[
			[
				92,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				2620398344243192,
				false
				,[
				[
					4,
					10
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				4507902984707909,
				[
				[
					41,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					272852608468439,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					3506594569806179,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							20,
							92,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					91,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					8689819091272576,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					71272463185082,
					false
					,[
					[
						2,
						["damage",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							-5
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					10,
					cr.behaviors.scrollto.prototype.acts.Shake,
					"ScrollTo",
					4708841516025141,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
,					[
						0,
						[
							1,
							0.4
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SubVar,
					null,
					9363723066281104,
					false
					,[
					[
						11,
						"lifes"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.acts.StartAnim,
					null,
					5747608544910456,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					1676179492698445,
					false
					,[
					[
						3,
						2
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6085159024454878,
			[
			[
				101,
				cr.plugins_.Sprite.prototype.cnds.CompareY,
				null,
				0,
				false,
				false,
				false,
				3293409575069462,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						200
					]
				]
				]
			]
			],
			[
			[
				101,
				cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
				"8Direction",
				8767524879129139,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				101,
				cr.plugins_.Sprite.prototype.acts.SetX,
				null,
				4350795185205215,
				false
				,[
				[
					0,
					[
						19,
						cr.system_object.prototype.exps.random
						,[
[
							0,
							10
						]
,[
							0,
							248
						]
						]
					]
				]
				]
			]
,			[
				101,
				cr.plugins_.Sprite.prototype.acts.SetY,
				null,
				122682185815687,
				false
				,[
				[
					0,
					[
						19,
						cr.system_object.prototype.exps.random
						,[
[
							0,
							-250
						]
,[
							0,
							-10
						]
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2394600186931565,
			[
			[
				92,
				cr.plugins_.Sprite.prototype.cnds.CompareY,
				null,
				0,
				false,
				false,
				false,
				6998462625225983,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						200
					]
				]
				]
			]
			],
			[
			[
				92,
				cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
				"8Direction",
				5131107785463823,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				5842376086991278,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					9371081016871669,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							16
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					1289082317374699,
					false
					,[
					[
						0,
						[
							0,
							-231
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2723578300477446,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					2272987729056097,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							20
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					1742393911852735,
					false
					,[
					[
						0,
						[
							0,
							-47
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5188331216787018,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					2792786291892845,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							56
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					8272613920576269,
					false
					,[
					[
						0,
						[
							0,
							-47
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8204574745323633,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8030433592201409,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							64
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					492411226471454,
					false
					,[
					[
						0,
						[
							0,
							-165
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5970050294345859,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4336362582111885,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							116
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					9461262842865606,
					false
					,[
					[
						0,
						[
							0,
							-241
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4073341768167585,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4989909557423247,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							123
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					5033696341915108,
					false
					,[
					[
						0,
						[
							0,
							-90
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6098689731891898,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4251548200539714,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							152
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					5018511788243508,
					false
					,[
					[
						0,
						[
							0,
							-241
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9715654280899296,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					6167710715803083,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							160
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					6446750215509644,
					false
					,[
					[
						0,
						[
							0,
							-157
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7287278736561817,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					253570535326398,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							177
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					7931049902227102,
					false
					,[
					[
						0,
						[
							0,
							-32
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7736259886217024,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					5661662259266349,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							196
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					6981587672870684,
					false
					,[
					[
						0,
						[
							0,
							-157
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1569901499764075,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1678566855530018,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							239
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					4769175775060139,
					false
					,[
					[
						0,
						[
							0,
							-88
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2924169415948117,
				[
				[
					92,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					163439041787085,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							240
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					333819259467884,
					false
					,[
					[
						0,
						[
							0,
							-220
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			636466698930186,
			[
			[
				91,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4968005973671158,
				false
				,[
				[
					10,
					5
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				90,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				3331164818491341,
				false
				,[
				[
					1,
					[
						2,
						"transform"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				2012079965235397,
				false
				,[
				[
					10,
					5
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4475642878438539,
			[
			[
				91,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				7303624029646476,
				false
				,[
				[
					10,
					7
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				92,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				408166383695501,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				92,
				cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
				"8Direction",
				4536140018685806,
				false
				,[
				[
					0,
					[
						0,
						50
					]
				]
				]
			]
,			[
				101,
				cr.behaviors.EightDir.prototype.acts.SetMaxSpeed,
				"8Direction",
				5413913188365951,
				false
				,[
				[
					0,
					[
						0,
						50
					]
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				8821513218518558,
				false
				,[
				[
					10,
					7
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5981117253354181,
			[
			[
				91,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4916865932636625,
				false
				,[
				[
					10,
					6
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				73,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				6472930526816134,
				false
				,[
				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				73,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				6532625409626465,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						2,
						"up"
					]
				]
				]
			]
,			[
				73,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				8333099402463891,
				false
				,[
				[
					10,
					1
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				73,
				cr.plugins_.Sprite.prototype.acts.SetFlipped,
				null,
				8125907135612113,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				6564920100554764,
				false
				,[
				[
					10,
					6
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				4595692651967902,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					7956273382908633,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							11
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					2968077626129015,
					false
					,[
					[
						0,
						[
							0,
							480
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9480531857218781,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					5299079625733539,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							30
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					2805482333500842,
					false
					,[
					[
						0,
						[
							0,
							460
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7811130351555644,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8201698783431475,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							50
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					1151892679330376,
					false
					,[
					[
						0,
						[
							0,
							440
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3577052732071628,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					2575095184543323,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							70
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					1386016466931596,
					false
					,[
					[
						0,
						[
							0,
							420
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3644110331805085,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					9370005655389122,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							90
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					9882232169803961,
					false
					,[
					[
						0,
						[
							0,
							400
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7240598378546338,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					3926443301756255,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							110
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					7227808398677188,
					false
					,[
					[
						0,
						[
							0,
							380
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				924741005607879,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					6862736228749878,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					369359313900689,
					false
					,[
					[
						0,
						[
							0,
							360
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1200588777746918,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					3250075708231399,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							150
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					5053920167972619,
					false
					,[
					[
						0,
						[
							0,
							340
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3907134903361445,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					2427527348031345,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							170
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					6521078239083751,
					false
					,[
					[
						0,
						[
							0,
							320
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1065209229163514,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1806514663629878,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							190
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					4344911155256584,
					false
					,[
					[
						0,
						[
							0,
							300
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4770232677034696,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					3515949613837873,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							210
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					637547748350878,
					false
					,[
					[
						0,
						[
							0,
							280
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7731857987362394,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4154033778037776,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							230
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					6797609539998934,
					false
					,[
					[
						0,
						[
							0,
							260
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2295532067766776,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					2056936681985033,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							250
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					4415619885360762,
					false
					,[
					[
						0,
						[
							0,
							240
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9888056712216367,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					8513271633468018,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							270
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					6835417462258104,
					false
					,[
					[
						0,
						[
							0,
							220
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4179043600637158,
				[
				[
					73,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					4948388554985736,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							290
						]
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetY,
					null,
					4323647518206979,
					false
					,[
					[
						0,
						[
							0,
							200
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7821766690465551,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				5735208149776404,
				false
				,[
				[
					11,
					"finalloop"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				91,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2643383116247699,
				false
				,[
				[
					10,
					8
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5393639022706829,
				false
				,[
				[
					11,
					"finalloop"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				9878844691985742,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				100,
				cr.plugins_.Sprite.prototype.acts.SetHeight,
				null,
				1694451574904083,
				false
				,[
				[
					0,
					[
						0,
						17
					]
				]
				]
			]
,			[
				100,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				6523784307010628,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				90,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				395779996965047,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				6283977744873986,
				false
				,[
				[
					0,
					[
						1,
						1.5
					]
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				4173588902631774,
				false
				,[
				[
					2,
					["pum",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-4
					]
				]
,				[
					1,
					[
						2,
						"all"
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				2201774822905596,
				[
				[
					91,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1883994437822265,
					false
					,[
					[
						10,
						8
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					91,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7777881354481382,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					93,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5183456107074013,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					6407487667923084,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					93,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					1277096421068815,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2282584116609448,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9854066962838416,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9970480283565799,
					false
					,[
					[
						0,
						[
							1,
							1.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					801253830616517,
					false
					,[
					[
						2,
						["pum",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							-4
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					2924718249804495,
					[
					[
						91,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						5111157768104786,
						false
						,[
						[
							10,
							8
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						91,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1950092607370855,
						false
						,[
						[
							10,
							6
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						93,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						6649451515111683,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						483336832640639,
						false
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						93,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						8569223103812398,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						8014694551980943,
						false
						,[
						[
							0,
							[
								1,
								1.3
							]
						]
						]
					]
,					[
						90,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5927639584020019,
						false
						,[
						[
							1,
							[
								2,
								"temblor"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						6295637977862748,
						false
						,[
						[
							0,
							[
								1,
								0.7
							]
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						454587176044789,
						false
						,[
						[
							2,
							["pum",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-4
							]
						]
,						[
							1,
							[
								2,
								"all"
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						1356168922314057,
						[
						[
							91,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							2751557527757133,
							false
							,[
							[
								10,
								8
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						],
						[
						[
							91,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							1633097680348095,
							false
							,[
							[
								10,
								7
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							93,
							cr.plugins_.Sprite.prototype.acts.SetVisible,
							null,
							7058940069362311,
							false
							,[
							[
								3,
								1
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							2779112657175304,
							false
							,[
							[
								0,
								[
									1,
									0.5
								]
							]
							]
						]
,						[
							93,
							cr.plugins_.Sprite.prototype.acts.SetVisible,
							null,
							1794717305446915,
							false
							,[
							[
								3,
								0
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							3913130596626925,
							false
							,[
							[
								0,
								[
									1,
									5.5
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							896996863423588,
							false
							,[
							[
								11,
								"finalloop"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			976754069125891,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				2743786842811282,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				4427447464719386,
				[
				[
					89,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					1975429983526025,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9621486717823342,
					false
					,[
					[
						11,
						"finalloop"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					91,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7292404881488554,
					false
					,[
					[
						10,
						8
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					312307370644039,
					false
					,[
					[
						11,
						"boss_lifes"
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
,				[
					91,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					9981935388804858,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1522013450298619,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				4651180224496111,
				false
				,[
				[
					9,
					32
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9890620253336416,
				[
				[
					95,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					6948769006838206,
					false
				]
,				[
					95,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2040431246464221,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							0,
							16
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9282064072727703,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"all"
						]
					]
					]
				]
,				[
					95,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					3914090586029352,
					false
					,[
					[
						1,
						[
							2,
							"close"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					10,
					cr.behaviors.Platform.prototype.acts.SetEnabled,
					"Platform",
					5477268042315269,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7614559359398332,
			[
			[
				95,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				4397868856818598,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						14
					]
				]
				]
			]
,			[
				95,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				false,
				false,
				2601123498090987,
				false
			]
			],
			[
			[
				10,
				cr.behaviors.Platform.prototype.acts.SetEnabled,
				"Platform",
				3822136076632189,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3211942256499416,
			[
			[
				96,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				4992136520832749,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						20
					]
				]
				]
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				6520210583457251,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				10,
				cr.behaviors.Platform.prototype.acts.SetMaxSpeed,
				"Platform",
				6360618318923745,
				false
				,[
				[
					0,
					[
						0,
						120
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				4063846637872176,
				false
				,[
				[
					0,
					[
						0,
						2
					]
				]
				]
			]
,			[
				98,
				cr.plugins_.Text.prototype.acts.SetVisible,
				null,
				8996294265690729,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				98,
				cr.behaviors.Fade.prototype.acts.StartFade,
				"Fade",
				7879546809699572,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8675321004674817,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				5281790554558343,
				false
				,[
				[
					9,
					27
				]
				]
			]
			],
			[
			[
				6,
				cr.plugins_.Browser.prototype.acts.Close,
				null,
				868417536375614,
				false
			]
			]
		]
		]
	]
,	[
		"Event sheet 2",
		[
		[
			0,
			null,
			false,
			null,
			8968916092415007,
			[
			[
				53,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				2559788705016367,
				false
				,[
				[
					8,
					0
				]
,				[
					0,
					[
						0,
						9
					]
				]
				]
			]
,			[
				53,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				9353601797719267,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				53,
				cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
				null,
				2230780596664269,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3958761964407804,
				false
				,[
				[
					0,
					[
						1,
						1.7
					]
				]
				]
			]
,			[
				53,
				cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
				null,
				5013269921243829,
				false
				,[
				[
					0,
					[
						0,
						15
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2209575689498646,
			[
			[
				53,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				4759555387181718,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				53,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				980502806037115,
				false
				,[
				[
					1,
					[
						2,
						"play"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3076159535087761,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				9151182088024812,
				false
				,[
				[
					9,
					40
				]
				]
			]
,			[
				53,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				3708560842304285,
				false
				,[
				[
					1,
					[
						2,
						"play"
					]
				]
				]
			]
,			[
				86,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				1776469019568648,
				false
			]
			],
			[
			[
				53,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				3049971254538648,
				false
				,[
				[
					1,
					[
						2,
						"credits"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				773598675357302,
				false
				,[
				[
					2,
					["selection",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"selection"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2694436336707939,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				1363493501915972,
				false
				,[
				[
					9,
					38
				]
				]
			]
,			[
				53,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				1721813141350847,
				false
				,[
				[
					1,
					[
						2,
						"credits"
					]
				]
				]
			]
,			[
				86,
				cr.plugins_.Sprite.prototype.cnds.IsVisible,
				null,
				0,
				false,
				true,
				false,
				2100171061832987,
				false
			]
			],
			[
			[
				53,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				5001435594703376,
				false
				,[
				[
					1,
					[
						2,
						"play"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				6780912196163013,
				false
				,[
				[
					2,
					["selection",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						-5
					]
				]
,				[
					1,
					[
						2,
						"selection"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			326677102960622,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				8276120383491627,
				false
				,[
				[
					9,
					32
				]
				]
			]
,			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				667920981035734,
				false
				,[
				[
					9,
					13
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				263439117693682,
				[
				[
					86,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					711115089234598,
					false
				]
,				[
					86,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					3763106423122399,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							10
						]
					]
					]
				]
				],
				[
				[
					5,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2479834486841549,
					false
					,[
					[
						2,
						["accept",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						1,
						[
							2,
							"accept"
						]
					]
					]
				]
,				[
					86,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					1698589724986496,
					false
					,[
					[
						1,
						[
							2,
							"outro"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					53,
					cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
					null,
					394677168047439,
					false
					,[
					[
						0,
						[
							0,
							15
						]
					]
					]
				]
,				[
					53,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					8922047501262734,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					53,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					8057598184070911,
					false
					,[
					[
						0,
						[
							0,
							24
						]
					]
					]
				]
,				[
					87,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4199138593473223,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					88,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3692194456495887,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7342503738109378,
				[
				[
					86,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					true,
					false,
					5130720016482597,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					8728604164865419,
					[
					[
						53,
						cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
						null,
						0,
						false,
						false,
						false,
						8252207206241142,
						false
						,[
						[
							1,
							[
								2,
								"play"
							]
						]
						]
					]
					],
					[
					[
						18,
						cr.plugins_.Sprite.prototype.acts.StartAnim,
						null,
						8220064716780644,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						1277778242156341,
						false
						,[
						[
							2,
							["accept",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								1
							]
						]
,						[
							1,
							[
								2,
								"accept"
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						1660014009167735,
						false
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayout,
						null,
						4605131604628576,
						false
						,[
						[
							6,
							"1level-grass"
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4520686604865393,
					[
					[
						53,
						cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
						null,
						0,
						false,
						false,
						false,
						8938714290818999,
						false
						,[
						[
							1,
							[
								2,
								"credits"
							]
						]
						]
					]
					],
					[
					[
						5,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9513599583307518,
						false
						,[
						[
							2,
							["accept",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								1
							]
						]
,						[
							1,
							[
								2,
								"accept"
							]
						]
						]
					]
,					[
						86,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						2729510695258481,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						86,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						1049014774726093,
						false
						,[
						[
							1,
							[
								2,
								"intro"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						53,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						3703967240504182,
						false
						,[
						[
							1,
							[
								2,
								"Default"
							]
						]
,						[
							3,
							0
						]
						]
					]
,					[
						53,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6734200425530588,
						false
						,[
						[
							0,
							[
								0,
								35
							]
						]
						]
					]
,					[
						53,
						cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
						null,
						9052071187537745,
						false
						,[
						[
							0,
							[
								0,
								-15
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						2219838859542317,
						false
						,[
						[
							0,
							[
								1,
								0.8
							]
						]
						]
					]
,					[
						88,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						4269737363994727,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						7843500466328679,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetY,
						null,
						5775613389961133,
						false
						,[
						[
							0,
							[
								0,
								300
							]
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8544340336011049,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								2,
								"play"
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2588539856221318,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				4233273983736282,
				false
			]
			],
			[
			[
				6,
				cr.plugins_.Browser.prototype.acts.RequestFullScreen,
				null,
				2433885584438501,
				false
				,[
				[
					3,
					4
				]
				]
			]
,			[
				20,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				5390612562492718,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				21,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				7314539297603623,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				36,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				8366955028588465,
				false
				,[
				[
					1,
					[
						2,
						"bit_trip7_srbregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				18,
				cr.plugins_.Sprite.prototype.acts.StopAnim,
				null,
				9632150269380441,
				false
			]
,			[
				86,
				cr.plugins_.Sprite.prototype.acts.StopAnim,
				null,
				3155476589968865,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				4477618646506705,
				false
				,[
				[
					0,
					[
						1,
						2.8
					]
				]
				]
			]
,			[
				5,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				7926667094264233,
				false
				,[
				[
					2,
					["pinball spring",true]
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						-3
					]
				]
,				[
					1,
					[
						2,
						"music"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1288903768807011,
			[
			[
				86,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				9922735802467318,
				false
				,[
				[
					1,
					[
						2,
						"outro"
					]
				]
				]
			]
			],
			[
			[
				86,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				3654827920857106,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2653590397250504,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				3144160359888268,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				5669162361433863,
				[
				[
					87,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1345567096221373,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"play"
						]
					]
					]
				]
				],
				[
				[
					87,
					cr.behaviors.EightDir.prototype.acts.SimulateControl,
					"8Direction",
					6872958911746452,
					false
					,[
					[
						3,
						2
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9741393297817389,
				[
				[
					87,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					5723395527391094,
					false
					,[
					[
						8,
						3
					]
,					[
						0,
						[
							0,
							-5
						]
					]
					]
				]
				],
				[
				[
					87,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					6596969853779051,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							2,
							"stop"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4441716738361046,
			[
			[
				2,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				8680548268764464,
				false
				,[
				[
					9,
					27
				]
				]
			]
			],
			[
			[
				6,
				cr.plugins_.Browser.prototype.acts.Close,
				null,
				4716172975288892,
				false
			]
			]
		]
		]
	]
	],
	"media/",
	true,
	300,
	200,
	5,
	true,
	false,
	false,
	"1.0",
	true,
	false,
	1,
	0,
	3660,
	false,
	true,
	[
	]
];};

